import{_ as i,c as a,o as e,b0 as n}from"./chunks/framework.D8aj9ziZ.js";const r=JSON.parse('{"title":"37.Process","description":"","frontmatter":{"title":"37.Process"},"headers":[],"relativePath":"BE/node/docs/37.process.md","filePath":"BE/node/docs/37.process.md","lastUpdated":1749894304000}'),p={name:"BE/node/docs/37.process.md"};function l(t,s,o,h,d,k){return e(),a("div",null,s[0]||(s[0]=[n(`<p><code>The process object provides information about, and control over, the current Node.js process.</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span></code></pre></div><h2 id="_1-event" tabindex="-1">1.event <a class="header-anchor" href="#_1-event" aria-label="Permalink to &quot;1.event&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当 Node.js 清空了事件循环并且没有额外的工作安排时触发。这个事件可以让开发者在进程退出前执行一些异步操作。如果在此事件处理程序中调度了异步操作，Node.js 进程可能不会退出。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeExit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeExit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当进程即将退出时触发。触发时，所有的事件循环、异步操作都已经停止，无法再调度新的操作。开发者可以在此事件中执行最后的同步清理操作，如关闭文件流等。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当一个异常未被捕获时触发。如果不处理这个事件，进程会在触发该事件后立即退出。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uncaughtException&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uncaughtException&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当一个 Promise 被拒绝（rejected）且没有提供 catch 处理程序时触发。该事件可以用来捕获未处理的 Promise 错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unhandledRejection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unhandledRejection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当一个 Promise 被拒绝但稍后有 catch 处理程序时触发。此事件通常在 Promise 被拒绝后的一轮事件循环中触发。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rejectionHandled&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rejectionHandled&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当 Node.js 发出警告时触发。可以用来捕获和处理 Node.js 发出的警告信息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warning&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warning&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在使用 child_process 模块时，当子进程发送消息到父进程时触发。在主进程中可以监听这个事件来处理来自子进程的消息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当worker被创建时触发。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;worker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;worker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This message is displayed first.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="_2-property" tabindex="-1">2.property <a class="header-anchor" href="#_2-property" aria-label="Permalink to &quot;2.property&quot;">​</a></h2><p><code>Node.js</code> 中 <code>process</code> 对象的不分属性：</p><ol><li><p><strong><code>process.argv</code></strong>：启动 <code>Node.js</code> 进程时传入的命令行参数数组。</p></li><li><p><strong><code>process.env</code></strong>：表示当前用户环境的环境变量对象。</p></li><li><p><strong><code>process.exitCode</code></strong>：获取或设置进程退出时的退出码。</p></li><li><p><strong><code>process.pid</code></strong>：当前进程的进程 <code>ID</code>。</p></li><li><p><strong><code>process.ppid</code></strong>：当前进程的父进程 <code>ID</code>。</p></li><li><p><strong><code>process.platform</code></strong>：当前运行平台的字符串，例如 <code>&#39;darwin&#39;</code>（macOS）、<code>&#39;win32&#39;</code>（Windows）、<code>&#39;linux&#39;</code> 等。</p></li><li><p><strong><code>process.version</code></strong>：当前运行的 <code>Node.js</code> 版本字符串。</p></li><li><p><strong><code>process.versions</code></strong>：一个对象，包含 <code>Node.js</code> 及其依赖的版本信息。</p></li><li><p><strong><code>process.arch</code></strong>：当前运行的操作系统 <code>CPU</code> 架构，例如 <code>&#39;x64&#39;</code>、<code>&#39;arm&#39;</code> 等。</p></li><li><p><strong><code>process.release</code></strong>：包含 <code>Node.js</code> 相关版本和构建元数据的对象。</p></li><li><p><strong><code>process.title</code></strong>：当前进程的名称，可以被修改。</p></li><li><p><strong><code>process.config</code></strong>：<code>Node.js</code> 构建配置选项的对象。</p></li><li><p><strong><code>process.execPath</code></strong>：启动当前进程的 <code>Node.js</code> 可执行文件的绝对路径。</p></li><li><p><strong><code>process.execArgv</code></strong>：启动当前进程时传给 <code>Node.js</code> 的命令行选项的数组。</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span></code></pre></div><h2 id="_3-methods" tabindex="-1">3.methods <a class="header-anchor" href="#_3-methods" aria-label="Permalink to &quot;3.methods&quot;">​</a></h2><p><code>process</code> 对象中常用的可执行方法：</p><ol><li><p><strong><code>process.cwd()</code></strong>：返回 <code>Node.js</code> 进程的当前工作目录。</p></li><li><p><strong><code>process.chdir(directory)</code></strong>：更改 <code>Node.js</code> 进程的当前工作目录。</p></li><li><p><strong><code>process.memoryUsage()</code></strong>：返回一个对象，表示 <code>Node.js</code> 进程的内存使用情况。</p></li><li><p><strong><code>process.uptime()</code></strong>：返回 <code>Node.js</code> 进程的运行时间（以秒为单位）。</p></li><li><p><strong><code>process.hrtime([time])</code></strong>：返回高分辨率的实时时间，作为一个 <code>[seconds, nanoseconds]</code> 数组。如果传入 <code>time</code> 参数，则返回与该时间的差值。</p></li><li><p><strong><code>process.nextTick(callback)</code></strong>：在当前操作完成之后立即执行一个回调函数。</p></li><li><p><strong><code>process.abort()</code></strong>：使 <code>Node.js</code> 进程立即以非 <code>0</code> 的退出码终止。</p></li><li><p><strong><code>process.emitWarning(warning[, options])</code></strong>：发出一个自定义警告，可以指定警告消息和选项。</p></li><li><p><strong><code>process.kill(pid[, signal])</code></strong>：向指定的进程 <code>ID</code> (<code>pid</code>) 发送信号，可以用来终止进程。</p></li><li><p><strong><code>process.exit([code])</code></strong>：以指定的退出码退出 <code>Node.js</code> 进程。如果不指定 <code>code</code>，默认退出码为 <code>0</code>。</p></li><li><p><strong><code>process.on(eventName, listener)</code></strong>：为 <code>process</code> 对象的事件添加监听器，例如 <code>exit</code>、<code>uncaughtException</code> 等事件。</p></li><li><p><strong><code>process.removeListener(eventName, listener)</code></strong>：移除指定事件的监听器。</p></li><li><p><strong><code>process.setUncaughtExceptionCaptureCallback(callback)</code></strong>：设置一个回调函数，以捕获未捕获的异常。</p></li><li><p><strong><code>process.send(message[, sendHandle[, options]][, callback])</code></strong>：如果 <code>Node.js</code> 进程是通过 <code>child_process.fork()</code> 创建的子进程，可以使用此方法向父进程发送消息。</p></li><li><p><strong><code>process.disconnect()</code></strong>：如果 <code>Node.js</code> 进程是通过 <code>child_process.fork()</code> 创建的子进程，断开与父进程的 <code>IPC</code> 通道。</p></li></ol><h2 id="_4-exit-codes" tabindex="-1">4.Exit Codes <a class="header-anchor" href="#_4-exit-codes" aria-label="Permalink to &quot;4.Exit Codes&quot;">​</a></h2><p><code>Node.js</code> 进程的退出码（<code>Exit Codes</code>）可以帮助判断进程的终止原因。以下是一些常见的退出码及其含义：</p><ol><li><p><strong><code>0</code></strong> - 正常退出（<code>Success</code>）：进程成功完成，没有发生错误。</p></li><li><p><strong><code>1</code></strong> - 一般性错误（<code>Uncaught Fatal Exception</code>）：未捕获的致命异常导致进程退出。</p></li><li><p><strong><code>3</code></strong> - 内部 <code>JavaScript</code> 解析错误（<code>Internal JavaScript Parse Error</code>）：<code>JavaScript</code> 源代码无法解析。</p></li><li><p><strong><code>4</code></strong> - 内部 <code>JavaScript</code> 评估失败（<code>Internal JavaScript Evaluation Failure</code>）：<code>JavaScript</code> 代码在解析后无法执行。</p></li><li><p><strong><code>5</code></strong> - 致命的 <code>V8</code> 错误（<code>Fatal Error</code>）：<code>V8</code> 引擎遇到致命错误（通常与 <code>V8</code> 内部机制有关）。</p></li><li><p><strong><code>6</code></strong> - 非函数的异常处理程序（<code>Non-function Internal Exception Handler</code>）：异常处理机制设置错误。</p></li><li><p><strong><code>7</code></strong> - 内部异常处理失败（<code>Internal Exception Handler Run-Time Failure</code>）：在处理异常时发生失败。</p></li><li><p><strong><code>9</code></strong> - 无效的参数（<code>Invalid Argument</code>）：传递给 <code>Node.js</code> 的参数无效或不合法。</p></li><li><p><strong><code>10</code></strong> - 内部 <code>JavaScript</code> 运行时失败（<code>Internal JavaScript Run-Time Failure</code>）：<code>JavaScript</code> 引擎在运行时遇到错误。</p></li><li><p><strong><code>12</code></strong> - 无效的调试参数（<code>Invalid Debug Argument</code>）：启动时传递了无效的调试选项。</p></li><li><p><strong><code>128</code></strong> + <strong><code>信号编号</code></strong> - 由于接收到信号而退出：进程因接收到信号而退出，信号编号加上 <code>128</code> 作为退出码。例如，<code>SIGINT</code> 信号的编号是 <code>2</code>，则进程接收到 <code>SIGINT</code> 信号时的退出码为 <code>130</code> (<code>128 + 2</code>)。</p></li><li><p><strong><code>137</code></strong> - 因 <code>SIGKILL</code> 信号被杀死（例如使用 <code>kill -9</code> 命令）：通常用于强制终止进程。</p></li><li><p><strong><code>139</code></strong> - 段错误（<code>Segmentation Fault</code>）：由于访问了无效的内存地址导致的崩溃。</p></li><li><p><strong><code>143</code></strong> - 因 <code>SIGTERM</code> 信号被终止：一般用于正常终止进程。</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,15)]))}const E=i(p,[["render",l]]);export{r as __pageData,E as default};
