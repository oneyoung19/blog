import{_ as i,c as s,o as a,b0 as o}from"./chunks/framework.D8aj9ziZ.js";const r=JSON.parse('{"title":"2.镜像","description":"","frontmatter":{"title":"2.镜像"},"headers":[],"relativePath":"deploy/docker/2.image.md","filePath":"deploy/docker/2.image.md","lastUpdated":1749892205000}'),d={name:"deploy/docker/2.image.md"};function l(c,e,t,p,n,h){return a(),s("div",null,e[0]||(e[0]=[o(`<p>镜像可以看做是一个只读的模板，用来创建 <code>Docker</code> 容器。</p><p>镜像是由一系列的层叠而成的，每一层都代表一个 <code>Dockerfile</code> 指令。</p><p>如果用类比的方法，<strong>可以把镜像看做是一个容器的 <code>class</code> 类，而容器则是镜像的实例</strong>。</p><h2 id="镜像的分类" tabindex="-1">镜像的分类 <a class="header-anchor" href="#镜像的分类" aria-label="Permalink to &quot;镜像的分类&quot;">​</a></h2><p><code>Docker</code> 镜像分为两种，分别是 <code>基础镜像</code> 和 <code>定制镜像</code>。</p><h3 id="基础镜像" tabindex="-1">基础镜像 <a class="header-anchor" href="#基础镜像" aria-label="Permalink to &quot;基础镜像&quot;">​</a></h3><p><code>基础镜像</code> 是由 <code>Docker</code> 官方提供的，可以直接使用。</p><p><code>Docker</code> 官方提供了很多 <code>基础镜像</code>，可以在 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 上找到。</p><h3 id="定制镜像" tabindex="-1">定制镜像 <a class="header-anchor" href="#定制镜像" aria-label="Permalink to &quot;定制镜像&quot;">​</a></h3><p><code>定制镜像</code> 是由 <code>Dockerfile</code> 文件来创建的，可以根据自己的需求来定制。</p><h2 id="镜像的命名" tabindex="-1">镜像的命名 <a class="header-anchor" href="#镜像的命名" aria-label="Permalink to &quot;镜像的命名&quot;">​</a></h2><p><code>Docker</code> 镜像的命名格式为 <code>仓库名:标签</code>，其中 <code>仓库名</code> 和 <code>标签</code> 都是可选的。</p><ul><li>仓库名：可以是 <code>Docker Hub</code> 上的用户名，也可以是 <code>Docker Hub</code> 上的组织名，也可以是 <code>Docker Hub</code> 以外的仓库地址。</li><li>标签：可以是 <code>Docker Hub</code> 上的标签，也可以是 <code>Docker Hub</code> 以外的标签。</li><li>如果仓库名和标签都没有指定，那么默认会使用 <code>Docker Hub</code> 上的 <code>library</code> 组织名，以 <code>latest</code> 标签。</li><li>如果仓库名没有指定，但是标签指定了，那么默认会使用 <code>Docker Hub</code> 上的 <code>library</code> 组织名。</li><li>如果仓库名指定了，但是标签没有指定，那么默认会使用 <code>latest</code> 标签。</li></ul><h2 id="镜像的指令" tabindex="-1">镜像的指令 <a class="header-anchor" href="#镜像的指令" aria-label="Permalink to &quot;镜像的指令&quot;">​</a></h2><p>本节主要总结镜像的相关指令。</p><h3 id="docker-image-pull" tabindex="-1">docker image pull <a class="header-anchor" href="#docker-image-pull" aria-label="Permalink to &quot;docker image pull&quot;">​</a></h3><p><code>Docker</code> 镜像的拉取可以使用 <code>docker image pull</code> 或者 <code>docker pull</code>命令。</p><p>第一种拉取方式，是使用<strong>仓库名和版本号</strong>。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 仓库名:版本号</span></span></code></pre></div><p>譬如以下几种形式的示例：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取官方的 hello-world 镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取官方的 alpine 镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取官方的 alpine 镜像，指定标签为 3.12</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alpine:3.12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取官方的 alpine 镜像，指定标签为 3.12，指定仓库地址为 docker.io</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.io/alpine:3.12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取官方的 alpine 镜像，指定标签为 3.12，指定仓库地址为 docker.io，指定仓库名为 library</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.io/library/alpine:3.12</span></span></code></pre></div><p><strong>当未声明版本时，默认拉取最新版本</strong>。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20230411212447.png" alt="" loading="lazy"></p><p>第二种拉取方式，是使用 <strong><code>sha</code> 散列值</strong>。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sha:id</span></span></code></pre></div><p><code>sha</code> 散列值，是 <code>Docker</code> 镜像的唯一标识。</p><p>它的作用，是能够保证镜像的完整性，防止镜像被篡改。</p><p><code>sha</code> 散列值，可以通过 <code>docker image inspect 镜像名</code> 命令来查看。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20230411213349.png" alt="" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于 <code>sha</code> 散列值和 <code>IMAGE ID</code> 的区别，可以认为 <strong><code>IMAGE ID</code> 是 <code>sha</code> 散列值的子集</strong>。</p><p>譬如上面拉取的 <code>hello-world</code>，其 <code>sha</code> 散列值是 <code>sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</code>。</p><p>而其 <code>IMAGE ID</code> 是 <code>feb5d9fea6a5</code>，也就是 <code>sha</code> 散列值的前 12 位。</p></div><h3 id="docker-image-ls" tabindex="-1">docker image ls <a class="header-anchor" href="#docker-image-ls" aria-label="Permalink to &quot;docker image ls&quot;">​</a></h3><p><code>Docker</code> 镜像的查看可以使用 <code>docker image ls</code> 或者 <code>docker images</code> 命令。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options]</span></span></code></pre></div><p>可以通过 <code>docker image ls --help</code> 来查看相关 <code>options</code>。大致有如下几种：</p><ul><li>-a <ul><li>--all Show all images (default hides intermediate images)</li><li>--digests Show digests</li></ul></li><li>-f <ul><li>--filter filter Filter output based on conditions provided</li><li>--format string Pretty-print images using a Go template</li><li>--no-trunc Don&#39;t truncate output</li></ul></li><li>-q <ul><li>--quiet Only show image IDs</li></ul></li></ul><h3 id="docker-image-rm" tabindex="-1">docker image rm <a class="header-anchor" href="#docker-image-rm" aria-label="Permalink to &quot;docker image rm&quot;">​</a></h3><p><code>Docker</code> 镜像的删除可以使用 <code>docker image rm</code> 或者 <code>docker rmi</code> 命令。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] 镜像名</span></span></code></pre></div><p>可以通过 <code>docker image rm --help</code> 来查看相关 <code>options</code>。大致有如下几种：</p><ul><li>-f <ul><li>--force Force removal of the image</li><li>--no-prune Do not delete untagged parents</li></ul></li></ul><h3 id="docker-image-prune" tabindex="-1">docker image prune <a class="header-anchor" href="#docker-image-prune" aria-label="Permalink to &quot;docker image prune&quot;">​</a></h3><p><code>Docker</code> 镜像的清理可以使用 <code>docker image prune</code> 命令。</p><p><strong>该命令默认用来清理悬虚镜像</strong>。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options]</span></span></code></pre></div><p>可以通过 <code>docker image prune --help</code> 来查看相关 <code>options</code>。大致有如下几种：</p><ul><li>-a <ul><li>--all Remove all unused images, not just <strong>dangling</strong> ones</li><li>--filter filter Provide filter values</li></ul></li><li>-f <ul><li>--force Do not prompt for confirmation</li></ul></li></ul><p>其中，<strong><code>-a</code> 选项会移除 <code>dangling</code> 悬虚镜像、以及所有未被使用的镜像</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>悬虚镜像，是指在 <code>Docker</code> 中没有被任何正在运行或停止的容器使用的镜像</strong>。</p><p>判断一个镜像是否是悬虚镜像:</p><ol><li><p><strong>镜像的标签（Tag）为空</strong>：悬虚镜像通常没有标签，即它们的名称是 <code>&lt;none&gt;</code>。这些镜像是构建过程中生成的中间镜像，可能是在构建新的镜像时出现的临时镜像。</p></li><li><p><strong>没有被任何容器使用</strong>：如果镜像没有被任何正在运行或停止的容器所使用，它就被认为是悬虚镜像。</p></li></ol><p><strong>可以使用 <code>docker image ls -f dangling=true</code> 来查看悬虚镜像</strong>。</p></div><h3 id="docker-image-inspect" tabindex="-1">docker image inspect <a class="header-anchor" href="#docker-image-inspect" aria-label="Permalink to &quot;docker image inspect&quot;">​</a></h3><p><code>Docker</code> 镜像的检测可以使用 <code>docker image inspect</code> 命令。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] 镜像名</span></span></code></pre></div><p><strong>该命令会返回该镜像的详细信息</strong>。</p><p>其信息是一个 <code>json</code> 格式的数据，可以通过 <code>--format</code> 来指定返回的数据格式。</p><h3 id="docker-image-tag" tabindex="-1">docker image tag <a class="header-anchor" href="#docker-image-tag" aria-label="Permalink to &quot;docker image tag&quot;">​</a></h3><p><code>Docker</code> 镜像的打标签可以使用 <code>docker image tag</code> 命令。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SOURCE_IMAGE[:TAG]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TARGET_IMAGE[:TAG]</span></span></code></pre></div><p>其中，<code>SOURCE_IMAGE</code> 是源镜像，<code>TARGET_IMAGE</code> 是目标镜像。</p><p>譬如，开发了一个镜像 <code>hello-wolrd</code>，以下命令会将 <code>hello-wolrd</code> 镜像打上 <code>v1</code> 标签：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-wolrd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-wolrd:v1</span></span></code></pre></div><p>迭代更新 <code>hello-world</code> 之后，可以通过以下命令，将 <code>hello-wolrd</code> 镜像打上 <code>v2</code> 标签：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-wolrd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-wolrd:v2</span></span></code></pre></div><p><strong>这与 <code>git</code>打标签的功能，是类似的。</strong></p><h3 id="docker-image-build" tabindex="-1">docker image build <a class="header-anchor" href="#docker-image-build" aria-label="Permalink to &quot;docker image build&quot;">​</a></h3><p><code>Docker</code> 镜像的构建可以使用 <code>docker image build</code> 命令。</p><p><strong>镜像的构建，依赖于 <code>Dockerfile</code></strong>。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] PATH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span></span></code></pre></div><ul><li><code>PATH</code> 是 <code>Dockerfile</code> 所在的目录。默认为当前工作目录。</li><li><code>URL</code> 是 <code>Dockerfile</code> 所在的 <code>git</code> 仓库地址。</li><li><code>-</code> 是指从 <code>stdin</code> 读取 <code>Dockerfile</code>。</li></ul><h3 id="docker-image-history" tabindex="-1">docker image history <a class="header-anchor" href="#docker-image-history" aria-label="Permalink to &quot;docker image history&quot;">​</a></h3><p><code>docker image history</code> 是一个命令行工具，用于显示 <code>Docker</code> 镜像的历史记录，包括每一层的操作指令和对应的镜像 <code>ID</code>。</p><p>当你使用 <code>docker build</code> 命令创建一个新的 <code>Docker</code> 镜像时，每一条指令都会创建一个新的镜像层。</p><p><strong><code>docker image history</code> 命令可以帮助你查看镜像层的变化，了解镜像是如何构建出来的</strong>。</p><p>该命令的输出包含以下信息：</p><ul><li>每一层的镜像 <code>ID</code></li><li>每一层的创建时间</li><li>每一层所包含的文件和文件系统变化</li><li>每一层所执行的 <code>Dockerfile</code> 指令</li></ul><p>这些信息可以帮助你诊断构建问题，优化构建流程，并且更好地理解镜像的组成和特性。</p><p>譬如，我们可以通过以下命令，查看 <code>hello-world</code> 镜像的历史记录：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> history</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span></code></pre></div><p>打印信息如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                      SIZE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      COMMENT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feb5d9fea6a5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> months</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /bin/sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #(nop)  CMD [&quot;/hello&quot;]               0B        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">missing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      18 months ago   /bin/sh -c </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#(nop) COPY file:50563a97010fd7ce…   13.3kB</span></span></code></pre></div><h3 id="docker-image-push" tabindex="-1">docker image push <a class="header-anchor" href="#docker-image-push" aria-label="Permalink to &quot;docker image push&quot;">​</a></h3><p><strong><code>docker image push</code> 用于将本地 <code>Docker</code> 镜像推送到 <code>Docker Hub</code> 或其他 <code>Docker Registry</code> 上</strong>。</p><p>它允许用户将自己的 <code>Docker</code> 镜像分享给其他人，或者在不同的 <code>Docker</code> 主机之间共享 <code>Docker</code> 镜像。</p><p>具体来说，<code>docker image push</code> 命令会将本地 <code>Docker</code> 镜像上传到指定的 <code>Docker Registry</code>，上传的镜像可以通过在其他机器上运行 <code>docker image pull</code> 命令进行获取和使用。该命令的语法如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] NAME[:TAG]</span></span></code></pre></div><p>其中，<code>NAME[:TAG]</code> 参数指定了要推送的 <code>Docker</code> 镜像的名称和标签。</p><p>需要注意的是，在使用 <code>docker image push</code> 命令之前，需要先登录到 <code>Docker Registry</code>。可以使用 <code>docker login</code> 命令登录到 <code>Docker Hub</code> 或其他 <code>Docker Registry</code>。</p><p>此外，如果要推送的 <code>Docker</code> 镜像太大，可能需要较长的时间进行上传。可以使用 <code>docker system prune</code> 命令清理本地 <code>Docker</code> 系统，以释放磁盘空间。</p><p>另外，对于私有的 <code>Docker Registry</code>，需要在 <code>Docker</code> 配置文件中添加认证信息，才能够推送本地 <code>Docker</code> 镜像。具体方法可以参考 <code>Docker</code> 官方文档。</p><h3 id="docker-image-save" tabindex="-1">docker image save <a class="header-anchor" href="#docker-image-save" aria-label="Permalink to &quot;docker image save&quot;">​</a></h3><p><strong><code>docker image save</code> 用于将一个或多个 <code>Docker</code> 镜像保存为 <code>tar</code> 归档文件</strong>。</p><p>这个命令将会将镜像的文件系统和元数据打包成一个 <code>tar</code> 文件，并输出到标准输出或指定的文件中。</p><p>具体使用方式如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] IMAGE [IMAGE...]</span></span></code></pre></div><p>其中，IMAGE 表示需要保存的 <code>Docker</code> 镜像名称或 <code>ID</code>，可以同时指定多个镜像。</p><p>例如，要将名为 <code>myimage:latest</code> 的 <code>Docker</code> 镜像保存为 <code>myimage.tar</code> 文件，可以执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myimage.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myimage:latest</span></span></code></pre></div><p>注意，<code>docker image save</code> 命令不会保存容器的状态，只会保存镜像本身的内容。</p><h3 id="docker-image-load" tabindex="-1">docker image load <a class="header-anchor" href="#docker-image-load" aria-label="Permalink to &quot;docker image load&quot;">​</a></h3><p><strong><code>docker image load</code> 用于从一个 <code>tar</code> 归档文件中加载 <code>Docker</code> 镜像到本地 <code>Docker</code> 镜像库中</strong>。</p><p>这个命令与 <code>docker image save</code> 命令结合使用，可以用于将 <code>Docker</code> 镜像导出到一个 <code>tar</code> 归档文件中，并将其迁移到另一个 <code>Docker</code> 主机上。</p><p>具体来说，<code>docker image load</code> 命令将一个 <code>tar</code> 归档文件中的 <code>Docker</code> 镜像加载到本地 <code>Docker</code> 镜像库中，并创建一个本地的镜像仓库。该命令的语法如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FILE</span></span></code></pre></div><p>其中，<code>&lt; FILE</code> 参数指定了要加载的 <code>tar</code> 归档文件。</p><p>通常，<code>tar</code> 归档文件是通过 <code>docker image save</code> 命令生成的。</p><p>需要注意的是，使用 <code>docker image load</code> 命令加载的 <code>Docker</code> 镜像文件需要与本地 <code>Docker</code> 主机的操作系统架构和版本相同。</p><p>如果不匹配，将会导致加载失败或者无法运行。</p><p>另外，<strong>如果要在多个 <code>Docker</code> 主机之间迁移 <code>Docker</code> 镜像，建议使用 <code>docker image save</code> 和 <code>docker image load</code> 命令组合</strong>，而不是 <code>docker image export</code> 和 <code>docker image import</code> 命令组合。</p><p>因为 <code>docker image export</code> 和 <code>docker image import</code> 命令不会保留 Docker 镜像元数据和层信息，可能会导致镜像不可用或数据损坏。</p><h3 id="docker-image-import" tabindex="-1">docker image import <a class="header-anchor" href="#docker-image-import" aria-label="Permalink to &quot;docker image import&quot;">​</a></h3><p><code>docker image import</code> 可以将本地文件系统上的一个压缩包或文件作为 <code>Docker</code> 镜像导入到本地镜像库中。</p><p>它可以将任何文件系统作为镜像导入到 <code>Docker</code> 镜像系统中，但它不会保留任何原始的 <code>Docker</code> 镜像元数据（例如镜像的名称，标签等）。</p><p>这意味着通过导入的镜像将没有名称和标签，只有一个唯一的 <code>ID</code>。</p><p>该命令的语法如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [REPOSITORY[:TAG]]</span></span></code></pre></div><p>其中，<code>file|URL|-</code> 参数指定了要导入的文件或URL，<code>REPOSITORY[:TAG]</code> 参数指定了新创建的 <code>Docker</code> 镜像的名称和标签。</p><p>如果省略了该参数，则会为导入的镜像生成一个唯一的 <code>ID</code>。</p><p>需要注意的是，<strong>使用 <code>docker image import</code> 导入的镜像不能像使用其他 <code>Docker</code> 镜像一样被 <code>push</code> 到远程仓库</strong>。</p><p>如果需要在多个机器上使用该镜像，则需要将导入的镜像文件通过其他方式分发到这些机器上。</p>`,125)]))}const g=i(d,[["render",l]]);export{r as __pageData,g as default};
