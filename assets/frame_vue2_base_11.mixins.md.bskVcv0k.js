import{_ as i,o as a,c as n,aP as e}from"./chunks/framework.D1yHhm2y.js";const c=JSON.parse('{"title":"11.混入","description":"","frontmatter":{"title":"11.混入"},"headers":[],"relativePath":"frame/vue2/base/11.mixins.md","filePath":"frame/vue2/base/11.mixins.md","lastUpdated":1735987451000}'),l={name:"frame/vue2/base/11.mixins.md"};function t(p,s,h,k,d,r){return a(),n("div",null,s[0]||(s[0]=[e(`<p>在 <code>Vue.js</code> 中，<code>mixins</code> 是一种代码复用的方式。</p><p>它允许将组件中通用的逻辑抽离到一个独立的对象中，之后可以在多个组件中引用，从而减少代码重复。</p><p>当将 <code>mixins</code> 添加到组件时，<code>Vue</code> 会将 <code>mixins</code> 中的数据、方法、计算属性等合并到组件本身。</p><p>在合并过程中，<code>Vue</code> 遇到以下几种情况会有不同的处理方式：</p><ul><li><strong>数据属性</strong>：若 <code>mixins</code> 和组件本身有同名的 <code>data</code> 属性，组件的属性优先。</li><li><strong>生命周期钩子</strong>：会混合在一起，所有同名钩子都会依次调用。</li><li><strong>方法或计算属性</strong>：若名称冲突，则组件中的定义会覆盖 <code>mixins</code> 中的定义。</li></ul><h2 id="_11-1-mixins" tabindex="-1">11-1.mixins <a class="header-anchor" href="#_11-1-mixins" aria-label="Permalink to &quot;11-1.mixins&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个 mixin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myMixin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from mixin!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件中使用 mixin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mixins: [myMixin],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &quot;Hello from mixin!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_11-2-object-assign" tabindex="-1">11-2.Object.assign <a class="header-anchor" href="#_11-2-object-assign" aria-label="Permalink to &quot;11-2.Object.assign&quot;">​</a></h2><p>详见<a href="./../../../FE/javascript/ECMAScript/10.Object#1.Object.assign">Object.assign</a></p>`,9)]))}const o=i(l,[["render",t]]);export{c as __pageData,o as default};
