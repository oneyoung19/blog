import{_ as a,c as t,o,b0 as n}from"./chunks/framework.CEggy_nf.js";const x=JSON.parse('{"title":"开始","description":"","frontmatter":{"title":"开始"},"headers":[],"relativePath":"deploy/nginx/index.md","filePath":"deploy/nginx/index.md","lastUpdated":1745140345000}'),i={name:"deploy/nginx/index.md"};function d(r,e,l,s,c,p){return o(),t("div",null,e[0]||(e[0]=[n('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>该系列文章暂时只是作为前端入门了解<code>Nginx</code>的用途。如有需要，请参考其他文章。</p><h2 id="入门介绍" tabindex="-1">入门介绍 <a class="header-anchor" href="#入门介绍" aria-label="Permalink to &quot;入门介绍&quot;">​</a></h2><p><code>Nginx</code>是一款高性能的web服务器。特点有三大类：<strong>动静分离</strong>、<strong>反向代理</strong>以及<strong>负载均衡</strong>。</p><p>首先，我们要对在现阶段前后端分离的场景下的部署有一个认知。</p><ul><li>前端将打包好的压缩包部署到目标前端服务器上，配置<code>Nginx</code>，可以使用户访问静态页面以及资源（Html、js、css、img等）。</li><li>仅仅如此的话，在现实项目中，是不满足需要的。因为项目大多是动态的，依赖于<code>ajax</code>交互。</li><li>所以还要在前端服务器上再设置反向代理，将<code>ajax</code>请求代理到后端服务器。</li></ul>',6)]))}const g=a(i,[["render",d]]);export{x as __pageData,g as default};
