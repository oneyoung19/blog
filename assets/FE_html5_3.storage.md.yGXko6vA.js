import{_ as a,c as i,o as e,b0 as l}from"./chunks/framework.CEggy_nf.js";const r=JSON.parse('{"title":"3.离线 & 存储","description":"","frontmatter":{"title":"3.离线 & 存储"},"headers":[],"relativePath":"FE/html5/3.storage.md","filePath":"FE/html5/3.storage.md","lastUpdated":1746179139000}'),n={name:"FE/html5/3.storage.md"};function o(t,s,p,d,h,c){return e(),i("div",null,s[0]||(s[0]=[l(`<p><code>HTML5</code> 引入了 <code>Web Storage</code>（ <code>localStorage</code> 和 <code>sessionStorage</code> ）和 <code>IndexedDB</code>，允许在客户端本地存储数据，从而实现离线访问和更高效的数据存储。</p><h2 id="_3-1-web-storage" tabindex="-1">3-1.Web Storage <a class="header-anchor" href="#_3-1-web-storage" aria-label="Permalink to &quot;3-1.Web Storage&quot;">​</a></h2><p><code>Web Storage</code> 包含两种机制：</p><ol><li><code>sessionStorage</code> 为每一个给定的源（<code>origin</code>）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</li></ol><ul><li>仅为会话存储数据，这意味着数据将一直存储到浏览器（或选项卡）关闭。</li><li>数据永远不会被传输到服务器。</li><li>存储限额大于 <code>cookie</code>（最大 <code>10MB</code>）。</li></ul><ol start="2"><li><code>localStorage</code> 做同样的事情，但即使浏览器关闭并重新打开也仍然存在。</li></ol><ul><li>存储的数据没有过期日期，只能通过 <code>JavaScript</code>、清除浏览器缓存或本地存储的数据来清除。</li><li>存储限额大于 <code>cookie</code>（最大 <code>10MB</code>）。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>隐私窗口、隐身模式和类似名称的隐私浏览选项不会存储历史记录和 <code>cookie</code> 等数据</strong>。</p><p>在隐身模式下，<code>localStorage</code> 被视为 <code>sessionStorage</code>。</p><p>存储 <code>API</code> 仍然可用且功能齐全，但是当浏览器或浏览器选项卡关闭时，所有存储在隐私窗口中的数据都会被删除。</p></div><h3 id="_3-1-1-sessionstorage" tabindex="-1">3-1-1.sessionStorage <a class="header-anchor" href="#_3-1-1-sessionstorage" aria-label="Permalink to &quot;3-1-1.sessionStorage&quot;">​</a></h3><p><code>sessionStorage</code> 属性允许你访问一个，对应当前源的 <code>session Storage</code> 对象。</p><p>它与 <code>localStorage</code> 相似，不同之处在于 <code>localStorage</code> 里面存储的数据没有过期时间设置，而存储在 <code>sessionStorage</code> 里面的数据在页面会话结束时会被清除。</p><p>页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。</p><p>在新标签或窗口打开一个页面时会复制顶级浏览会话的上下文作为新会话的上下文，这点和 <code>session</code>、<code>cookie</code> 的运行方式不同。</p><p>打开多个相同的 <code>URL</code> 的 <code>Tabs</code> 页面，会创建各自的 <code>sessionStorage</code>。</p><p>关闭对应浏览器标签或窗口，会清除对应的 <code>sessionStorage</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存数据到 sessionStorage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 sessionStorage 获取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 sessionStorage 删除保存的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 sessionStorage 删除所有保存的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="_3-1-2-localstorage" tabindex="-1">3-1-2.localStorage <a class="header-anchor" href="#_3-1-2-localstorage" aria-label="Permalink to &quot;3-1-2.localStorage&quot;">​</a></h3><p><code>localStorage</code> 允许你访问一个<code>Document</code> 源（<code>origin</code>）的对象 <code>Storage</code>；存储的数据将保存在浏览器会话中。</p><p><code>localStorage</code> 类似 <code>sessionStorage</code>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除。</p><p>应注意，无论数据存储在 <code>localStorage</code> 还是 <code>sessionStorage</code> ，它们都特定于页面的协议。</p><p>另外，<code>localStorage</code> 中的键值对总是以字符串的形式存储。 (需要注意，和 <code>js</code> 对象相比，<strong>键值对总是以字符串的形式存储意味着数值类型会自动转化为字符串类型</strong>)。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存数据到 localStorage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 localStorage 获取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 localStorage 删除保存的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 localStorage 删除所有保存的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="_3-2-indexeddb" tabindex="-1">3-2.IndexedDB <a class="header-anchor" href="#_3-2-indexeddb" aria-label="Permalink to &quot;3-2.IndexedDB&quot;">​</a></h2><p>笔者暂无使用场景，待定整理研究。</p>`,24)]))}const g=a(n,[["render",o]]);export{r as __pageData,g as default};
