import{_ as i,o as a,c as n,b0 as t}from"./chunks/framework.CkgpWotD.js";const E=JSON.parse('{"title":"前后端联调对接规范","description":"","frontmatter":{"title":"前后端联调对接规范"},"headers":[],"relativePath":"BE/standard/index.md","filePath":"BE/standard/index.md","lastUpdated":1737464486000}'),l={name:"BE/standard/index.md"};function p(e,s,h,k,o,d){return a(),n("div",null,s[0]||(s[0]=[t(`<p>前端偏向于<strong>视觉交互</strong>，后端偏向于<strong>数据逻辑</strong>，因此在联调过程中，前后端研发看待需求的角度是不同的。</p><p>但前后端的开发，都必须基于项目需求。</p><p>由于<strong>沟通成本</strong>和<strong>人员理解不一致</strong>甚至<strong>接口不满足需求实现</strong>的影响，前后端联调的效率也是目前项目提测的瓶颈。</p><p>另外，在某种程度上，接口质量是前端代码质量的瓶颈。接口的质量，直接影响前端代码中是否需要做大量的容错处理。</p><p>因此，前后端联调的过程中，需要有一套规范，来保证前后端的开发效率。</p><h2 id="_1-代码风格" tabindex="-1">1.代码风格 <a class="header-anchor" href="#_1-代码风格" aria-label="Permalink to &quot;1.代码风格&quot;">​</a></h2><ol><li><p>变量名尽量使用名词，方法名尽量使用动词，英文单词使用驼峰命名法。</p></li><li><p><code>GET</code> 请求使用 <code>url</code> 中的 <code>querystring</code>，无 <code>Content-Type</code>。</p></li><li><p><code>POST</code> 请求的 <code>Content-Type</code> 使用 <code>application/json</code>，不推荐使用 <code>application/x-www-form-urlencoded</code>。</p></li><li><p><code>FILE</code> 文件上传 <code>Content-Type</code> 使用 <code>multipart/form-data</code>。</p></li></ol><h2 id="_2-接口定义" tabindex="-1">2.接口定义 <a class="header-anchor" href="#_2-接口定义" aria-label="Permalink to &quot;2.接口定义&quot;">​</a></h2><ol><li>接口定义必须提供 <code>swagger</code> 等文档。</li><li>接口地址是以<strong>网关地址</strong>为参照。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good ✅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//sit1.xxx-gateway.sitcbi.com/xxx-customer/swagger#/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad ❌</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//dev1.xxx-boss.devcbi.com/swagger#/</span></span></code></pre></div><p>这样的话，就能直接使用 <code>/xxx-customer</code> 代理到 <code>http://sit1.xxx-gateway.sitcbi.com</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>跨域处理，联调阶段采用 <code>webpack-dev-server</code> 作本地代理，部署阶段均采用 <code>nginx</code> 反向代理。</p></div><ol><li><p>接口需要清楚定义<strong>入参</strong>和<strong>出参</strong>，且划分详细。<strong>没有多余字段</strong>。</p></li><li><p>接口文档针对入参和出参的每个字段，都要有对应的中文说明。<strong>且中文说明应与原型字段名称保持一致</strong>。</p></li><li><p>出参需要明确定义<strong>默认值</strong>。对象类型的返回空对象 <code>{}</code>, 数组类型的返回空数组 <code>[]</code>，字符串类型的返回空字符串 <code>&quot;&quot;</code>， <code>Number</code> 和<code>Boolean</code> 类型的返回 <code>null</code>。</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good ✅</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad ❌</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_3-业务对接" tabindex="-1">3.业务对接 <a class="header-anchor" href="#_3-业务对接" aria-label="Permalink to &quot;3.业务对接&quot;">​</a></h2><p><strong>前端专注客户交互，后端专注业务数据。</strong></p><ol><li><p>业务状态、国家列表、国码列表等<strong>枚举</strong>在大多数场景下都应该提供接口。<strong>前端不在项目写死固定值</strong>。</p></li><li><p>查询一类的接口，如果涉及到枚举，接口要返回对应字段，前端不做映射处理。譬如：</p></li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;cstNo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;statusName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开通中&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;statusNameEn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Opening&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>查询一类的接口，如果查<strong>全部</strong>数据，推荐传递空字符串，而非删除入参。譬如：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good ✅</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  startDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-05-01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  endDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-05-31&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pageNo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pageSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad ❌</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  startDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-05-01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  endDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-05-31&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pageNo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pageSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li>对于有中英文切换等需求，接口要支持中英文。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>目前项目会以请求头中的 <code>accept-language</code> 为准，返回对应语言的 <code>error</code> 报错信息或 <code>info</code> 提示信息。</p></li><li><p>枚举一类的接口，同时返回 <code>showName</code> 和 <code>showNameEn</code>。</p></li><li><p>查询一类的接口，也要返回对应的 <code>name</code> 和 <code>nameEn</code>。</p></li></ul></div><ol start="5"><li><p>对于大数字(如 <code>Java</code> 的 <code>long</code> 类型)，返回给前端时需要设置为字符串类型, 防止 <code>JavaScript</code> 发生溢出。</p></li><li><p>如果数字金额需要保留两位小数，那么此时<strong>推荐</strong>以字符串形式返回给前端。因为浏览器会吞掉部分小数位。</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good ✅</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;144.00&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;144.00&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad ❌</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">144.00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 144</span></span></code></pre></div><ol start="7"><li><p>接口要进行自测，联调时，要保证接口根据入参调用时，功能正常，且出参与文档定义一致。<strong>避免出现首次调用即系统繁忙的场面。</strong></p></li><li><p>接口丢失或缺少，说明对于业务需求的理解有歧义。因此，<strong>必要的话，在评审需求完毕之后，后端同学可以主动跟前端同学碰一下接口</strong>。</p></li><li><p>接口入参和出参的更改，要体现到文档上。口头传达，只是快捷渠道。<strong>前后端的对接始终以文档为准。</strong></p></li><li><p><strong>确认好联调时间后，提前部署下所有环境</strong>。</p></li></ol>`,25)]))}const c=i(l,[["render",p]]);export{E as __pageData,c as default};
