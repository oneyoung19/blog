import{_ as t,c as a,o as l,b0 as i,j as s}from"./chunks/framework.CEggy_nf.js";const g=JSON.parse('{"title":"1.全局属性","description":"","frontmatter":{"title":"1.全局属性"},"headers":[],"relativePath":"FE/html/1.attr-global.md","filePath":"FE/html/1.attr-global.md","lastUpdated":1744903323000}'),d={name:"FE/html/1.attr-global.md"};function o(p,e,h,n,c,r){return l(),a("div",null,e[0]||(e[0]=[i('<p>本章梳理一些<strong>常用的</strong> <code>HTML</code> 标签上可设置的属性。</p><p><strong>暂不包含部分废弃或者没有利用价值的属性</strong>。</p><p><strong>这里的全局属性指的是所有 <code>HTML</code> 标签都可以添加的属性。</strong></p><p>即使属性可能对某些标签不起作用。</p><h2 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h2><p>元素的唯一标识符。<strong>该标识符在整个文档中必须是唯一的。</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里的<strong>唯一</strong>指的是最优解。</p><p>你当然可以给许多元素设置相同的 <code>id</code> 值，<strong>浏览器并不会报错</strong>。</p><p>但当你想要利用 <code>document.getElementById()</code> 方法来获取某一个目标元素时，可能并不会得到你想要的结果。</p></div><h2 id="class" tabindex="-1">class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;class&quot;">​</a></h2><p>元素的 <code>class</code> 名。</p><h2 id="style" tabindex="-1">style <a class="header-anchor" href="#style" aria-label="Permalink to &quot;style&quot;">​</a></h2><p>设置元素的<strong>行内样式</strong>。</p><h2 id="title" tabindex="-1">title <a class="header-anchor" href="#title" aria-label="Permalink to &quot;title&quot;">​</a></h2><p>设置元素的提示信息。</p><p><strong>这些提示信息，通常会在鼠标处于元素上才会展示。</strong></p><p>譬如:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;将鼠标置于该文本之上，会展示&quot;Hello world&quot;的提示信息。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p title="Hello world">将鼠标置于该文本之上，会展示&quot;Hello world&quot;的提示信息。</p><h2 id="contenteditable" tabindex="-1">contenteditable <a class="header-anchor" href="#contenteditable" aria-label="Permalink to &quot;contenteditable&quot;">​</a></h2><p>表示元素是否可被用户编辑。 如果可以，浏览器会调整元素的部件（<code>widget</code>）以允许编辑。</p><p>譬如一个可编辑的 <code>div</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contenteditable</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width: 300px;height: 20px;border: 1px solid #ccc;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;可编辑的div&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div contenteditable style="width:300px;height:20px;border:1px solid #ccc;">可编辑的div</div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>有一说，<code>contenteditable</code> 是一个枚举属性，而非布尔属性。</p><p>必须显式的设置其值为 <code>true</code>、<code>false</code> 或空字符串中的一个。而不能简写为 <code>&lt;div contenteditable&gt;value&lt;/div&gt;</code>。</p><p>但笔者在上例中，发现 <code>chrome</code> 会自动将 <code>contenteditable</code> 修改为 <code>contenteditable=&quot;true&quot;</code>。</p></div><h2 id="data" tabindex="-1">data-* <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data-*&quot;">​</a></h2><p>元素的自定义数据属性。</p><p>它赋予我们在所有 <code>HTML</code> 元素上嵌入自定义数据属性的能力，并可以通过脚本 (一般指 <code>JavaScript</code>) 与 <code>HTML</code> 之间进行专有数据的交换。</p><h2 id="draggable" tabindex="-1">draggable <a class="header-anchor" href="#draggable" aria-label="Permalink to &quot;draggable&quot;">​</a></h2><p>元素是否可以被拖动。</p><p>譬如一个可以被拖动的 <code>div</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draggable</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width: 300px;height: 30px;border: 1px solid #000;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;可以被拖动&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div draggable style="width:300px;height:30px;border:1px solid #000;">可以被拖动</div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>img</code> 等部分元素本身就可以被拖动。</p><p>部分不可拖动元素添加上该属性之后，才会变成可拖动。</p></div><h2 id="hidden" tabindex="-1">hidden <a class="header-anchor" href="#hidden" aria-label="Permalink to &quot;hidden&quot;">​</a></h2><p>隐藏元素。相当于 <code>display: none;</code></p><p>譬如一个被隐藏的 <code>div</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hidden</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width: 300px;height: 30px;border: 1px solid #000;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;元素已隐藏&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div hidden style="width:300px;height:30px;border:1px solid #000;">元素已隐藏</div><h2 id="inputmode" tabindex="-1">inputmode <a class="header-anchor" href="#inputmode" aria-label="Permalink to &quot;inputmode&quot;">​</a></h2><p>键盘的输入模式。</p><p>常用于 <code>input</code> 元素。但当其他不可编辑元素，设置了 <code>contenteditable</code> 时，也可以利用该属性。</p><p>它默认值是 <code>text</code>，表明使用本地的标准文本输入键盘。</p><p>它具有以下可以设定的值：</p><ol><li><code>none</code>: 无虚拟键盘。<strong>在应用程序或者站点需要实现自己的键盘输入控件时很有用</strong>。</li><li><code>text</code>: 使用用户本地区域设置的标准文本输入键盘。</li><li><code>decimal</code>: 小数输入键盘，包含数字和分隔符（通常是 <code>.</code> 或者 <code>,</code>），设备可能也可能不显示减号键。</li><li><code>numeric</code>: 数字输入键盘，所需要的就是 <code>0</code> 到 <code>9</code> 的数字，设备可能也可能不显示减号键。</li><li><code>tel</code>: 电话输入键盘，包含 <code>0</code> 到 <code>9</code> 的数字、星号（<code>*</code>）和井号（<code>#</code>）键。</li><li><code>search</code>: 为搜索输入优化的虚拟键盘，比如，<strong>返回键可能被重新标记为搜索</strong>，也可能还有其他的优化。</li><li><code>email</code>: 为邮件地址输入优化的虚拟键盘，通常包含 <code>@</code> 符号和其他优化。</li><li><code>url</code>: 为网址输入优化的虚拟键盘，比如，<code>/</code> 键会更加明显、历史记录访问等。</li></ol><p>譬如一个支持<strong>小数输入键盘</strong>的 <code>input</code> 框：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inputmode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;decimal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div>',45),s("input",{inputmode:"decimal"},null,-1),i('<p>又或者是一个支持<strong>电话输入键盘</strong>的可编辑 <code>div</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inputmode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tel&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contenteditable</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width: 300px;height: 20px;border: 1px solid #ccc;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;可编辑的div&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>',2),s("div",{inputmode:"tel",contenteditable:"",style:{width:"300px",height:"20px",border:"1px solid #ccc"}},"可编辑的div",-1),i('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>推荐在<strong>移动端</strong>测试上述键盘效果。</p></div><h2 id="spellcheck" tabindex="-1">spellcheck <a class="header-anchor" href="#spellcheck" aria-label="Permalink to &quot;spellcheck&quot;">​</a></h2><p>是否检测元素存在拼写错误。</p><p>有拼写错误的情况下，<code>chrome</code> 会在文字下方出现<strong>红色虚线</strong>。</p><p>它通常用于 <code>input</code> 元素或者带有 <code>contenteditable</code> 的不可编辑元素。</p><p>譬如一个可编辑的 <code>div</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> spellcheck</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contenteditable</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width: 300px;height: 20px;border: 1px solid #ccc;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;helloo world&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div spellcheck contenteditable style="width:300px;height:20px;border:1px solid #ccc;">helloo world</div><h2 id="is" tabindex="-1">is <a class="header-anchor" href="#is" aria-label="Permalink to &quot;is&quot;">​</a></h2><p>允许指定标准 <code>HTML</code> 元素应该像已注册的自定义内置元素一样。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/is" target="_blank" rel="noreferrer">MDN链接</a></p><h2 id="html5微数据相关属性" tabindex="-1">HTML5微数据相关属性 <a class="header-anchor" href="#html5微数据相关属性" aria-label="Permalink to &quot;HTML5微数据相关属性&quot;">​</a></h2><blockquote><p>HTML5 微数据规范是一种标记内容以描述特定类型的信息，每种信息都有描述特定类型的项。</p></blockquote><p>我们常用的 <code>HTML</code> 标签（如 <code>p</code>、<code>h1</code>、<code>header</code>、<code>footer</code> 等），在某种程度上都是为了方便机器的识别，方便搜索引擎的 <code>SEO</code> 优化。</p><p>而 <code>HTML5</code> 微数据规范是为了允许开发者在网页元素中嵌入自定义属性，以便更加精细的优化那些已经在 <code>DOM</code> 中的数据的语义性。</p><p><code>HTML5</code> 微数据涉及到的属性有：</p><ol><li><code>itemscope</code></li><li><code>itemtype</code></li><li><code>itemprop</code></li><li><code>itemref</code></li><li><code>itemid</code></li></ol><p>该系列属性是<a href="https://html.spec.whatwg.org/multipage/microdata.html#microdata" target="_blank" rel="noreferrer">WHATWG HTML Microdata feature</a>的规范。</p><p>另外关于该系列属性的介绍，推荐<a href="https://www.jianshu.com/p/7148a5a9f1d3" target="_blank" rel="noreferrer">该文章</a>。</p><p>笔者暂时不作过多妄谈。</p>',20)]))}const E=t(d,[["render",o]]);export{g as __pageData,E as default};
