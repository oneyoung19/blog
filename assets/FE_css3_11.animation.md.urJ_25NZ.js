import{_ as n,o as t,c as o,aP as e,j as i,a}from"./chunks/framework.DeCM12M7.js";const m=JSON.parse('{"title":"11.Animation","description":"","frontmatter":{"title":"11.Animation"},"headers":[],"relativePath":"FE/css3/11.animation.md","filePath":"FE/css3/11.animation.md","lastUpdated":1736401870000}'),l={name:"FE/css3/11.animation.md"};function d(p,s,h,r,c,k){return t(),o("div",null,s[0]||(s[0]=[e(`<p><code>Animation</code> 意为<strong>动画</strong>。</p><p><code>CSS3</code> 中的动画相较于传统的 <code>JavaScript</code> 脚本实现动画技术，有三个主要优点:</p><ol><li>能够非常容易地创建简单动画，你甚至不需要了解 <code>JavaScript</code> 就能创建动画。</li><li>动画运行效果良好，甚至在低性能的系统上。渲染引擎会使用跳帧或者其他技术以保证动画表现尽可能的流畅。而使用 <code>JavaScript</code> 实现的动画通常表现不佳（除非经过很好的设计）。</li><li>让浏览器控制动画序列，允许浏览器优化性能和效果，如降低位于隐藏选项卡中的动画更新频率。</li></ol><p>动画包括两个部分：<strong>用于指定动画开始、结束以及中间点样式的关键帧</strong>和<strong>描述动画的样式规则</strong>。</p><h2 id="_11-1-keyframes" tabindex="-1">11-1.keyframes <a class="header-anchor" href="#_11-1-keyframes" aria-label="Permalink to &quot;11-1.keyframes&quot;">​</a></h2><p>在 <code>CSS3</code> 中，我们使用 <code>@keyframes</code> 来定义关键帧。</p><p>譬如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  0%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  50%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以上关键帧，定义了 <code>3</code> 个节点。</p><p>动画执行后，会在 <code>0%</code>、<code>50%</code>、<code>100%</code> 移动到对应位置。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 <code>0%</code> 和 <code>100%</code> 之间可以自定义足够多的节点。</p></div><p>开始节点和结束节点，还可以使用下述<strong>别名</strong>：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  50%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_11-2-animation" tabindex="-1">11-2.animation <a class="header-anchor" href="#_11-2-animation" aria-label="Permalink to &quot;11-2.animation&quot;">​</a></h2><p><code>CSS3</code> 中的 <code>animation</code> 实际上是一系列属性的简写形式。</p><p>按顺序列举如下：</p><ul><li><code>animation-name</code> 动画名</li><li><code>animation-duration</code> 动画执行时间</li><li><code>animation-timing-function</code> 动画执行函数</li><li><code>animation-delay</code> 动画延迟时间</li><li><code>animation-fill-mode</code> 动画执行结束后的应用模式</li><li><code>animation-iteration-count</code> 动画执行次数</li><li><code>animation-direction</code> 动画执行方向</li></ul><p>另外，<code>CSS3</code> 中还提供了 <code>animation-play-state</code> 属性来控制动画暂停或者是启动。</p><h3 id="_11-2-1-animation-name" tabindex="-1">11-2-1.animation-name <a class="header-anchor" href="#_11-2-1-animation-name" aria-label="Permalink to &quot;11-2-1.animation-name&quot;">​</a></h3><p><code>animation-name</code> 用来定义<strong>动画名</strong>。</p><p>它的值需要设定为对应关键帧 <code>@keyframes</code> 的属性名。</p><p>譬如，我们在上例中声明了 <code>@keyframes animate</code> 后：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  animation-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: animate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>但仅仅设置了 <code>animate-name</code>，是不会有效果的。</p>`,24),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"1.animation-name",src:"https://codepen.io/code1994/embed/YzemboK?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/YzemboK"}," 1.animation-name"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e(`<p>我们需要设定 <code>animation-duration</code>，也就是说，<code>animation</code> 的正常执行，至少有俩个属性 <code>animation-name</code> 和 <code>animation-duration</code>。</p><h3 id="_11-2-2-animation-duration" tabindex="-1">11-2-2.animation-duration <a class="header-anchor" href="#_11-2-2-animation-duration" aria-label="Permalink to &quot;11-2-2.animation-duration&quot;">​</a></h3><p><code>animation-duration</code> 用来设置<strong>动画执行时间</strong>。</p><p>譬如，下述语法表明动画执行是 <code>2s</code>:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  animation-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: animate;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  animation-duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,5),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/mdXNZbe?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/mdXNZbe"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e('<h3 id="_11-2-3-animation-timing-function" tabindex="-1">11-2-3.animation-timing-function <a class="header-anchor" href="#_11-2-3-animation-timing-function" aria-label="Permalink to &quot;11-2-3.animation-timing-function&quot;">​</a></h3><p><code>animation-timing-function</code> 用来设置<strong>动画函数</strong>。</p><p>根据实际的效果可分为两类：连续变化、断续变化。</p><p>其中<strong>连续变化</strong>有以下属性：</p><ol><li><code>linear</code> 匀速变化，<strong>默认值</strong></li><li><code>ease</code> 缓慢变化</li><li><code>ease-in</code> 缓慢进入</li><li><code>ease-in-out</code> 缓慢进入、缓慢离开</li><li><code>ease-out</code> 缓慢离开</li><li><code>cubic-bezier(x1, y1, x2, y2)</code> 贝塞尔曲线</li></ol><p><strong>断续变化</strong>有以下属性：</p><ol><li><code>steps(&lt;number&gt;, &lt;position&gt;)</code> 其中，<code>position</code> 可设定为 <code>start</code> 或 <code>end</code>。</li><li><code>step-start</code> 相当于 <code>steps(1, start)</code></li><li><code>step-end</code> 相当于 <code>steps(1, end)</code></li></ol>',7),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/gOvVNPM?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/gOvVNPM"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e(`<h3 id="_11-2-4-animation-delay" tabindex="-1">11-2-4.animation-delay <a class="header-anchor" href="#_11-2-4-animation-delay" aria-label="Permalink to &quot;11-2-4.animation-delay&quot;">​</a></h3><p><code>animation-delay</code> 用来设置<strong>动画延迟时间</strong>。</p><p>譬如设定延迟 <code>2s</code> 后执行：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  animation-delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/JjpgQXq?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/JjpgQXq"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e('<h3 id="_11-2-5-animation-fill-mode" tabindex="-1">11-2-5.animation-fill-mode <a class="header-anchor" href="#_11-2-5-animation-fill-mode" aria-label="Permalink to &quot;11-2-5.animation-fill-mode&quot;">​</a></h3><p><code>animation-fill-mode</code> 用来设置<strong>动画执行结束后的应用模式</strong>。</p><ul><li><code>none</code> 以元素本身样式为准</li><li><code>forwards</code> 以元素动画的最后一次关键帧为准</li><li><code>backwards</code> 以元素动画的第一次关键帧为准</li><li><code>both</code> 动画将遵循 <code>forwards</code> 和 <code>backwards</code> 的规则，从而在两个方向上扩展动画属性</li></ul><p>譬如下例，设置为 <code>forwards</code> 后，元素在执行完动画之后，会以最后一次关键帧的状态为主：</p>',4),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/ZErgdBM?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/ZErgdBM"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e('<h3 id="_11-2-6-animation-iteration-count" tabindex="-1">11-2-6.animation-iteration-count <a class="header-anchor" href="#_11-2-6-animation-iteration-count" aria-label="Permalink to &quot;11-2-6.animation-iteration-count&quot;">​</a></h3><p><code>animation-iteration-count</code> 用来设置<strong>动画执行次数</strong>。</p><p>可设定的值有：</p><ol><li><code>&lt;number&gt;</code> 设置为一个数字，代表执行固定次数</li><li><code>infinite</code> 执行无穷次</li></ol>',4),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/mdXNZwr?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/mdXNZwr"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e('<h3 id="_11-2-7-animation-direction" tabindex="-1">11-2-7.animation-direction <a class="header-anchor" href="#_11-2-7-animation-direction" aria-label="Permalink to &quot;11-2-7.animation-direction&quot;">​</a></h3><p><code>animation-direction</code> 用来设置<strong>动画执行方向</strong>。</p><p>可设定的值有：</p><ol><li><code>normal</code> 正向执行</li><li><code>alternate</code> 交替执行</li><li><code>alternate-reverse</code> 反向交替执行</li><li><code>reverse</code> 反向执行 <code>100% =&gt; 0%</code></li></ol>',4),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"7.animation-direction",src:"https://codepen.io/code1994/embed/XWZvLaG?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/XWZvLaG"}," 7.animation-direction"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e('<h3 id="ps-animation-play-state" tabindex="-1">ps.animation-play-state <a class="header-anchor" href="#ps-animation-play-state" aria-label="Permalink to &quot;ps.animation-play-state&quot;">​</a></h3><p><code>animation-play-state</code> 用于设置<strong>暂停动画或开始动画</strong>。</p><p>可设定的值有：</p><ol><li><code>paused</code> 暂停</li><li><code>running</code> 启动</li></ol><p>该属性并不属于 <code>animation</code> 的简写属性之一。</p><p>更多的情况下，我们会利用 <code>JavaScript</code> 脚本更改改属性来控制动画的执行：</p>',6),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/vYdoqjX?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/vYdoqjX"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),e('<h2 id="_11-3-帧动画" tabindex="-1">11-3.帧动画 <a class="header-anchor" href="#_11-3-帧动画" aria-label="Permalink to &quot;11-3.帧动画&quot;">​</a></h2><p>帧动画，指的是 <code>animation-timing-function</code> 设置为 <code>steps</code>。</p><p>类似于现代的动画片或者电影，都是一帧一帧的联动，形成视觉效果。</p><p>而且断续变化 <code>steps</code> 相比连续变化 <code>linear</code>，在某些场景下更合适。</p><h3 id="_11-3-1-loading" tabindex="-1">11-3-1.loading <a class="header-anchor" href="#_11-3-1-loading" aria-label="Permalink to &quot;11-3-1.loading&quot;">​</a></h3><p>譬如本例中的两种 <code>loading</code> 形式，明显<strong>第二种更符合</strong>网络加载中的效果：</p>',6),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/dymbGdV?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/dymbGdV"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1),i("h3",{id:"_11-3-2-twitter点赞效果",tabindex:"-1"},[a("11-3-2.Twitter点赞效果 "),i("a",{class:"header-anchor",href:"#_11-3-2-twitter点赞效果","aria-label":'Permalink to "11-3-2.Twitter点赞效果"'},"​")],-1),i("p",null,[i("code",null,"Twitter"),a(" 上的点赞效果，就可以利用雪碧图结合帧动画来实现：")],-1),i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/bGvbEKZ?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[a(" See the Pen "),i("a",{href:"https://codepen.io/code1994/pen/bGvbEKZ"}," Untitled"),a(" by Code1994 ("),i("a",{href:"https://codepen.io/code1994"},"@code1994"),a(") on "),i("a",{href:"https://codepen.io"},"CodePen"),a(". ")],-1)]))}const E=n(l,[["render",d]]);export{m as __pageData,E as default};
