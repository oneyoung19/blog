import{_ as i,c as a,o as n,b0 as l}from"./chunks/framework.D8aj9ziZ.js";const r=JSON.parse('{"title":"1.Event Loop","description":"","frontmatter":{"title":"1.Event Loop"},"headers":[],"relativePath":"BE/node/topics/1.event-loop.md","filePath":"BE/node/topics/1.event-loop.md","lastUpdated":1750146487000}'),t={name:"BE/node/topics/1.event-loop.md"};function e(p,s,h,k,d,E){return n(),a("div",null,s[0]||(s[0]=[l(`<p><code>Node.js</code> 中的**事件循环（Event Loop）**是其异步编程的核心机制。</p><p>它是 <code>Node.js</code> 在运行时用于处理非阻塞操作（比如 <code>I/O</code>、<code>定时器</code>、<code>Promise</code>、<code>事件监听</code>等）的机制，依赖于底层的 <code>libuv</code> 库来实现跨平台的事件驱动模型。</p><h2 id="_1-单线程机制" tabindex="-1">1.单线程机制 <a class="header-anchor" href="#_1-单线程机制" aria-label="Permalink to &quot;1.单线程机制&quot;">​</a></h2><p>我们先利用 <code>koa</code> 框架来介绍下 <code>Nodejs</code> 中存在的线程阻塞问题。</p><h3 id="_1-1-同步阻塞" tabindex="-1">1-1.同步阻塞 <a class="header-anchor" href="#_1-1-同步阻塞" aria-label="Permalink to &quot;1-1.同步阻塞&quot;">​</a></h3><p><code>readFileSync</code> 是同步阻塞的，它会阻塞主线程，导致无法处理其他请求。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li><p>当一个请求进来时，<code>Node.js</code> 会<strong>在主线程里一步一步执行 <code>readFileSync</code></strong>；</p></li><li><p>所有文件读完前，<strong>主线程无法处理任何新请求</strong>；</p></li><li><p>并发请求会排队，性能严重下降。</p></li></ol></div><h3 id="_1-2-异步非阻塞" tabindex="-1">1-2.异步非阻塞 <a class="header-anchor" href="#_1-2-异步非阻塞" aria-label="Permalink to &quot;1-2.异步非阻塞&quot;">​</a></h3><p><code>readFile</code> 是异步非阻塞的，它会立即返回，不会阻塞主线程，可以处理其他请求。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Koa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;koa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 Promise 版本的 fs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Koa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="第一步-客户端发起请求" tabindex="-1"><strong>第一步：客户端发起请求</strong> <a class="header-anchor" href="#第一步-客户端发起请求" aria-label="Permalink to &quot;**第一步：客户端发起请求**&quot;">​</a></h4><ol><li><p><code>Node.js</code> 主线程通过事件循环监听端口 <code>3000</code>；</p></li><li><p>有一个请求来了（例如 <code>curl http://localhost:3000/</code>）；</p></li><li><p>事件循环将这个请求的回调交给 <code>Koa</code> 处理（<code>app.use(...)</code> 函数被执行）。</p></li></ol><h4 id="第二步-await-fs-readfile-a-txt" tabindex="-1"><strong>第二步：await fs.readFile(&#39;a.txt&#39;)</strong> <a class="header-anchor" href="#第二步-await-fs-readfile-a-txt" aria-label="Permalink to &quot;**第二步：await fs.readFile(&#39;a.txt&#39;)**&quot;">​</a></h4><ol><li><p><code>fs.readFile</code> 是异步操作，它<strong>不会阻塞主线程</strong>；</p></li><li><p><code>Node.js</code> 会把读取 <code>a.txt</code> 的任务<strong>交给 <code>libuv</code> 的线程池</strong>去处理；</p></li><li><p>主线程此时<strong>挂起</strong>这个 <code>await</code>，然后<strong>继续事件循环，处理其他请求</strong>；</p></li></ol><blockquote><p>如果此时有第二个客户端请求来了，它不会被“<code>a.txt</code> 还没读完”卡住，而是会<strong>立刻被处理。</strong></p></blockquote><h4 id="第三步-a-txt-读取完成-事件循环继续" tabindex="-1"><strong>第三步：a.txt 读取完成，事件循环继续</strong> <a class="header-anchor" href="#第三步-a-txt-读取完成-事件循环继续" aria-label="Permalink to &quot;**第三步：a.txt 读取完成，事件循环继续**&quot;">​</a></h4><ol><li><p>当线程池读取完 <code>a.txt</code> 后，告诉事件循环：“回调可以执行了”；</p></li><li><p>事件循环安排这个异步回调进入“微任务队列”或下一轮的事件阶段中；</p></li><li><p>接着执行 <code>await fs.readFile(&#39;b.txt&#39;)</code>，这个过程再次是异步的，<strong>线程池继续工作</strong>；</p></li><li><p>重复上述过程直到 <code>a</code>、<code>b</code>、<code>c</code> 都读完。</p></li></ol><h4 id="第四步-所有文件读取完毕-发送响应" tabindex="-1"><strong>第四步：所有文件读取完毕，发送响应</strong> <a class="header-anchor" href="#第四步-所有文件读取完毕-发送响应" aria-label="Permalink to &quot;**第四步：所有文件读取完毕，发送响应**&quot;">​</a></h4><ol><li><p><code>Koa</code> 收到所有结果后，将结果写入 <code>ctx.body</code>；</p></li><li><p><code>Koa</code> 内部使用 <code>res.end()</code> 将响应发送回客户端；</p></li><li><p>这一整套流程完成，事件循环等待下一次事件。</p></li></ol><h2 id="_2-事件循环的阶段" tabindex="-1">2. 事件循环的阶段 <a class="header-anchor" href="#_2-事件循环的阶段" aria-label="Permalink to &quot;2. 事件循环的阶段&quot;">​</a></h2><p><code>Node.js</code> 的事件循环大致分为以下几个阶段（每个阶段是一个队列）：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌───────────────────────┐</span></span>
<span class="line"><span>│ timers                │ ← setTimeout/setInterval 回调</span></span>
<span class="line"><span>├───────────────────────┤</span></span>
<span class="line"><span>│ pending callbacks     │</span></span>
<span class="line"><span>├───────────────────────┤</span></span>
<span class="line"><span>│ idle, prepare         │</span></span>
<span class="line"><span>├───────────────────────┤</span></span>
<span class="line"><span>│ poll                  │ ← 执行 I/O 回调（如 fs.readFile 回调）</span></span>
<span class="line"><span>├───────────────────────┤</span></span>
<span class="line"><span>│ check                 │ ← setImmediate 回调</span></span>
<span class="line"><span>├───────────────────────┤</span></span>
<span class="line"><span>│ close callbacks       │</span></span>
<span class="line"><span>└───────────────────────┘</span></span></code></pre></div><h3 id="_2-1-timers" tabindex="-1">2-1.timers <a class="header-anchor" href="#_2-1-timers" aria-label="Permalink to &quot;2-1.timers&quot;">​</a></h3><p>执行 <code>setTimeout()</code> 和 <code>setInterval()</code> 的回调。</p><h3 id="_2-2-pending-callbacks" tabindex="-1">2-2.pending callbacks <a class="header-anchor" href="#_2-2-pending-callbacks" aria-label="Permalink to &quot;2-2.pending callbacks&quot;">​</a></h3><p>执行一些系统操作的回调（如 <code>TCP</code> 错误类型的回调）。</p><h3 id="_2-3-idle-prepare" tabindex="-1">2-3.idle, prepare <a class="header-anchor" href="#_2-3-idle-prepare" aria-label="Permalink to &quot;2-3.idle, prepare&quot;">​</a></h3><p>内部使用，<strong>用户代码不会直接接触</strong>。</p><h3 id="_2-4-poll" tabindex="-1">2-4.poll <a class="header-anchor" href="#_2-4-poll" aria-label="Permalink to &quot;2-4.poll&quot;">​</a></h3><p>等待 <code>I/O</code> 事件、处理 <code>I/O</code> 回调（例如：读取文件、网络请求等）。</p><h3 id="_2-5-check" tabindex="-1">2-5.check <a class="header-anchor" href="#_2-5-check" aria-label="Permalink to &quot;2-5.check&quot;">​</a></h3><p>执行 <code>setImmediate()</code> 的回调。</p><h3 id="_2-6-close-callbacks" tabindex="-1">2-6.close callbacks <a class="header-anchor" href="#_2-6-close-callbacks" aria-label="Permalink to &quot;2-6.close callbacks&quot;">​</a></h3><p>如 <code>socket.on(&#39;close&#39;, ...)</code>。</p><blockquote><p>每次事件循环周期（<code>tick</code>）都会从头到尾执行以上这些阶段。</p></blockquote><h2 id="_3-microtask-微任务-队列" tabindex="-1">3. microtask（微任务）队列 <a class="header-anchor" href="#_3-microtask-微任务-队列" aria-label="Permalink to &quot;3. microtask（微任务）队列&quot;">​</a></h2><p>在每个阶段之间，<code>Node.js</code> 会在主任务完成后立即清空所有的“微任务”（<code>microtasks</code>）队列：</p><p>包括：</p><ul><li><code>process.nextTick()</code>（这是 <code>Node.js</code> 特有的，比 <code>Promise</code> 微任务还要快）</li><li><code>Promise.then/catch/finally</code></li></ul><p>执行顺序是：</p><ul><li><p>当前阶段任务 →</p></li><li><p><code>process.nextTick()</code> 队列 →</p></li><li><p><code>Promise</code> 微任务队列 →</p></li><li><p>下一个阶段</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>那么，结合<strong>阶段</strong>和<strong>微任务</strong>，我们就可以得到一个完整的 <code>Node.js</code> 事件循环的执行顺序：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>process.nextTick() &gt; Promise 微任务 &gt; timers（setTimeout） &gt; setImmediate</span></span></code></pre></div><ol><li><p>尽量不要在 <code>nextTick</code> 或 <code>Promise.then</code> 中嵌套太深，会阻塞 <code>I/O</code> 阶段，导致“饿死 <code>I/O</code>”；</p></li><li><p><code>setImmediate</code> 更适合处理“下一轮事件循环”，而非立即执行；</p></li><li><p><code>setTimeout(fn, 0)</code> 实际延迟时间不一定为 <code>0</code>，取决于系统和 <code>Node</code> 的处理。</p></li></ol></div><h2 id="_4-测试代码" tabindex="-1">4. 测试代码 <a class="header-anchor" href="#_4-测试代码" aria-label="Permalink to &quot;4. 测试代码&quot;">​</a></h2><p><strong>以上的结论，跟 <code>node</code> 版本存在一定联系。</strong></p><p>我们此节的测试代码是基于 <code>node@22.14.0</code> 版本。</p><h3 id="_4-1" tabindex="-1">4-1. <a class="header-anchor" href="#_4-1" aria-label="Permalink to &quot;4-1.&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setTimeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setImmediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nextTick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>打印结果：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nextTick</span></span>
<span class="line"><span>Promise</span></span>
<span class="line"><span>setTimeout</span></span>
<span class="line"><span>setImmediate</span></span></code></pre></div><h3 id="_4-2" tabindex="-1">4-2. <a class="header-anchor" href="#_4-2" aria-label="Permalink to &quot;4-2.&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;immediate1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event-loop.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;IO&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;immediate2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>打印结果：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>timeout1</span></span>
<span class="line"><span>IO</span></span>
<span class="line"><span>immediate1</span></span>
<span class="line"><span>immediate2</span></span>
<span class="line"><span>timeout2</span></span></code></pre></div>`,54)]))}const c=i(t,[["render",e]]);export{r as __pageData,c as default};
