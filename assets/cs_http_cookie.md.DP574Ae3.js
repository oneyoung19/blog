import{_ as s,o as e,c as a,b0 as o}from"./chunks/framework.DDuwZS-e.js";const r=JSON.parse('{"title":"Cookie","description":"","frontmatter":{"title":"Cookie"},"headers":[],"relativePath":"cs/http/cookie.md","filePath":"cs/http/cookie.md","lastUpdated":1737636722000}'),t={name:"cs/http/cookie.md"};function n(d,i,h,p,l,k){return e(),a("div",null,i[0]||(i[0]=[o(`<p><code>http</code> 协议本身是<strong>无状态</strong>的。</p><p>也就是说客户端每次与服务端的通信都是独立的。对于服务端来说，没法辨别两次请求是否来自同一客户端。</p><p>在此背景下，<code>Cookie</code> 得以实现应用，主要是为了帮助服务端识别标记客户端。</p><p>在我以前学习 <code>PHP</code> 的时候，可以将信息存储到 <code>Session</code>，然后将对应的 <code>Cookie</code> 返回给客户端，客户端下次请求的时候，会携带 <code>Cookie</code>。</p><p>然后根据服务端根据此 <code>Cookie</code> 在 <code>Session</code> 中获取对应信息，并实现对应的响应。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>版本声明：</p><p>由于 <code>Cookie</code> 的策略可能在不断变化，所以提前声明本文所依赖的浏览器及其版本。</p><ul><li><code>Chrome107</code></li><li><code>Firefox106</code></li></ul></div><h2 id="_1-设置与访问" tabindex="-1">1. 设置与访问 <a class="header-anchor" href="#_1-设置与访问" aria-label="Permalink to &quot;1. 设置与访问&quot;">​</a></h2><p><code>Cookie</code> 的设置有两种方式：</p><ol><li>服务端可通过响应头 <code>Set-Cookie</code>，譬如：</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Set-Cookie:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __cdnuid_s=72541f23eea9f83c9150210d91402153</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Max-Age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">31536000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; SameSite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Secure</span></span></code></pre></div><ol start="2"><li>客户端可通过 <code>document.cookie</code> 来设置或访问本地的 <code>cookie</code>。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>上述二者设置 <code>Cookie</code> 的方式，均不能跨站设置</strong>。</p><p>即不能在 <code>a.com</code> 将 <code>Cookie</code> 设置到 <code>b.com</code>。</p><p>在 <code>chrome</code> 下，违规响应头会有如下警告：</p><p><code>This attempt to set a cookie via a Set-Cookie header was blocked because its Domain attribute was invalid with regards to the current host url</code></p></div><h3 id="_1-1-设置-cookie" tabindex="-1">1-1. 设置 <code>Cookie</code> <a class="header-anchor" href="#_1-1-设置-cookie" aria-label="Permalink to &quot;1-1. 设置 \`Cookie\`&quot;">​</a></h3><p><code>document.cookie</code> 与 <code>Set-Cookie</code> 的设置形式是一样的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;key=value; Domain=example.com; Path=/; Secure; SameSite=No&#39;</span></span></code></pre></div><p>对 <code>Cookie</code> 的写入操作只会更新其中提到的 <code>Cookie</code>，而不会涉及其他 <code>Cookie</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=Tom&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;animal=cat&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只更新name 不会影响animal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=Jerry&#39;</span></span></code></pre></div><p>从技术上讲，<code>Cookie</code> 的名称和值可以是任何字符。为了保持有效的格式，它们应该使用内建的 <code>encodeURIComponent</code> 函数对其进行转义：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURIComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}=\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURIComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Cookie</code> 的设置存在一些限制：</p><ol><li><code>encodeURIComponent</code> 编码后的 <code>name=value</code> 对，大小不能超过 <code>4KB</code>。因此，我们不能在一个 <code>cookie</code> 中保存大的东西。</li><li>每个域的 <code>Cookie</code> 总数不得超过 <code>20+</code> 左右，具体限制取决于浏览器。</li></ol></div><h3 id="_1-2-访问-cookie" tabindex="-1">1-2.访问 <code>Cookie</code> <a class="header-anchor" href="#_1-2-访问-cookie" aria-label="Permalink to &quot;1-2.访问 \`Cookie\`&quot;">​</a></h3><p>在客户端可以利用 <code>document.cookie</code> 来访问当前域下的<strong>可访问</strong> <code>Cookie</code>（不能访问到设置了 <code>HttpOnly</code> 的 <code>Cookie</code>）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.cookie)</span></span></code></pre></div><p>打印结果大致如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hm_lvt_85612832da94810be7e7f25c9d1ecd84</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1666087833</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Hm_lvt_b6885b39f1df5cfd714b89cd75461cf1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1666087833</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Hm_lpvt_85612832da94810be7e7f25c9d1ecd84</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1666101769</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Hm_lpvt_b6885b39f1df5cfd714b89cd75461cf1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1666101769</span></span></code></pre></div><p>可以发现，客户端获取的形式，是以冒号和空格 <code>; </code> 分割，<code>key=value</code> 组合而成的字符串:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">value</span></span></code></pre></div><h2 id="_2-可定义选项" tabindex="-1">2.可定义选项 <a class="header-anchor" href="#_2-可定义选项" aria-label="Permalink to &quot;2.可定义选项&quot;">​</a></h2><p><code>Cookie</code> 的相关属性，除了上一节中的 <code>name</code> 和 <code>value</code>，还可以设置以下选项。</p><h3 id="_2-1-domain" tabindex="-1">2-1. Domain <a class="header-anchor" href="#_2-1-domain" aria-label="Permalink to &quot;2-1. Domain&quot;">​</a></h3><p>默认值为当前 <code>Domain</code>。</p><p>标明 <code>Cookie</code> 起作用的域。</p><p>如果成功设置的话，会在浏览器器控制台中的 <code>Cookies</code> 下的对应域能检索到。</p><p><strong>一般情况下，<code>Cookie</code> 不能跨域设置。</strong></p><p>譬如无法在 <code>site.com</code> 上将 <code>Cookie</code> 的 <code>Domain</code> 设置为 <code>other.com</code>。</p><p>甚至不能在 <code>one.site.com</code> 上设置 <code>two.site.com</code> 的 <code>Cookie</code>。</p><p>但有一种特殊情况：</p><p>在设置 <code>Domain=site.com</code> 时，浏览器实际会将 <code>Domain</code> 设置为 <code>.site.com</code>。</p><p>那么所有的子级域名（譬如 <code>sub.site.com</code>），都是可以访问该 <code>Cookie</code> 的。</p><p>如果想要将 <code>Domain</code> 设置成全等的 <code>site.com</code> 而不是 <code>.site.com</code>，那么忽略设置 <code>Domain</code> 项即可。</p><p>浏览器会自动根据所在域以设置 <code>Domain</code>。譬如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name=Jerry; Path=/&#39;</span></span></code></pre></div><h3 id="_2-2-path" tabindex="-1">2-2. Path <a class="header-anchor" href="#_2-2-path" aria-label="Permalink to &quot;2-2. Path&quot;">​</a></h3><p>默认值为<strong>根路径</strong> <code>/</code>。</p><p>决定 <code>Cookie</code> 在控制台能不能被看到，有两个条件：</p><ul><li>其一是上面说的 <code>Domain</code>；</li><li>其二就是本节的 <code>Path</code>。</li></ul><p>譬如有两种 <code>Cookie</code> 设置，一是 <code>Path=/</code>，另一是 <code>Path=/query</code>。</p><p>那么在 <code>site.com</code> 下只能看到 <code>Path=/</code> 的 <code>Cookie</code>。</p><p>在 <code>site.com/query</code>下则能看到 <code>Path=/</code> 以及 <code>Path=/query</code> 的 <code>Cookie</code>。</p><p><code>Cookie</code>会在请求发生时，由浏览器自动添加到请求头里。</p><p>那么添加的准则是，<strong>能访问到这些 <code>Cookie</code> 的请求都会自动添加这些 <code>Cookie</code>，无论是 <code>GET</code> 或 <code>POST</code> 请求</strong>。譬如：</p><ul><li><code>https://site.com</code> 只能携带 <code>Path=/</code> 的 <code>Cookie</code>；</li><li><code>https://site.com/query</code> 能携带 <code>Path=/</code> 和 <code>Path=/query</code> 的 <code>Cookie</code>；</li><li><code>https://site.com/query/user</code> 能携带 <code>Path=/</code> 和 <code>Path=/query</code> 的 <code>Cookie</code>；</li><li><code>https://site.com/add</code> 能携带 <code>Path=/</code> 的 <code>Cookie</code>，但不能携带 <code>Path=/query</code> 的 <code>Cookie</code>。</li></ul><p>如果对于某请求，并不确认会携带哪些 <code>Cookie</code>，那么直接将 <code>URL</code> 粘贴到浏览器地址栏访问，并查看 <code>Application</code> （<code>Chrome</code> 浏览器）中的 <code>Cookies</code>即可。</p><p><strong>它实际上代表的既是本地存储的 <code>Cookie</code>，也代表请求发送时会携带的 <code>Cookie</code></strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>发起请求时，携带的 <code>Cookie</code> 是目标域能访问的 <code>Cookie</code>，而不是本地域能访问的 <code>Cookie</code>。</p><p>即使跨域，也是这样的准则。另外跨域设置 <code>withCredentials</code> 为 <code>true</code>，并不是很好使，有兼容性问题，具体原因需要根据场景进行分析。</p><p>譬如：目标域 <code>https://site.com</code>，本地域 <code>https://other.com</code></p><p>那么本地域在访问目标域时，如果能够携带<code>Cookie</code>，那么携带的是 <code>https://site.com</code> 能访问的 <code>Cookie</code>。</p></div><h3 id="_2-3-expires-max-age" tabindex="-1">2-3.Expires/Max-Age <a class="header-anchor" href="#_2-3-expires-max-age" aria-label="Permalink to &quot;2-3.Expires/Max-Age&quot;">​</a></h3><p>默认值为 <code>Session</code>。</p><p>如果一个 <code>Cookie</code> 没有设置 <code>Expires/Max-Age</code> 这两个参数中的任何一个，那么在关闭浏览器之后，它就会消失。此类 <code>Cookie</code> 被称为 <code>Session Cookie</code>。</p><p>为了让 <code>Cookie</code> 在浏览器关闭后仍然存在，我们可以设置 <code>Expires</code> 或 <code>Max-Age</code> 选项中的一个。</p><p><code>Expires</code> 设置的日期必须完全采用 GMT 时区的这种格式。我们可以使用 <code>date.toUTCString</code> 来获取它。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果我们将 <code>Expires</code> 设置为过去的时间，则 <code>Cookie</code> 会被删除。</p></div><p>例如，我们可以将 <code>Cookie</code> 设置为 <code>1</code> 天后过期:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1天之后过期</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 86400e3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUTCString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;user=John; expires=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date;</span></span></code></pre></div><p><code>Max-Age</code> 是 <code>Expires</code> 的替代选项，指明了 <code>Cookie</code> 的过期时间距离当前时间的秒数。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果将其设置为 <code>0</code> 或负数，则 <code>Cookie</code> 会被删除。</p></div><p>它的使用方式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cookie 会在一小时后失效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user=John; max-age=3600&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除 cookie（让它立即过期）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user=John; max-age=0&#39;</span></span></code></pre></div><h3 id="_2-4-size" tabindex="-1">2-4.Size <a class="header-anchor" href="#_2-4-size" aria-label="Permalink to &quot;2-4.Size&quot;">​</a></h3><p>该选项可以设置 <code>Cookie</code> 的大小。</p><p>每个 <code>Cookie</code> 最大不能超过 <code>4kb</code>。</p><p>可以参考<a href="https://stackoverflow.com/questions/52203972/maximum-cookie-size-of-current-browsers-year-2018" target="_blank" rel="noreferrer">stackoverflow</a>。</p><h3 id="_2-5-httponly" tabindex="-1">2-5.HttpOnly <a class="header-anchor" href="#_2-5-httponly" aria-label="Permalink to &quot;2-5.HttpOnly&quot;">​</a></h3><p>该选项表示 <code>Cookie</code> 只能在网络服务下访问，不能通过 <code>JavaScript</code> 脚本进行访问或者更改。</p><p>该选项可以用来禁止 <code>JavaScritp</code> 访问 <code>Cookie</code>，以防止被篡改。</p><p>也就是将不能使用 <code>document.cookie</code> 来设置或读取 <code>Cookie</code>。</p><p>能够提高客户端的 <code>Cookie</code> 安全度。</p><h3 id="_2-6-secure" tabindex="-1">2-6.Secure <a class="header-anchor" href="#_2-6-secure" aria-label="Permalink to &quot;2-6.Secure&quot;">​</a></h3><p>默认情况下，如果我们在 <code>http://site.com</code> 上设置了 <code>Cookie</code>，那么该 <code>Cookie</code> 也会出现在 <code>https://site.com</code> 上，反之亦然。</p><p>也就是说，<code>Cookie</code> 是基于域的，它们不区分协议。</p><p>如果想要限制 <code>Cookie</code> 只在 <code>https</code> 协议下进行发送，则需设置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user=John; Secure&#39;</span></span></code></pre></div><p>另外，要注意的是，当设置 <code>SameSite=None</code> 时，必须声明 <code>Secure</code> 项。</p><p>也就是<strong>目前的第三方 <code>Cookie</code> 依赖 <code>https</code> 协议</strong>。</p><h3 id="_2-7-samesite" tabindex="-1">2-7.SameSite <a class="header-anchor" href="#_2-7-samesite" aria-label="Permalink to &quot;2-7.SameSite&quot;">​</a></h3><p>顾名思义，<code>SameSite</code> 设置<strong>同站</strong>限制。</p><p>该选项 <code>SameSite</code> 可设置为：</p><ol><li><code>Strict</code></li><li><code>None</code></li><li><code>Lax</code></li></ol><p><code>SameSite</code> 在低版本浏览器中，默认为 <code>None</code>。</p><p>但目前为了限制广告推送和信息泄露，目前高版本浏览器已默认设置为 <code>Lax</code>。</p><p>在现今主流的浏览器下（如 <code>Firefox</code>），如果没有设置 <code>SameSite</code> 选项，可能会在控制台有如下提示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Some</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cookies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> misusing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> recommended</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “SameSite“</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attribute</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cookie</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “Hm_lvt_85612832da94810be7e7f25c9d1ecd84”</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> does</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “SameSite”</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attribute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Soon,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cookies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> without</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “SameSite”</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attribute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> invalid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> treated</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “Lax”.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> means</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> that</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cookie</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> longer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> third-party</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contexts.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">If</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> depends</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cookie</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> being</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> such</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contexts,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “SameSite=None“</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attribute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">To</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> know</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> about</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “SameSite“</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attribute,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie/SameSite</span></span></code></pre></div><h4 id="etld" tabindex="-1">eTLD <a class="header-anchor" href="#etld" aria-label="Permalink to &quot;eTLD&quot;">​</a></h4><p>开始说明 <code>SameSite</code> 的可设置属性之前，我们额外标注下<strong>同站规则</strong>。<strong>该规则主要依赖于 <code>eTLD+1</code></strong>。</p><p><code>eTLD</code> 是 <code>effective Top Level Domain</code> (有效顶级域名) 的简写。</p><ol><li><code>TLD</code> (<code>Top Level Domain</code>)：</li></ol><ul><li><code>.com</code>, <code>.org</code>, <code>.net</code>, .<code>edu</code> 等基础顶级域名</li><li><code>.cn</code>, <code>.uk</code>, <code>.jp</code> 等国家顶级域名</li></ul><ol start="2"><li><code>eTLD</code> (<code>effective Top Level Domain</code>)：</li></ol><ul><li>某些情况下，我们需要考虑比普通 <code>TLD</code> 更长的后缀作为&quot;有效&quot;的顶级域名</li><li>例如：<code>.co.uk</code>, <code>.com.cn</code>, <code>.github.io</code> 都是 <code>eTLD</code></li><li>这种概念的引入是为了更准确地判断域名的所有权边界</li></ul><ol start="3"><li><code>eTLD+1</code>：</li></ol><ul><li>指 <code>eTLD</code> 加上它前面的一个部分</li><li>例如： <ul><li><code>example.com</code> 中的整个域名（因为 <code>.com</code> 是 <code>eTLD</code>）</li><li><code>example.co.uk</code> 中的整个域名（因为 <code>.co.uk</code> 是 <code>eTLD</code>）</li><li><code>example.github.io</code> 中的整个域名（因为 <code>.github.io</code> 是 <code>eTLD</code>）</li></ul></li></ul><h4 id="_2-7-1-strict" tabindex="-1">2-7-1.Strict <a class="header-anchor" href="#_2-7-1-strict" aria-label="Permalink to &quot;2-7-1.Strict&quot;">​</a></h4><p>设置为 <code>Strict</code> 时，<strong>跨站场景下</strong>将不携带 <code>Cookie</code>。</p><p>缺点是过于暴力，某些场景下影响用户体验。譬如 <code>SSO</code> 单点登录的业务场景：</p><p>假设 <code>auth.com</code> 是用于登录的服务域名，<code>pay.com</code> 是付款业务，<code>receive.com</code> 是收款业务。</p><p>此时在 <code>auth.com</code> 生成的有用户信息的 <code>Cookie</code>，必须能在用户访问 <code>pay.com</code> 和 <code>receive.com</code> 时自动携带，而设置成 <code>Strict</code> 则不能满足业务需要。</p><p>除非设置成同站域名，譬如 <code>auth.site.com</code>、<code>pay.site.com</code> 以及 <code>receive.site.com</code>。</p><h4 id="_2-7-2-none" tabindex="-1">2-7-2.None <a class="header-anchor" href="#_2-7-2-none" aria-label="Permalink to &quot;2-7-2.None&quot;">​</a></h4><p><strong>低版本浏览器默认设置值</strong>。</p><p>设置为 <code>None</code> 时，无论是否跨站，都携带 <code>Cookie</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>设置该项时，必须同时设置 <code>Secure</code> 属性。即：</p><p><code>SameSite=None; Secure</code></p></div><h4 id="_2-7-2-lax" tabindex="-1">2-7-2.Lax <a class="header-anchor" href="#_2-7-2-lax" aria-label="Permalink to &quot;2-7-2.Lax&quot;">​</a></h4><p><strong>高版本浏览器默认设置值</strong>。</p><p>设置为 <code>Lax</code> 时，将是<strong>宽松模式</strong>。</p><p>它指的是大多数情况下采用 <code>Strict</code> 策略，特殊情况下采用 <code>None</code> 策略。</p><p>也就是说该模式默认禁止跨站携带 <code>Cookie</code>，但特殊情况下则允许跨站携带 <code>Cookie</code>。相当于为 <code>SSO</code> 等部分业务场景提供了一个后门。</p><p>上述的特殊情况，需满足两个条件：</p><ol><li><p><code>HTTP</code> 方法是安全的。在<a href="https://www.rfc-editor.org/rfc/rfc7231#section-4.2.1" target="_blank" rel="noreferrer">RFC7231规范</a>中，<code>GET</code>、<code>HEAD</code>、<code>OPTIONS</code>、<code>TRACE</code>，这几种方法都是读取数据，而不是更改数据。</p></li><li><p>该操作执行<strong>顶级导航</strong>（更改浏览器地址栏中的 <code>URL</code>），防止利用伪造 <code>form</code> 表单而发起请求的 <code>XSRF</code>。</p></li></ol><p>&quot;顶级导航&quot;（<code>Top-level Navigation</code>）指的是会改变浏览器地址栏 <code>URL</code> 的导航行为。譬如：</p><ul><li>直接点击链接：<code>&lt;a href=&quot;https://bank.com/account&quot;&gt;查看账户&lt;/a&gt;</code>。</li><li><code>window.location</code> 跳转：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.location.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://bank.com/account&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://bank.com/account&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://bank.com/account&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li>表单 <code>GET</code> 提交：<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://bank.com/search&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;q&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;搜索&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h3 id="_2-8-sameparty" tabindex="-1">2-8.SameParty ⏳ <a class="header-anchor" href="#_2-8-sameparty" aria-label="Permalink to &quot;2-8.SameParty :hourglass_flowing_sand:&quot;">​</a></h3><p>该选项，是 <code>Chrome</code> 浏览器下特有的选项。</p><p>首先要明确的一点是，<code>SameSite</code> 设置为 <code>None</code> 时，依然存在 <code>XSRF</code> 风险。</p><p><code>SameParty</code> 选项是 <code>Chrome</code> 浏览器的一种新解决方案。目标是取代 <code>SameSite</code>，同时也能更好的防范 <code>XSRF</code> 攻击。</p><p>并且相对设置 <code>SameSite=Strict</code> ，<code>SameParty</code> 的架构设计显得更加清晰、优雅。</p><p>同样，这里有单点登录的网站：</p><ul><li><code>auth.site.com</code></li><li><code>pay.site.com</code></li><li><code>receive.site.com</code></li></ul><p>用到 <code>First-Party Sets</code> 策略的域名需要把一个 <code>JSON</code> 配置托管在 <code>/.well-known/first-party-set</code> 路由下。</p><p>在 <code>SameParty</code> 的架构，需要这样设计：</p><p><code>auth.site.com</code> 需要在 <code>auth.site.com/.well-known/first-party-set</code> 路由下添加：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;owner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth.site.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;members&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pay.site.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;receive.site.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对应的，<code>pay.site.com</code> 和 <code>receive.site.com</code> 分别需要添加：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;owner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pay.site.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;owner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;receive.site.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>参考文章：</p><ul><li><a href="https://github.com/cfredric/sameparty" target="_blank" rel="noreferrer">sameparty</a></li><li><a href="https://juejin.cn/post/7002011181221167118" target="_blank" rel="noreferrer">详解 Cookie 新增的 SameParty 属性</a></li></ul><h3 id="_2-9-partition-key" tabindex="-1">2-9.Partition Key ⏳ <a class="header-anchor" href="#_2-9-partition-key" aria-label="Permalink to &quot;2-9.Partition Key :hourglass_flowing_sand:&quot;">​</a></h3><p>该选项，是 <code>Chrome</code> 浏览器下特有的选项。</p><p>主要是针对于聊天系统或者<code>iframe</code> 嵌入等场景。特点都是<strong>站点内有另一站点</strong>。譬如:</p><ol><li><code>green.com</code><ul><li><code>iframe</code> 引入 <code>red.com</code></li></ul></li><li><code>blue.com</code><ul><li><code>iframe</code> 引入 <code>red.com</code></li></ul></li></ol><p>如果在访问 <code>green.com</code> 时，<code>red.com</code> 设置了本域的 <code>cookie</code>，那么在访问 <code>blue.com</code> 时，其中的 <code>red.com</code> 也会携带其他域下设置的 <code>cookie</code>。</p><p>很明显，这不利于隐私保护。</p><p>为此，提出了 <code>Cookie Having Independent Partitioned State</code></p><p>即<a href="https://github.com/privacycg/CHIPS" target="_blank" rel="noreferrer">CHIPS</a></p><p>意思是，<code>Cookie</code> 有了分区的概念。</p><h3 id="_2-10-priority" tabindex="-1">2-10.Priority ⏳ <a class="header-anchor" href="#_2-10-priority" aria-label="Permalink to &quot;2-10.Priority :hourglass_flowing_sand:&quot;">​</a></h3><p>该选项，是 <code>Chrome</code> 浏览器下特有的选项。</p><p>每个域名下的 <code>Cookie</code> 最大数量是有限制的。</p><p><code>Priority</code> 选项是开发人员在达到浏览器客户端限制时更好地管理 <code>Cookie</code> 寿命的一种方法。</p><p>当浏览器的 <code>Cookie</code> 上限达到时，会根据<a href="https://stackoverflow.com/questions/19792038/what-does-priority-high-mean-in-the-set-cookie-header" target="_blank" rel="noreferrer">权重及其他配置</a>，清理部分 <code>Cookie</code>。</p><h2 id="_3-cookie-的分类" tabindex="-1">3. <code>Cookie</code> 的分类 <a class="header-anchor" href="#_3-cookie-的分类" aria-label="Permalink to &quot;3. \`Cookie\` 的分类&quot;">​</a></h2><p><code>Cookie</code> 可以分为第一方 <code>Cookie</code> 与第三方 <code>Cookie</code>。</p><h3 id="_3-1-cookies选项卡" tabindex="-1">3-1.Cookies选项卡 <a class="header-anchor" href="#_3-1-cookies选项卡" aria-label="Permalink to &quot;3-1.Cookies选项卡&quot;">​</a></h3><p>首先说明一下，如何从 <code>Cookies</code> 选项卡来区分 <code>Cookies</code>。</p><p>以<a href="https://www.google.com/" target="_blank" rel="noreferrer">google.com</a>为例，打开之后，会发现 <code>Cookies</code> 选项卡下存在 <code>3</code> 个顶级域：</p><ul><li><code>https://www.google.com</code></li><li><code>https://accounts.ggogle.com</code></li><li><code>https://ogs.google.com</code></li></ul><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20241119164157.png" alt="" loading="lazy"></p><p>其中 <code>https://www.google.com</code> 是我们访问的当前页面。而<strong>其它顶级域其实是通过 <code>iframe</code> 嵌入的</strong>：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20241119164316.png" alt="" loading="lazy"></p><p><strong>虽然每个域下产生的 <code>cookie</code> 会分别设置在各自的域下，但当我们讨论第一方和第三方 <code>cookie</code> 的概念时，都是针对的是当前访问页面。（即在本例中，都是针对 <code>https://www.google.com</code> 来说）</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 <code>Safari</code> 浏览器的较新版本中，<strong>默认开启“禁止跨站跟踪”选项</strong>。</p><p>这会导致，在 <code>Safari</code> 浏览器中，依赖第三方 <code>cookie</code> 的网站会出现功能问题。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20241119170208.png" alt="" loading="lazy"></p></div><h3 id="_3-2-第一方-cookie" tabindex="-1">3-2. 第一方 <code>Cookie</code> <a class="header-anchor" href="#_3-2-第一方-cookie" aria-label="Permalink to &quot;3-2. 第一方 \`Cookie\`&quot;">​</a></h3><p>第一方 <code>Cookie</code> 指代的是 <strong>当前访问路径与 <code>Domain</code> 选项属于同一域下</strong>。</p><p>譬如有一个网站 <code>auth.site.com</code>，设置了这两种 <code>Cookie</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=Jack; Domain=auth.site.com; Path=/; SameSite=Lax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age=19; Domain=site.com; Path=/; SameSite=Lax&#39;</span></span></code></pre></div><p>如果我们直接访问 <code>auth.site.com</code>，那么上述这两种 <code>Cookie</code> 都属于第一方 <code>Cookie</code>。</p><h3 id="_3-3-第三方-cookie" tabindex="-1">3-3. 第三方 <code>Cookie</code> <a class="header-anchor" href="#_3-3-第三方-cookie" aria-label="Permalink to &quot;3-3. 第三方 \`Cookie\`&quot;">​</a></h3><p>第三方 <code>Cookie</code> 指代的是 <strong>当前访问路径与 <code>Domain</code> 选项不属于同一域下</strong>。</p><p>同样譬如有一个网站 <code>auth.site.com</code>，设置了 <code>Cookie</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=Jack; Domain=auth.site.com; Path=/; SameSite=Lax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age=19; Domain=site.com; Path=/; SameSite=Lax&#39;</span></span></code></pre></div><p>那么当我们在 <code>example.com</code> 上访问 <code>auth.site.com</code> 的服务时，上述这种 <code>Cookie</code> 就属于第三方 <code>Cookie</code>。</p><h2 id="_4-cookie的埋点应用" tabindex="-1">4.Cookie的埋点应用 <a class="header-anchor" href="#_4-cookie的埋点应用" aria-label="Permalink to &quot;4.Cookie的埋点应用&quot;">​</a></h2><p><code>Cookie</code> 可以应用于埋点统计，这种形式主要利用的是第三方 <code>Cookie</code>。</p><p>本章，我们以百度统计为例，在引用了百度统计的页面，可以观察到有如下 <code>Cookie</code>：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/20221031214530.png" alt="" loading="lazy"></p><p>其中，可以看出 <code>Hm_lpvt_85612832da94810be7e7f25c9d1ecd84</code> 和 <code>Hm_lvt_85612832da94810be7e7f25c9d1ecd84</code> 是第一方 <code>cookie</code>。</p><p><code>HMACCOUNT_BFESS</code> 则是第三方 <code>cookie</code>。</p><p>在百度统计的源码中，前两者 <code>cookie</code> 是直接使用 <code>document.cookie</code> 来设置的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 百度统计sdk中的源码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mt.cookie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.domain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;; domain=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.domain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;; path=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;; expires=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toGMTString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.ec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;; secure&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里我们使用 <code>Object.defineProperty</code> 监听百度统计调用 <code>document.cookie</code> 的场景：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;set&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>但最终发现，控制台只打印了 <code>Hm_lpvt_85612832da94810be7e7f25c9d1ecd84</code> 和 <code>Hm_lvt_85612832da94810be7e7f25c9d1ecd84</code> 等第一方 <code>Cookie</code>。</p><p>在 <code>Chrome</code> 或者 <code>Firefox</code> 的控制台，响应头中也并没有 <code>Set-Cookie</code>。</p><p>经过笔者的测试，利用 <code>document.cookie</code> 设置跨站 <code>Cookie</code>，浏览器会自动忽略的。譬如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hm=test_cookie; Domain=test.jsgoshu.cn; Path=/; Expires=2023-11-30T13:44:51.869Z; Secure; SameSite=None&#39;</span></span></code></pre></div><p>最终利用 <code>charles</code> 抓包，才发现百度统计的响应头 <code>Set-Cookie</code> 确实设置了第三个 <code>Cookie</code>：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/20221101121424.png" alt="" loading="lazy"></p><h2 id="_5-xsrf攻击及防范" tabindex="-1">5.XSRF攻击及防范 <a class="header-anchor" href="#_5-xsrf攻击及防范" aria-label="Permalink to &quot;5.XSRF攻击及防范&quot;">​</a></h2><p><code>XSRF</code> 的全称是 <code>Cross Site Request Forgery</code>，也可简写成 <code>CSRF</code>，即<strong>跨站请求伪造</strong>。</p><p><strong>攻击原理是，伪造请求，自动携带 <code>Cookie</code> 到服务端，以攻击交易</strong>。</p><h3 id="_5-1-xsrf-如何攻击" tabindex="-1">5-1. <code>XSRF</code> 如何攻击 <a class="header-anchor" href="#_5-1-xsrf-如何攻击" aria-label="Permalink to &quot;5-1. \`XSRF\` 如何攻击&quot;">​</a></h3><p>譬如有一个购物网站 <code>shop.com</code>，会在用户访问时，设置客户端 <code>Cookie</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ga=lp_85612832da94810be7e7f25c9d1ecd84; Path=/; Expires=Tue, 01 Nov 2022 09:04:59 GMT&#39;</span></span></code></pre></div><p>设置之后，用户在访问 <code>shop.com</code> 的服务时，浏览器会自动携带此 <code>Cookie</code> 至服务端，以供服务端识别用户身份。</p><p>假如此时有不怀好意之人，创建了 <code>evil.com</code>，并在网站中内置 <code>form</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://shop.com/pay&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;领取优惠&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>然后他可以使用发送一个看起来人畜无害的邮件，引导用户点击。</p><p>当用户点击之后，客户端的身份信息 <code>Cookie</code> 即 <code>ga</code> 会发送到 <code>shop.com/pay</code>，进而完成支付。</p><h3 id="_5-2-xsrf-如何防范" tabindex="-1">5-2. <code>XSRF</code> 如何防范 <a class="header-anchor" href="#_5-2-xsrf-如何防范" aria-label="Permalink to &quot;5-2. \`XSRF\` 如何防范&quot;">​</a></h3><p>解决 <code>XSRF</code> 常见的方式有三种：</p><ul><li><code>SameSite</code> 属性</li><li><code>XSRF Token</code></li><li><code>JWT</code></li></ul><h4 id="_5-2-1-samesite-lax" tabindex="-1">5-2-1. <code>SameSite=Lax</code> <a class="header-anchor" href="#_5-2-1-samesite-lax" aria-label="Permalink to &quot;5-2-1. \`SameSite=Lax\`&quot;">​</a></h4><p>浏览器在旧版本中 <code>SameSite</code> 选项默认是 <code>None</code>，也就是跨站情况下，也会携带 <code>Cookie</code>。</p><p>后来为了限制第三方 <code>Cookie</code> 的泛滥，<code>SameSite</code> 的默认值修改为了 <code>Lax</code>。</p><p><code>SameSite=Lax</code> 的 <code>Cookie</code> 发送需要两个条件：</p><ol><li><code>HTTP</code> 方法必须是安全的，即 <code>GET</code>、<code>HEAD</code>、<code>OPTIONS</code>、<code>TRACE</code></li><li>该操作执行顶级导航（更改浏览器地址栏中的 <code>URL</code>），防止利用伪造 <code>form</code> 表单而发起请求的<code>XSRF</code>。</li></ol><p>但要注意的是，<strong>旧版本浏览器不支持设置 <code>Lax</code></strong>，所以为了兼容，需要额外考虑一下 <code>XSRF Token</code> 和 <code>JWT</code> 手段。</p><h4 id="_5-2-2-xsrf-token" tabindex="-1">5-2-2. <code>XSRF Token</code> <a class="header-anchor" href="#_5-2-2-xsrf-token" aria-label="Permalink to &quot;5-2-2. \`XSRF Token\`&quot;">​</a></h4><p><code>XSRF Token</code> 指的是，服务端利用一些加密方式生成 <code>Token</code>，然后客户端发起交易时，除了验证一般的 <code>Cookie</code>，还要验证该 <code>Token</code>。</p><p>该部分对于 <code>Token</code> 传输方式的不同，有两种常见方式：</p><p>第一种是前后端不分离的项目，服务端利用一些加密方式生成 <code>Token</code>，另外该 <code>Token</code> 不要暴露出来，在 <code>form</code> 中可以利用 <code>hidden</code> 传输到服务端。</p><p>另一种是前后端分离的项目，服务端利用一些加密方式生成 <code>Token</code>，然后通过 <code>Set-Cookie</code> 返回给客户端，然后客户端在发起交易时，读取对应 <code>Cookie</code>，并设置到请求头 <code>headers</code> 中。</p><p><code>axios</code> 的防 <code>XSRF</code> 攻击采用的就是该方式，也有文章称该方式为<strong>双重 <code>Cookie</code> 防御</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add xsrf header</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is only done if running in a standard browser environment.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Specifically not if we&#39;re in a web worker, or react-native.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (platform.isStandardBrowserEnv) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Add xsrf header</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xsrfValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (config.withCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isURLSameOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullPath))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.xsrfCookieName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cookies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.xsrfCookieName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ xsrfValue }, cookies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.xsrfCookieName));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xsrfValue) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    requestHeaders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.xsrfHeaderName, xsrfValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更多内容可参考文章：</p><ul><li><a href="https://brightsec.com/blog/csrf-token/" target="_blank" rel="noreferrer">XSRF Token</a></li><li><a href="https://www.51cto.com/article/629737.html" target="_blank" rel="noreferrer">Axios中的XSRF防范</a></li></ul><h4 id="_5-2-3-jwt" tabindex="-1">5-2-3. <code>JWT</code> <a class="header-anchor" href="#_5-2-3-jwt" aria-label="Permalink to &quot;5-2-3. \`JWT\`&quot;">​</a></h4><p>即 <a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noreferrer">Json Web Token</a></p><p>如今前后端分离项目下，最常见的架构方式。</p><p>用户在登录之后，接口返回 <code>Token</code>，前端在交互过程中，将 <code>Token</code> 设置在请求头 <code>Headers</code> 中，并携带给服务端。</p><p><code>Token</code> 具有时效性，校验过期的话，会通知前端，进而做出相应处理。</p><h2 id="_6-gdpr" tabindex="-1">6.GDPR <a class="header-anchor" href="#_6-gdpr" aria-label="Permalink to &quot;6.GDPR&quot;">​</a></h2><p><code>GDPR</code> 即 <code>General Data Protect Regulation</code>。</p><p>可以称作<a href="https://zh.wikipedia.org/zh-cn/%E6%AD%90%E7%9B%9F%E4%B8%80%E8%88%AC%E8%B3%87%E6%96%99%E4%BF%9D%E8%AD%B7%E8%A6%8F%E7%AF%84" target="_blank" rel="noreferrer">通用数据保护条例</a></p><p>如果网站涉及到 <code>Cookie</code>，且在国外有业务活动，那就不得不关注一下欧盟制定的 <code>GDPR</code>。</p><p>它在很大程度是为了<a href="https://cloud.tencent.com/developer/news/578423" target="_blank" rel="noreferrer">保护用户隐私</a>，防止 <code>Cookie</code> 被滥用。</p><p>对于开发人员来讲，可以在网站上，添加该站使用 <code>Cookie</code>的用户提醒：</p><ul><li>您的隐私</li></ul><p>当您访问任何网站时，网站都会存储或检索您浏览器上的信息，该过程多以 <code>Cookie</code> 形式进行。此类信息可能涉及您的个人信息、偏好或设备，并且主要用于使网站按照您的预期提供服务。此类信息通常不会直接识别您的个人信息，但可以为您提供更加个性化的网络体验。我们充分尊重您的隐私权，因此您可以选择不允许使用某些类型的 <code>Cookie</code>。您只需点击不同的 <code>Cookie</code> 类别名称，即可了解更多信息和更改默认设置。但是，阻止某些类型的 <code>Cookie</code> 可能会影响您的网站使用体验，以及我们能够为您提供的服务。</p><ol><li>必要类 <code>Cookie</code></li></ol><p>此类 <code>Cookie</code> 是网站正常运行所必需的，无法在我们的系统中关闭。通常，它们只针对您所做的操作进行设置，这些操作相当于服务请求，例如设置您的隐私首选项、登录或填充表单。您可以设置浏览器阻止或向您提醒此类 <code>Cookie</code>，但是网站的某些功能将无法使用。此类 <code>Cookie</code> 不会存储任何个人身份信息。</p><ol start="2"><li>性能类 <code>Cookie</code></li></ol><p>通过此类 <code>Cookie</code>，我们可以统计网站访问量和流量来源，以便评估和改进我们网站的性能。此类 <code>Cookie</code> 还可以帮助我们了解页面的受欢迎程度，以及访问者在网站上的活动情况。此类 <code>Cookie</code> 收集的所有信息都将进行聚合处理，确保信息的匿名性。如果您不允许使用此类 <code>Cookie</code>，我们将无从了解您何时访问了我们的网站，而且也无法监控网站性能。</p><ol start="3"><li>针对性 <code>Cookie</code></li></ol><p>此类 <code>Cookie</code> 可能是由我们的广告合作伙伴通过我们的网站设置的，还可能会被这些公司用来针对您关注的内容建立档案，并在其他网站上向您展示相关广告。此类 <code>Cookie</code> 不直接存储个人信息，但会使用一些用于唯一识别您的浏览器和互联网设备的信息。如果您不允许使用此类 <code>Cookie</code>，您看到的广告会比较缺乏针对性。</p>`,234)]))}const g=s(t,[["render",n]]);export{r as __pageData,g as default};
