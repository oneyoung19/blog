import{_ as a,c as e,o as r,b0 as l}from"./chunks/framework.CEggy_nf.js";const _=JSON.parse('{"title":"数据结构","description":"","frontmatter":{"title":"数据结构"},"headers":[],"relativePath":"cs/advance/data-structures/index.md","filePath":"cs/advance/data-structures/index.md","lastUpdated":1744904981000}'),o={name:"cs/advance/data-structures/index.md"};function i(d,t,s,n,p,c){return r(),e("div",null,t[0]||(t[0]=[l('<p>推荐一个学习仓库<a href="https://github.com/krahets/hello-algo" target="_blank" rel="noreferrer">hello-algo</a>。</p><h2 id="_1-定义" tabindex="-1">1.定义 <a class="header-anchor" href="#_1-定义" aria-label="Permalink to &quot;1.定义&quot;">​</a></h2><p><strong>数据结构</strong>（<code>data structure</code>）是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法，它具有以下设计目标：</p><ol><li>空间占用尽量少，以节省计算机内存。</li><li>数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。</li><li>提供简洁的数据表示和逻辑信息，以便算法高效运行。</li></ol><p>数据结构设计是一个充满权衡的过程。如果想在某方面取得提升，往往需要在另一方面作出妥协：</p><ol><li>链表相较于数组，在数据添加和删除操作上更加便捷，但牺牲了数据访问速度。</li><li>图相较于链表，提供了更丰富的逻辑信息，但需要占用更大的内存空间。</li></ol><h2 id="_2-种类" tabindex="-1">2.种类 <a class="header-anchor" href="#_2-种类" aria-label="Permalink to &quot;2.种类&quot;">​</a></h2><ol><li><p><a href="./1.array">数组</a></p></li><li><p><a href="./2.linked-list">链表</a></p></li><li><p><a href="./3.stack">栈</a></p></li><li><p><a href="./4.queue">队列</a></p></li><li><p><a href="./5.hash-table">哈希表</a></p></li><li><p><a href="./6.tree">树</a></p></li><li><p><a href="./7.heap">堆</a></p></li><li><p><a href="./8.graph">图</a></p></li></ol><h2 id="_3-与算法的关系" tabindex="-1">3.与算法的关系 <a class="header-anchor" href="#_3-与算法的关系" aria-label="Permalink to &quot;3.与算法的关系&quot;">​</a></h2><p>数据结构与算法高度相关、紧密结合，具体表现在以下三个方面：</p><ol><li><strong>数据结构是算法的基石</strong>。数据结构为算法提供了结构化存储的数据，以及操作数据的方法。</li><li><strong>算法是数据结构发挥作用的舞台</strong>。数据结构本身仅存储数据信息，结合算法才能解决特定问题。</li><li><strong>算法通常可以基于不同的数据结构实现</strong>，但执行效率可能相差很大，选择合适的数据结构是关键。</li></ol><p>如果将<strong>数据结构</strong>与<strong>算法</strong>类比为<strong>拼装积木</strong>：</p><table tabindex="0"><thead><tr><th><strong>数据结构与算法</strong></th><th><strong>拼装积木</strong></th></tr></thead><tbody><tr><td>输入数据</td><td>未拼装的积木</td></tr><tr><td>数据结构</td><td>积木组织形式，包括形状、大小、连接方式等</td></tr><tr><td>算法</td><td>把积木拼成目标形态的一系列操作步骤</td></tr><tr><td>输出数据</td><td>积木模型</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在实际讨论时，我们通常会将 <code>数据结构与算法</code> 简称为 <code>算法</code>。</p><p>比如众所周知的 <code>LeetCode</code> 算法题目，实际上同时考查数据结构和算法两方面的知识。</p></div>',14)]))}const g=a(o,[["render",i]]);export{_ as __pageData,g as default};
