import{_ as i,c as a,o as e,b0 as t}from"./chunks/framework.CEggy_nf.js";const c=JSON.parse('{"title":"EventSource","description":"","frontmatter":{"title":"EventSource"},"headers":[],"relativePath":"cs/im/sse/1.client.md","filePath":"cs/im/sse/1.client.md","lastUpdated":1744344421000}'),n={name:"cs/im/sse/1.client.md"};function l(h,s,p,d,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<p><code>EventSource</code> 是客户端针对 <code>SSE</code> 提供的接口。</p><p>基础使用方式为（下文中 <code>EventSource</code> 实例均以 <code>source</code> 替代）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, [options])</span></span></code></pre></div><p>其中：</p><ul><li><code>url</code> 表示后端服务路径；</li><li><code>options</code> 可设置参数如下： <ol><li><code>withCredentials</code> 表示 <code>CORS</code> 是否携带 <code>Cookie</code>。</li></ol></li></ul><h2 id="_1-实例属性" tabindex="-1">1.实例属性 <a class="header-anchor" href="#_1-实例属性" aria-label="Permalink to &quot;1.实例属性&quot;">​</a></h2><h3 id="_1-1-readystate" tabindex="-1">1-1.readyState <a class="header-anchor" href="#_1-1-readystate" aria-label="Permalink to &quot;1-1.readyState&quot;">​</a></h3><p><code>readyState</code> 表示连接状态。</p><p>具有以下几种值：</p><ul><li><code>0</code> 连接中</li><li><code>1</code> 连接成功</li><li><code>2</code> 连接失败</li></ul><h3 id="_1-2-url" tabindex="-1">1-2.url <a class="header-anchor" href="#_1-2-url" aria-label="Permalink to &quot;1-2.url&quot;">​</a></h3><p><code>url</code> 表示后端服务路径。</p><h3 id="_1-3-withcredentials" tabindex="-1">1-3.withCredentials <a class="header-anchor" href="#_1-3-withcredentials" aria-label="Permalink to &quot;1-3.withCredentials&quot;">​</a></h3><p><code>withCredentials</code> 表示 <code>CORS</code> 是否携带 <code>Cookie</code>。</p><h2 id="_2-实例方法" tabindex="-1">2.实例方法 <a class="header-anchor" href="#_2-实例方法" aria-label="Permalink to &quot;2.实例方法&quot;">​</a></h2><h3 id="_2-1-close" tabindex="-1">2-1.close() <a class="header-anchor" href="#_2-1-close" aria-label="Permalink to &quot;2-1.close()&quot;">​</a></h3><p><code>close()</code> 方法用以关闭 <code>SSE</code> 连接。</p><p>当该方法被调用时，<code>SSE</code> 的 <code>readyState</code> 值会变化为 <code>2</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="_3-事件监听" tabindex="-1">3.事件监听 <a class="header-anchor" href="#_3-事件监听" aria-label="Permalink to &quot;3.事件监听&quot;">​</a></h2><h3 id="_3-1-open" tabindex="-1">3-1.open <a class="header-anchor" href="#_3-1-open" aria-label="Permalink to &quot;3-1.open&quot;">​</a></h3><p><code>open</code> 事件用以监听 <code>SSE</code> 连接的建立。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Event source open...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_3-2-message" tabindex="-1">3-2.message <a class="header-anchor" href="#_3-2-message" aria-label="Permalink to &quot;3-2.message&quot;">​</a></h3><p><code>message</code> 事件用以监听 <code>SSE</code> 连接的信息传输。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Event source message...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_3-3-error" tabindex="-1">3-3.error <a class="header-anchor" href="#_3-3-error" aria-label="Permalink to &quot;3-3.error&quot;">​</a></h3><p><code>error</code> 事件用以监听 <code>SSE</code> 连接的出错。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Event source error...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>express</code> 中的 <code>res.send()</code> 方法会中断 <code>SSE</code> 连接，从而触发 <code>error</code> 事件监听。</p></div><h3 id="_3-4-自定义事件" tabindex="-1">3-4.自定义事件 <a class="header-anchor" href="#_3-4-自定义事件" aria-label="Permalink to &quot;3-4.自定义事件&quot;">​</a></h3><p>除了以上 <code>3</code> 种的内置事件，我们也可以自定义实例监听事件。</p><p><strong>只要保证 <code>Server</code> 端定义对应 <code>event</code> 字段触发即可</strong>。</p><p>譬如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Event source foo...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>只能使用 <code>addEventListener</code> 进行监听。</p><p><code>source.onfoo = () =&gt; {}</code> 形式的监听不会工作。</p></div><p><code>server</code> 端使用 <code>express</code> 如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Message from foo.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`event: &#39;foo&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">data:\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,38)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
