import{_ as i,c as a,o as e,b0 as l}from"./chunks/framework.CEggy_nf.js";const E=JSON.parse('{"title":"3.alias","description":"","frontmatter":{"title":"3.alias"},"headers":[],"relativePath":"frame/axios/base/3.alias.md","filePath":"frame/axios/base/3.alias.md","lastUpdated":1744344421000}'),n={name:"frame/axios/base/3.alias.md"};function o(t,s,d,p,c,h){return e(),a("div",null,s[0]||(s[0]=[l(`<p>在上一节，阐明了 <code>config</code> 这个完整对象内的可设置属性。</p><p>一般来说，可以通过 <code>config</code> 中的 <code>method</code> 属性来声明请求方式。</p><p>但为了方便，<code>Axios</code> 提供了一些额外方式来直接声明 <code>method</code>。</p><h2 id="_3-1-axios支持请求方式" tabindex="-1">3-1.axios支持请求方式 <a class="header-anchor" href="#_3-1-axios支持请求方式" aria-label="Permalink to &quot;3-1.axios支持请求方式&quot;">​</a></h2><ol><li><code>axios.get(url[, config])</code></li><li><code>axios.post(url[, data[, config]])</code></li><li><code>axios.put(url[, data[, config]])</code></li><li><code>axios.patch(url[, data[, config]])</code></li><li><code>axios.delete(url[, config])</code></li><li><code>axios.options(url[, config])</code></li><li><code>axios.head(url[, config])</code></li></ol><p>在日常的开发中，我们使用较多的，只有 <code>axios.get</code> 和 <code>axios.post</code> 这俩种形式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// get方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/get?id=1000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;custom-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abcd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// post方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;9527&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/x-www-form-urlencoded&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_3-2-http请求方式" tabindex="-1">3-2.http请求方式 <a class="header-anchor" href="#_3-2-http请求方式" aria-label="Permalink to &quot;3-2.http请求方式&quot;">​</a></h2><ol><li><code>GET</code> 方法请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据。</li><li><code>POST</code> 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</li><li><code>PUT</code> 方法用请求有效载荷替换目标资源的所有当前表示。</li><li><code>PATCH</code> 方法用于对资源应用部分修改。</li><li><code>DELETE</code> 方法删除指定的资源。</li><li><code>OPTIONS</code> 方法用于描述目标资源的通信选项。</li><li><code>HEAD</code> 方法请求一个与 <code>GET</code> 请求的响应相同的响应，但没有响应体。</li><li><code>CONNECT</code> 方法建立一个到由目标资源标识的服务器的隧道。</li><li><code>TRACE</code> 方法沿着到目标资源的路径执行一个消息环回测试。</li></ol><p><code>RESTFUL</code> 架构，<code>Representational State Transfer</code> 即 “表现层状态转化”。</p><p>推荐使用 <code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> 来实现 <code>CRUD</code> 操作。</p><p>其中 <code>POST</code> 与 <code>PUT</code> 的区别在于，<code>PUT</code> 方法是一个幂等方法，即执行无数次 <code>PUT</code> 方法，<code>PUT</code> 方法不会有副作用，其返回值不变。</p><p>而每一次的 <code>POST</code> 都可能会影响服务器资源的状态。</p>`,13)]))}const r=i(n,[["render",o]]);export{E as __pageData,r as default};
