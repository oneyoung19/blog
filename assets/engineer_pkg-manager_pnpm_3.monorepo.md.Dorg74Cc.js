import{_ as a,c as n,a1 as i,o as p}from"./chunks/framework.B0cMFUTE.js";const r=JSON.parse('{"title":"Monorepo","description":"","frontmatter":{"title":"Monorepo"},"headers":[],"relativePath":"engineer/pkg-manager/pnpm/3.monorepo.md","filePath":"engineer/pkg-manager/pnpm/3.monorepo.md"}'),e={name:"engineer/pkg-manager/pnpm/3.monorepo.md"};function t(l,s,h,k,o,c){return p(),n("div",null,s[0]||(s[0]=[i(`<p>在 <code>pnpm</code> 中，<code>Monorepo</code> 项目具有先天的优越性。</p><p>因为 <code>pnpm</code> 对于 <code>Monorepo</code> 提供了原生支持，最大程度的便利开发。</p><h2 id="_1-创建根项目" tabindex="-1">1.创建根项目 <a class="header-anchor" href="#_1-创建根项目" aria-label="Permalink to &quot;1.创建根项目&quot;">​</a></h2><p>利用 <code>pnpm init</code> 创建根项目，然后新建 <code>pnpm-workspace.yaml</code> 文件，并添加：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;examples/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!**/test/**&#39;</span></span></code></pre></div><h2 id="_2-添加子项目" tabindex="-1">2.添加子项目 <a class="header-anchor" href="#_2-添加子项目" aria-label="Permalink to &quot;2.添加子项目&quot;">​</a></h2><p>利用 <code>pnpm</code> 添加 <code>monorepo package</code>，大致有以下几种方式：</p><h3 id="_2-1-使用-pnpm-命令-推荐" tabindex="-1">2-1.使用 pnpm 命令（推荐） <a class="header-anchor" href="#_2-1-使用-pnpm-命令-推荐" aria-label="Permalink to &quot;2-1.使用 pnpm 命令（推荐）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建新包目录并初始化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/my-new-package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者使用简写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/my-new-package</span></span></code></pre></div><h3 id="_2-2-手动创建" tabindex="-1">2-2.手动创建 <a class="header-anchor" href="#_2-2-手动创建" aria-label="Permalink to &quot;2-2.手动创建&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 创建包目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/my-new-package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 进入目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/my-new-package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 初始化 package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>在新包的 <code>package.json</code> 中设置必要的字段：</p><div class="language-json:packages/my-new-package/package.json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json:packages/my-new-package/package.json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;@my-scope/my-new-package&quot;,  // 包名，通常使用 scope</span></span>
<span class="line"><span>  &quot;version&quot;: &quot;1.0.0&quot;,</span></span>
<span class="line"><span>  &quot;main&quot;: &quot;dist/index.js&quot;,            // 入口文件</span></span>
<span class="line"><span>  &quot;types&quot;: &quot;dist/index.d.ts&quot;,         // TypeScript 类型文件</span></span>
<span class="line"><span>  &quot;files&quot;: [                          // npm 发布时包含的文件</span></span>
<span class="line"><span>    &quot;dist&quot;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;build&quot;: &quot;tsc&quot;,</span></span>
<span class="line"><span>    &quot;test&quot;: &quot;vitest&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_3-添加依赖" tabindex="-1">3.添加依赖 <a class="header-anchor" href="#_3-添加依赖" aria-label="Permalink to &quot;3.添加依赖&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在 package-b 中添加对 package-a 的依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @my-scope/package-a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @my-scope/package-b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加开发依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @my-scope/package-b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 给所有包添加依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # -w 表示添加到工作区根目录</span></span></code></pre></div><p>或者，包之间的版本引用可以使用 <code>workspace</code> 协议：</p><div class="language-json:packages/package-b/package.json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json:packages/package-b/package.json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;dependencies&quot;: {</span></span>
<span class="line"><span>    &quot;@my-scope/package-a&quot;: &quot;workspace:*&quot;  // 自动使用本地版本</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这样，当这个包发布时，<code>package.json</code> 会自动更新依赖版本并发布。</p>`,18)]))}const g=a(e,[["render",t]]);export{r as __pageData,g as default};
