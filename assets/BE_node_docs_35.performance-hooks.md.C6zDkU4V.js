import{_ as i,c as a,o as e,b0 as n}from"./chunks/framework.CEggy_nf.js";const c=JSON.parse('{"title":"35.Performance Hooks","description":"","frontmatter":{"title":"35.Performance Hooks"},"headers":[],"relativePath":"BE/node/docs/35.performance-hooks.md","filePath":"BE/node/docs/35.performance-hooks.md","lastUpdated":1746179139000}'),l={name:"BE/node/docs/35.performance-hooks.md"};function t(k,s,p,h,r,o){return e(),a("div",null,s[0]||(s[0]=[n(`<p><code>perf_hooks</code> 是 <code>Node.js</code> 提供的一个模块，用于测量代码的性能。</p><p>这个模块提供了一组工具，可以帮助开发者跟踪和分析应用程序的性能指标，如执行时间、内存使用情况等。</p><ol><li><code>Performance</code> 类:</li></ol><ul><li><code>performance.now()</code>: 返回自 <code>Node.js</code> 进程启动以来经过的毫秒数，通常用于高精度时间测量。</li><li><code>performance.timeOrigin</code>: 表示性能计时开始的时间点。</li></ul><ol start="2"><li><code>PerformanceObserver</code> 类:</li></ol><ul><li>允许观察性能条目并对其进行处理。它监听特定类型的性能条目，例如函数执行时间或 HTTP 请求的时间。</li></ul><ol start="3"><li><code>performance.mark()</code> 和 <code>performance.measure()</code>:</li></ol><ul><li><code>performance.mark()</code>: 创建一个时间戳，可以用来标记代码中的特定点。</li><li><code>performance.measure()</code>: 通过指定的标记点，测量两者之间的时间差。</li></ul><ol start="4"><li><code>performance.nodeTiming</code>:</li></ol><ul><li>提供与 <code>Node.js</code> 进程生命周期相关的时序信息，例如主模块加载时间、事件循环启动时间等。</li></ul><ol start="5"><li><code>performance.gc()</code>:</li></ol><ul><li>提供关于垃圾回收的性能数据，允许开发者分析内存管理的效率。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">performance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:perf_hooks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟一些耗时操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`耗时 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 毫秒\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,13)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
