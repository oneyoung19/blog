import{_ as i,o as a,c as e,b0 as p}from"./chunks/framework.DDuwZS-e.js";const c=JSON.parse('{"title":"3.CommonJS","description":"","frontmatter":{"title":"3.CommonJS"},"headers":[],"relativePath":"FE/js-advance/module/3.CommonJS.md","filePath":"FE/js-advance/module/3.CommonJS.md","lastUpdated":1737702697000}'),t={name:"FE/js-advance/module/3.CommonJS.md"};function l(n,s,h,o,d,r){return a(),e("div",null,s[0]||(s[0]=[p(`<p><code>CommonJS</code> 是 <code>Node</code> 应用的模块化规范。</p><p>它原先的名字是 <code>ServerJS</code>，顾名思义，指的是服务端的模块化规范。</p><p>后来社区为了兼容浏览器端，更名为 <code>CommonJS</code>，意图一统前后端。</p><p>不幸的是，社区在指定浏览器的模块化标准上有了分歧，进而衍生了 <code>AMD</code>、<code>CMD</code> 等等。</p><p>更多细节可参考玉伯的<a href="https://github.com/seajs/seajs/issues/588" target="_blank" rel="noreferrer">前端模块化开发那点历史</a></p><h2 id="_1-基本用法" tabindex="-1">1.基本用法 <a class="header-anchor" href="#_1-基本用法" aria-label="Permalink to &quot;1.基本用法&quot;">​</a></h2><p><code>Node</code> 中的模块化用起来非常简单。</p><p>导入模块：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node的内置模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// node_modules中的第三方模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getName } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./utils&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>导出模块：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 利用module.exports</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>也可以使用 <code>exports</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 利用exports</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="_2-module-exports与exports" tabindex="-1">2.module.exports与exports <a class="header-anchor" href="#_2-module-exports与exports" aria-label="Permalink to &quot;2.module.exports与exports&quot;">​</a></h2><ol><li><p><code>exports</code> 默认指向 <code>module.exports</code>，相当于文件头部有一条语句 <code>var exports = module.exports</code>。</p></li><li><p><code>exports</code> 不能重新赋值，会导致指向更改。</p></li><li><p>同一文件中，<code>module.exports</code> 与 <code>exports</code> 不能同时使用。同时使用的话，只有 <code>module.exports</code> 会起作用。</p></li><li><p>如果对这两个方式纠结，那么建议统一使用 <code>module.exports</code>。</p></li></ol><h2 id="_3-require" tabindex="-1">3.require <a class="header-anchor" href="#_3-require" aria-label="Permalink to &quot;3.require&quot;">​</a></h2><ol><li><p><code>require</code> 导入的是初始化拷贝，后续在模块里的更改，并不会影响到值。</p></li><li><p><code>require</code> 同一模块时，模块只会加载一次。后续调用，会从缓存中读取。</p></li><li><p><code>require</code> 是动态读取，即可以在使用的任何地方调用。而 <code>EsModule</code> 只能写在文件头部。</p></li></ol>`,17)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
