import{_ as a,o,c as t,aP as d}from"./chunks/framework.D1yHhm2y.js";const u=JSON.parse('{"title":"Client端","description":"","frontmatter":{"title":"Client端"},"headers":[],"relativePath":"cs/im/websocket/1.client.md","filePath":"cs/im/websocket/1.client.md","lastUpdated":1735986935000}'),c={name:"cs/im/websocket/1.client.md"};function r(s,e,i,l,n,h){return o(),t("div",null,e[0]||(e[0]=[d('<p>基础使用方式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Websocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, [protocols])</span></span></code></pre></div><h2 id="_1-实例属性" tabindex="-1">1.实例属性 <a class="header-anchor" href="#_1-实例属性" aria-label="Permalink to &quot;1.实例属性&quot;">​</a></h2><h3 id="_1-1-protocol" tabindex="-1">1-1.protocol <a class="header-anchor" href="#_1-1-protocol" aria-label="Permalink to &quot;1-1.protocol&quot;">​</a></h3><p><code>protocol</code> 只读属性返回服务器选择的子协议的名称。</p><h3 id="_1-2-url" tabindex="-1">1-2.url <a class="header-anchor" href="#_1-2-url" aria-label="Permalink to &quot;1-2.url&quot;">​</a></h3><p><code>url</code> 只读属性返回由构造函数解析的 <code>Websocket</code> 的绝对 <code>URL</code>。</p><h3 id="_1-3-readystate" tabindex="-1">1-3.readyState <a class="header-anchor" href="#_1-3-readystate" aria-label="Permalink to &quot;1-3.readyState&quot;">​</a></h3><p><code>readyState</code> 只读属性返回 <code>Websocket</code> 连接的当前状态。</p><p>有以下几种值：</p><ul><li><code>0</code> <code>CONNECTING</code> 连接中</li><li><code>1</code> <code>OPEN</code> 连接开启</li><li><code>2</code> <code>CLOSING</code> 连接关闭中</li><li><code>3</code> <code>CLOSED</code> 连接已关闭</li></ul><h3 id="_1-4-extensions" tabindex="-1">1-4.extensions <a class="header-anchor" href="#_1-4-extensions" aria-label="Permalink to &quot;1-4.extensions&quot;">​</a></h3><p><code>extensions</code> 只读属性返回服务器选择的扩展。</p><h3 id="_1-5-binarytype" tabindex="-1">1-5.binaryType <a class="header-anchor" href="#_1-5-binarytype" aria-label="Permalink to &quot;1-5.binaryType&quot;">​</a></h3><p><code>binaryType</code> 属性控制通过 <code>Websocket</code> 连接接收的二进制数据的类型。</p><h3 id="_1-6-bufferedamount" tabindex="-1">1-6.bufferedAmount <a class="header-anchor" href="#_1-6-bufferedamount" aria-label="Permalink to &quot;1-6.bufferedAmount&quot;">​</a></h3><p><code>bufferedAmount</code> 只读属性返回已使用 <code>send()</code> 调用排队但尚未传输到网络的数据字节数。</p><p>一旦所有排队数据发送完毕，该值将重置为零。连接关闭时该值不会重置为零；如果你继续调用 <code>send()</code> ，这个值将会继续攀升。</p><h2 id="_2-实例方法" tabindex="-1">2.实例方法 <a class="header-anchor" href="#_2-实例方法" aria-label="Permalink to &quot;2.实例方法&quot;">​</a></h2><h3 id="_2-1-send" tabindex="-1">2-1.send() <a class="header-anchor" href="#_2-1-send" aria-label="Permalink to &quot;2-1.send()&quot;">​</a></h3><p><code>send()</code> 方法将要通过 <code>WebSocket</code> 连接传输到服务器的指定数据排入队列，并将 <code>bufferedAmount</code> 的值增加包含该数据所需的字节数。</p><p>如果数据无法发送（例如需要缓冲但缓冲区已满），则套接字会自动关闭。如果在连接处于 <code>CONNECTING</code> 状态时调用 <code>send()</code> ，浏览器将抛出异常。</p><p>如果在连接处于 <code>CLOSING</code> 或 <code>CLOSED</code> 状态时调用 <code>send()</code> ，浏览器将默默地丢弃数据。</p><h3 id="_2-2-close" tabindex="-1">2-2.close() <a class="header-anchor" href="#_2-2-close" aria-label="Permalink to &quot;2-2.close()&quot;">​</a></h3><p><code>close()</code> 方法关闭 <code>WebSocket</code> 连接或连接尝试（如果有）。</p><p>如果连接已经是 <code>CLOSED</code> ，则此方法不执行任何操作。</p><h2 id="_3-事件监听" tabindex="-1">3.事件监听 <a class="header-anchor" href="#_3-事件监听" aria-label="Permalink to &quot;3.事件监听&quot;">​</a></h2><h3 id="_3-1-open" tabindex="-1">3-1.open <a class="header-anchor" href="#_3-1-open" aria-label="Permalink to &quot;3-1.open&quot;">​</a></h3><p>监听连接已打开。</p><h3 id="_3-2-message" tabindex="-1">3-2.message <a class="header-anchor" href="#_3-2-message" aria-label="Permalink to &quot;3-2.message&quot;">​</a></h3><p>监听信息传输。</p><h3 id="_3-3-close" tabindex="-1">3-3.close <a class="header-anchor" href="#_3-3-close" aria-label="Permalink to &quot;3-3.close&quot;">​</a></h3><p>监听连接关闭。</p><h3 id="_3-4-error" tabindex="-1">3-4.error <a class="header-anchor" href="#_3-4-error" aria-label="Permalink to &quot;3-4.error&quot;">​</a></h3><p>监听连接出错。</p>',35)]))}const b=a(c,[["render",r]]);export{u as __pageData,b as default};
