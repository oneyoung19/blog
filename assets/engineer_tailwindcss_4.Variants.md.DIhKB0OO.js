import{_ as i,c as a,o as t,b0 as e}from"./chunks/framework.D8aj9ziZ.js";const c=JSON.parse('{"title":"4. Variants","description":"","frontmatter":{"title":"4. Variants"},"headers":[],"relativePath":"engineer/tailwindcss/4.Variants.md","filePath":"engineer/tailwindcss/4.Variants.md","lastUpdated":1749892205000}'),n={name:"engineer/tailwindcss/4.Variants.md"};function l(h,s,p,r,d,k){return t(),a("div",null,s[0]||(s[0]=[e(`<p><code>Variants</code> 变体指的就是<strong>一定条件</strong>下应用某些类名。</p><p><code>Tailwind</code> 中的每个实用程序类都可以通过<strong>在类名的开头添加一个变体来有条件地应用</strong>，该变体描述了想要针对的条件。</p><p>内置变体如下：</p><ol><li><code>Pseudo-classes</code> <strong>伪类</strong>，譬如 <code>:hover</code> 、 <code>:focus</code> 、 <code>:first-child</code> 和 <code>:required</code>；</li><li><code>Pseudo-elements</code> <strong>伪元素</strong>，譬如 <code>::before</code> 、 <code>::after</code> 、 <code>::selection</code> 和 <code>::placeholder</code>；</li><li><code>Media and feature queries</code> <strong>媒体和功能查询</strong>，譬如响应断点、暗模式和 <code>prefers-reduced-motion</code>；</li><li><code>Attribute selectors</code> <strong>属性选择器</strong>，譬如 <code>[dir=&quot;rtl&quot;]</code> 和 <code>[open]</code>；</li><li><code>Child selectors</code> <strong>子选择器</strong>，譬如 <code>&amp; &gt; *</code> 和 <code>&amp; *</code>。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Variants</code> 变体，会<strong>改变类名</strong>。</p><p>譬如，<code>dark:bg-red-500</code> 会被编译为：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.dark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bg-red-500:where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.dark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.dark</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--color-red-500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>那么实际类名会是 <code>.dark\\:bg-red-500</code>，<strong>当需要自定义某类名，从而覆盖样式时，这一点需要额外注意</strong>。</p></div><h2 id="_1-pseudo-classes" tabindex="-1">1.Pseudo-classes <a class="header-anchor" href="#_1-pseudo-classes" aria-label="Permalink to &quot;1.Pseudo-classes&quot;">​</a></h2><p>伪类<a href="https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-classes" target="_blank" rel="noreferrer">Pseudo-classes</a></p><h2 id="_2-pseudo-elements" tabindex="-1">2.Pseudo-elements <a class="header-anchor" href="#_2-pseudo-elements" aria-label="Permalink to &quot;2.Pseudo-elements&quot;">​</a></h2><p>伪元素<a href="https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-elements" target="_blank" rel="noreferrer">Pseudo-elements</a></p><h2 id="_3-media-and-feature-queries" tabindex="-1">3.Media and feature queries <a class="header-anchor" href="#_3-media-and-feature-queries" aria-label="Permalink to &quot;3.Media and feature queries&quot;">​</a></h2><p>媒体和功能查询<a href="https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries" target="_blank" rel="noreferrer">Media and feature queries</a></p><h2 id="_4-attribute-selectors" tabindex="-1">4.Attribute selectors <a class="header-anchor" href="#_4-attribute-selectors" aria-label="Permalink to &quot;4.Attribute selectors&quot;">​</a></h2><p>属性选择器<a href="https://tailwindcss.com/docs/hover-focus-and-other-states#attribute-selectors" target="_blank" rel="noreferrer">Attribute selectors</a></p><h2 id="_5-child-selectors" tabindex="-1">5.Child selectors <a class="header-anchor" href="#_5-child-selectors" aria-label="Permalink to &quot;5.Child selectors&quot;">​</a></h2><p>子选择器<a href="https://tailwindcss.com/docs/hover-focus-and-other-states#child-selectors" target="_blank" rel="noreferrer">Child selectors</a></p><h2 id="ps-custom-variants" tabindex="-1">ps.Custom variants <a class="header-anchor" href="#ps-custom-variants" aria-label="Permalink to &quot;ps.Custom variants&quot;">​</a></h2><p>此处重点记录下自定义变体<a href="https://tailwindcss.com/docs/hover-focus-and-other-states#custom-variants" target="_blank" rel="noreferrer">Custom variants</a>。</p><p><strong>任意变体</strong>的用法与<strong>任意值</strong><a href="https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values" target="_blank" rel="noreferrer">arbitrary values</a>的用法类似。</p><p><strong>任意变体只是用方括号括起来的表示选择器的格式字符串</strong>。</p><p>例如，当元素具有 <code>is-dragging</code> 类时，以下任意变体会将光标更改为 <code>grabbing</code> ：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {#each items as item}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[&amp;.is-dragging]:cursor-grabbing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{item}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {/each}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果选择器中需要空格，可以使用下划线。例如，以下任意变体将选择添加了该类的元素内的所有 <code>p</code> 元素：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[&amp;_p]:mt-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Lorem ipsum...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Lorem ipsum...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果在项目中多次使用相同的任意变体，则可能值得使用 <code>@custom-variant</code> 指令创建自定义变体：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@custom-variant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> theme-midnight (&amp;:where([data-theme=&quot;midnight&quot;] *));</span></span></code></pre></div><p>然后这样使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-theme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;midnight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;theme-midnight:bg-black ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,27)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
