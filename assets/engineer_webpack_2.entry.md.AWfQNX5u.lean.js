import{_ as a,o as i,c as t,aP as e}from"./chunks/framework.D1yHhm2y.js";const c=JSON.parse('{"title":"entry","description":"","frontmatter":{"title":"entry"},"headers":[],"relativePath":"engineer/webpack/2.entry.md","filePath":"engineer/webpack/2.entry.md","lastUpdated":1735988637000}'),n={name:"engineer/webpack/2.entry.md"};function p(l,s,h,k,r,d){return i(),t("div",null,s[0]||(s[0]=[e(`<p><code>entry</code>的写法具体有3种：<strong>字符串</strong>、<strong>数组</strong>以及<strong>对象</strong>。<strong>不同的写法会影响打包生成的文件</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要认识的一点是，入口文件必须是JS文件，<code>webpack</code>会将所有资源（无论是图片还是CSS）打包生成新的JS文件。</p></div><p><strong>建议文件的路径设置统一用<code>node</code>中的<code>path.resolve(__dirname, target)</code>的绝对路径。</strong></p><h2 id="_1-字符串" tabindex="-1">1.字符串 <a class="header-anchor" href="#_1-字符串" aria-label="Permalink to &quot;1.字符串&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/start.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>字符串形式的<code>entry</code>，会以该字符串定义的文件为入口。解析依赖并打包。</p><p>譬如上面，将<code>entry</code>设置为<code>start.js</code>后，<code>webpack</code>就会以<code>start.js</code>为入口。</p><h2 id="_2-数组" tabindex="-1">2.数组 <a class="header-anchor" href="#_2-数组" aria-label="Permalink to &quot;2.数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/start.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/entry.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>数组形式的<code>entry</code>，会以数组中的项，分别为入口，进行依赖解析，最终打包成一个文件。</p><h2 id="_3-对象" tabindex="-1">3.对象 <a class="header-anchor" href="#_3-对象" aria-label="Permalink to &quot;3.对象&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    start: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/start.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/entry.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对象形式的<code>entry</code>，常见用于配置<strong>多页面应用</strong>。<code>webpack</code>会以对象中的属性为入口，分别生成对应的文件。有几个属性，就会生成几个<code>output</code>文件。</p>`,13)]))}const E=a(n,[["render",p]]);export{c as __pageData,E as default};
