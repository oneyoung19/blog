(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{615:function(e,t,v){"use strict";v.r(t);var _=v(40),o=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[v("strong",[e._v("代理模式之defineProperty")])]),e._v(" "),v("p",[v("code",[e._v("Object.defineProperty")]),e._v(" 不是严格意义上的代理模式，但它可以用来实现类似的功能，尤其是在属性访问控制和行为增强方面。")]),e._v(" "),v("p",[e._v("代理模式通常通过一个中间对象（代理）来控制对原对象的访问，而 "),v("code",[e._v("Object.defineProperty")]),e._v(" 是通过直接定义或修改对象的属性行为来实现控制。")]),e._v(" "),v("p",[v("code",[e._v("Object.defineProperty")]),e._v(" 与 代理模式的区别:")]),e._v(" "),v("ul",[v("li",[e._v("代理模式：使用代理模式时，我们通过一个代理对象来控制对目标对象的访问。代理模式可以拦截多种操作，比如属性读取、赋值、删除、函数调用等。"),v("code",[e._v("JavaScript")]),e._v(" 中的 "),v("code",[e._v("Proxy")]),e._v(" 对象是实现代理模式的工具。")]),e._v(" "),v("li",[v("code",[e._v("Object.defineProperty")]),e._v("：它用于直接在对象上定义新属性或修改现有属性的行为，如是否可枚举、可写、可配置。它可以通过定义 "),v("code",[e._v("getter")]),e._v(" 和 "),v("code",[e._v("setter")]),e._v(" 来控制属性的读取和修改操作，但它仅限于特定属性的操作，不能拦截对象的其他行为（比如删除属性、函数调用等）。")])]),e._v(" "),v("ol",[v("li",[e._v("数据描述符")])]),e._v(" "),v("p",[v("code",[e._v("value")]),e._v(" "),v("code",[e._v("writable")]),e._v(" "),v("code",[e._v("enumerable")]),e._v(" "),v("code",[e._v("configurable")])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[e._v("访问器描述符")])]),e._v(" "),v("p",[v("code",[e._v("get")]),e._v(" "),v("code",[e._v("set")]),e._v(" "),v("code",[e._v("enumerable")]),e._v(" "),v("code",[e._v("configurable")])]),e._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[e._v("设置描述符")])]),e._v(" "),v("p",[v("code",[e._v("Object.defineProperty(obj, prop, descriptor)")])]),e._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[e._v("获取描述符")])]),e._v(" "),v("p",[v("code",[e._v("Object.getOwnPropertyDescriptor(obj, prop)")])])])}),[],!1,null,null,null);t.default=o.exports}}]);