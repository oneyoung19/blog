(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{510:function(v,_,t){"use strict";t.r(_);var e=t(40),o=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[t("code",[v._v("SQL")]),v._v(" 全称为 "),t("code",[v._v("Structured Query Language")]),v._v("，即为"),t("strong",[v._v("结构化查询语言")]),v._v("。")]),v._v(" "),t("p",[v._v("目前很多数据库（关系型数据库），都是建立在 "),t("code",[v._v("SQL")]),v._v(" 上的。")]),v._v(" "),t("p",[v._v("如果把"),t("strong",[v._v("数据库")]),v._v("比作"),t("strong",[v._v("盘子")]),v._v("，那"),t("strong",[v._v("数据")]),v._v("就是盘子里的"),t("strong",[v._v("菜")]),v._v("，"),t("code",[v._v("SQL")]),v._v(" 则是你的"),t("strong",[v._v("筷子")]),v._v("。")]),v._v(" "),t("p",[v._v("有一些比较流行的数据库比如 "),t("code",[v._v("SQLite")]),v._v("、"),t("code",[v._v("MySQL")]),v._v("、"),t("code",[v._v("Postgres")]),v._v("、"),t("code",[v._v("Oracle")]),v._v(" 和 "),t("code",[v._v("Microsoft SQL Server")]),v._v(".")]),v._v(" "),t("p",[v._v("所有这些数据库都支持标准的 "),t("code",[v._v("SQL")]),v._v("，换句话说，你学会了 "),t("code",[v._v("SQL")]),v._v(" 就可以对这些数据库做数据操作了！")]),v._v(" "),t("p",[v._v("当然上面的每一种数据库都有自己的特性和适用范围（想象一下你家有不同尺寸的盘子).")]),v._v(" "),t("p",[t("strong",[v._v("因此，在接触实际的数据库之前，我们需要先掌握基础 "),t("code",[v._v("SQL")]),v._v(" 的使用方式。")])]),v._v(" "),t("h2",{attrs:{id:"关系型数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库"}},[v._v("#")]),v._v(" 关系型数据库")]),v._v(" "),t("p",[t("code",[v._v("RDBMS")]),v._v(" 全称为 "),t("code",[v._v("Relational database management system")]),v._v("，关系型数据库，简单理解的话，就是"),t("strong",[v._v("表格结构的数据联系")]),v._v("。")]),v._v(" "),t("p",[v._v("关系型数据库的数据是以表格的形式存储的，每一行代表一条数据，每一列代表一种数据类型。")]),v._v(" "),t("p",[v._v("关系型数据库遵循 "),t("code",[v._v("ACID")]),v._v(" 原则，即 "),t("code",[v._v("Atomicity")]),v._v("（原子性）、"),t("code",[v._v("Consistency")]),v._v("（一致性）、"),t("code",[v._v("Isolation")]),v._v("（隔离性）和 "),t("code",[v._v("Durability")]),v._v("（持久性）。")]),v._v(" "),t("h3",{attrs:{id:"atomicity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicity"}},[v._v("#")]),v._v(" Atomicity")]),v._v(" "),t("p",[v._v("原子性，即事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。")]),v._v(" "),t("p",[v._v("只要有一个事务操作失败，整个事务就会回滚，所有的操作都不会生效。")]),v._v(" "),t("p",[v._v("比如银行转账，从 "),t("code",[v._v("A")]),v._v(" 账户转账 "),t("code",[v._v("100")]),v._v(" 美元至 "),t("code",[v._v("B")]),v._v(" 账户，分为两个步骤：")]),v._v(" "),t("ol",[t("li",[v._v("从 "),t("code",[v._v("A")]),v._v(" 账户扣除 "),t("code",[v._v("100")]),v._v(" 美元")]),v._v(" "),t("li",[v._v("向 "),t("code",[v._v("B")]),v._v(" 账户增加 "),t("code",[v._v("100")]),v._v(" 美元")])]),v._v(" "),t("p",[v._v("这两步操作要么同时完成，要么同时不完成。")]),v._v(" "),t("p",[v._v("如果只完成了第一步，而第二步没有完成，那么 "),t("code",[v._v("A")]),v._v(" 账户就少了 "),t("code",[v._v("100")]),v._v(" 美元，而 "),t("code",[v._v("B")]),v._v(" 账户却没有增加 "),t("code",[v._v("100")]),v._v(" 美元，这就是一个不可分割的工作单位。")]),v._v(" "),t("h3",{attrs:{id:"consistency"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#consistency"}},[v._v("#")]),v._v(" Consistency")]),v._v(" "),t("p",[v._v("一致性，即事务必须使数据库从一个一致性状态变换到另外一个一致性状态。")]),v._v(" "),t("p",[v._v("例如现有完整性约束 "),t("code",[v._v("a+b=10")]),v._v("，如果一个事务改变了 "),t("code",[v._v("a")]),v._v("，那么必须得改变 "),t("code",[v._v("b")]),v._v("，使得事务结束后依然满足 "),t("code",[v._v("a+b=10")]),v._v("，否则事务失败。")]),v._v(" "),t("h3",{attrs:{id:"isolation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isolation"}},[v._v("#")]),v._v(" Isolation")]),v._v(" "),t("p",[v._v("独立性，即多个事务并发执行时，事务之间相互隔离，一个事务的执行不应该影响其他事务的执行。")]),v._v(" "),t("p",[v._v("比如银行转账，从 "),t("code",[v._v("A")]),v._v(" 账户转账 "),t("code",[v._v("100")]),v._v(" 美元至 "),t("code",[v._v("B")]),v._v(" 账户。在这个交易还未完成的情况下，如果此时 "),t("code",[v._v("B")]),v._v(" 查询自己的账户，是看不到新增加的"),t("code",[v._v("100")]),v._v(" 美元的。")]),v._v(" "),t("h3",{attrs:{id:"durability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#durability"}},[v._v("#")]),v._v(" Durability")]),v._v(" "),t("p",[v._v("持久性，即一旦事务提交，它对数据库中数据的改变就应该是永久性的。")])])}),[],!1,null,null,null);_.default=o.exports}}]);