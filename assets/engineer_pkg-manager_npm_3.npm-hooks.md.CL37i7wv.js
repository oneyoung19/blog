import{_ as e,c as o,o as i,b0 as p}from"./chunks/framework.CEggy_nf.js";const k=JSON.parse('{"title":"NPM Hooks","description":"","frontmatter":{"title":"NPM Hooks"},"headers":[],"relativePath":"engineer/pkg-manager/npm/3.npm-hooks.md","filePath":"engineer/pkg-manager/npm/3.npm-hooks.md","lastUpdated":1743842200000}'),n={name:"engineer/pkg-manager/npm/3.npm-hooks.md"};function a(t,s,c,d,l,r){return i(),o("div",null,s[0]||(s[0]=[p(`<p>在 <code>Node.js</code> 开发中，<code>npm</code> 是一个包管理器，用于安装、更新和管理 <code>JavaScript</code> 模块。</p><p><code>npm</code> 提供了一些钩子（<code>hooks</code>）机制，用于在特定的生命周期事件发生时执行自定义的操作。</p><p><code>npm</code> 钩子（<code>npm hooks</code>）允许您在执行特定的npm命令时执行自定义的脚本或任务。</p><p>这些钩子可以用于在安装依赖、更新依赖、构建项目等过程中添加额外的自定义逻辑。</p><p>一些常见的 <code>npm</code> 钩子有：</p><ol><li><code>preinstall</code>：在执行 <code>npm install</code> 命令之前运行，可以用于在安装依赖之前进行一些预处理操作。</li><li><code>postinstall</code>：在执行 <code>npm install</code> 命令之后运行，可以用于在安装依赖之后执行一些操作，如编译源代码、生成静态文件等。</li><li><code>prepublish</code>：在执行 <code>npm publish</code> 命令之前运行，可以用于在发布模块之前执行一些操作，如打包、压缩等。</li><li><code>postpublish</code>：在执行 <code>npm publish</code> 命令之后运行，可以用于在发布模块之后执行一些操作，如发送通知、更新文档等。</li><li><code>preversion</code>：在执行 <code>npm version</code> 命令之前运行，可以用于在更新模块版本号之前执行一些操作。</li><li><code>postversion</code>：在执行 <code>npm version</code> 命令之后运行，可以用于在更新模块版本号之后执行一些操作，如生成 <code>changelog</code>、提交代码等。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>除了上述 <code>hooks</code>，其他命令也有对应的钩子，<code>pre</code> 前缀表示前置钩子，<code>post</code> 前缀表示后置钩子。</p></div><p>可以在项目的 <code>package.json</code> 文件中的 <code>scripts</code> 字段中定义这些钩子，并指定要运行的脚本命令。</p><p><strong>当相关的 <code>npm</code> 命令被执行时，相应的钩子脚本将被调用</strong>。</p><p>譬如在 <code>package.json</code> 中添加：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">preinstall script</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当执行 <code>npm install</code> 命令时，将会<strong>提前</strong>输出 <code>preinstall script</code>。</p>`,12)]))}const m=e(n,[["render",a]]);export{k as __pageData,m as default};
