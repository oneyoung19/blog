import{_ as i,c as a,o as e,b0 as t}from"./chunks/framework.D8aj9ziZ.js";const r=JSON.parse('{"title":"3. Responsive design","description":"","frontmatter":{"title":"3. Responsive design"},"headers":[],"relativePath":"engineer/tailwindcss/3.Responsive.md","filePath":"engineer/tailwindcss/3.Responsive.md","lastUpdated":1749892205000}'),n={name:"engineer/tailwindcss/3.Responsive.md"};function l(p,s,d,h,k,c){return e(),a("div",null,s[0]||(s[0]=[t(`<p>网页响应式设计是现代化网页设计绕不开的一个话题。</p><p>值得庆幸的是，<code>Tailwind CSS</code> 默认提供了<strong>开箱即用</strong>的响应式设计工具。</p><h2 id="_1-媒体查询与rem" tabindex="-1">1.媒体查询与Rem <a class="header-anchor" href="#_1-媒体查询与rem" aria-label="Permalink to &quot;1.媒体查询与Rem&quot;">​</a></h2><p><code>Tailwind</code> 内置了<strong>媒体查询</strong>和 <code>rem</code> 的结合式网页响应式设计。</p><ol><li>媒体查询需要确保 <code>html</code> 中如下 <code>DOM</code>：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><ol start="2"><li><code>rem</code> 在浏览器默认的 <code>font-size</code> 是 <code>16px</code></li></ol><h2 id="_2-内置断点" tabindex="-1">2.内置断点 <a class="header-anchor" href="#_2-内置断点" aria-label="Permalink to &quot;2.内置断点&quot;">​</a></h2><p><code>Tailwind</code> 内置了以下 <code>breakpoints</code>：</p><table tabindex="0"><thead><tr><th><code>Breakpoint prefix</code></th><th><code>Minimum width</code></th><th><code>CSS</code></th></tr></thead><tbody><tr><td><code>sm</code></td><td><code>40rem (640px)</code></td><td><code>@media (width &gt;= 40rem) { ... }</code></td></tr><tr><td><code>md</code></td><td><code>48rem (768px)</code></td><td><code>@media (width &gt;= 48rem) { ... }</code></td></tr><tr><td><code>lg</code></td><td><code>64rem (1024px)</code></td><td><code>@media (width &gt;= 64rem) { ... }</code></td></tr><tr><td><code>xl</code></td><td><code>80rem (1280px)</code></td><td><code>@media (width &gt;= 80rem) { ... }</code></td></tr><tr><td><code>2xl</code></td><td><code>96rem (1536px)</code></td><td><code>@media (width &gt;= 96rem) { ... }</code></td></tr></tbody></table><p>从这个表格中，我们可以看出两点：</p><ol><li>内置 <code>5</code> 个媒体查询断点，分别对应 <code>sm</code>、<code>md</code>、<code>lg</code>、<code>xl</code> 和 <code>2xl</code>。</li><li><a href="https://tailwindcss.com/docs/responsive-design#working-mobile-first" target="_blank" rel="noreferrer">Working mobile-first</a> <strong>移动端优先</strong>，也就是说我们在使用 <code>Tailwind CSS</code> 时，设置的样式默认是在 <code>sm</code> 以下的样式。</li></ol><p>如果我们想要设置 <code>sm</code>、<code>md</code>、<code>lg</code>、<code>xl</code>、<code>2xl</code> 以上的样式，那么我们需要使用 <code>varient</code> 来设置：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bg-red-100 sm:bg-red-200 md:bg-red-300 lg:bg-red-400 xl:bg-red-500 2xl:bg-red-600&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果想要更新粒度的来控制响应式设计，譬如想要在 <code>sm-lg</code> 之间设置，那么可以使用 <code>max-*</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bg-red-100 sm:max-lg:bg-red-500&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>完全的 <code>max-*</code> 设置见下表：</p><table tabindex="0"><thead><tr><th><code>Variant</code></th><th><code>Media query</code></th></tr></thead><tbody><tr><td><code>max-sm</code></td><td><code>@media (width &lt; 40rem) { ... }</code></td></tr><tr><td><code>max-md</code></td><td><code>@media (width &lt; 48rem) { ... }</code></td></tr><tr><td><code>max-lg</code></td><td><code>@media (width &lt; 64rem) { ... }</code></td></tr><tr><td><code>max-xl</code></td><td><code>@media (width &lt; 80rem) { ... }</code></td></tr><tr><td><code>max-2xl</code></td><td><code>@media (width &lt; 96rem) { ... }</code></td></tr></tbody></table><h2 id="_3-自定义断点" tabindex="-1">3.自定义断点 <a class="header-anchor" href="#_3-自定义断点" aria-label="Permalink to &quot;3.自定义断点&quot;">​</a></h2><p>我们可以使用 <code>--breakpoint-*</code> 来自定义断点：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tailwindcss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@theme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --breakpoint-xs: 30rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --breakpoint-2xl: 100rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --breakpoint-3xl: 120rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果需要使用没有意义的一次性断点，则可以使用 <code>min</code> 或 <code>max</code> 变量，使用任意值动态生成自定义断点：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;max-[600px]:bg-sky-300 min-[320px]:text-center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_4-断点样式变量" tabindex="-1">4.断点样式变量 <a class="header-anchor" href="#_4-断点样式变量" aria-label="Permalink to &quot;4.断点样式变量&quot;">​</a></h2><p>假设有一个样式变量 <code>--sidebar-width</code>，我们想要它在不同的屏幕下显示不同的宽度，那么在 <code>tailwindcss@4</code> 版本中，推荐这样使用：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: theme(--breakpoint-sm)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  :root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    --sidebar-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: theme(--breakpoint-md)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  :root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    --sidebar-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>笔者测试，在 <code>tailwindcss@4.1.8</code> 版本中，<code>@screen</code> 指令也是生效的，但在官方文档中已经查不到用法了。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@screen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sm {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	--sidebar-width: 12rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@screen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> md {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	--sidebar-width: 14rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于上述用法的抉择，您可以参考这个<a href="https://github.com/tailwindlabs/tailwindcss/discussions/15960" target="_blank" rel="noreferrer">Discussion</a>。</p></div><h2 id="_5-容器查询" tabindex="-1">5.容器查询 <a class="header-anchor" href="#_5-容器查询" aria-label="Permalink to &quot;5.容器查询&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries" target="_blank" rel="noreferrer">容器查询</a>是现代化浏览器的新特性。</p><p>它允许**根据父元素的大小（而不是整个视口的大小）**来设置样式。</p><p>媒体查询的语句是 <code>@media</code>，而容器查询的语句是 <code>@container</code>。</p><p>在 <code>Tailwind</code> 中，可以直接这样使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flex flex-col @md:flex-row @8xl:bg-sky-500&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>同样的，需要设定断点范围时，容器查询可以使用 <code>@min-*</code> 和 <code>@max-*</code>。</p><p>但不同于媒体查询的 <code>--breakpoint-*</code>，容器查询提供了 <code>--container-*</code> 样式变量：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@theme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	--container-3xs: 16rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-2xs: 18rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-xs: 20rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-sm: 24rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-md: 28rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-lg: 32rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-xl: 36rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-2xl: 42rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-3xl: 48rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-4xl: 56rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-5xl: 64rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-6xl: 72rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  --container-7xl: 80rem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对于使用多个嵌套容器的复杂设计，可以使用 <code>@container/{name}</code> 命名容器，譬如 <code>@sm/{name}</code> 和 <code>@md/{name}</code> 等：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@container/main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flex flex-row @sm/main:flex-col&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,40)]))}const E=i(n,[["render",l]]);export{r as __pageData,E as default};
