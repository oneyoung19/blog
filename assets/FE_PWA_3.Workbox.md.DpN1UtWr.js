import{_ as i,c as a,o as e,b0 as t}from"./chunks/framework.Ctc7-3V1.js";const c=JSON.parse('{"title":"3.Workbox","description":"","frontmatter":{"title":"3.Workbox"},"headers":[],"relativePath":"FE/PWA/3.Workbox.md","filePath":"FE/PWA/3.Workbox.md","lastUpdated":1748249253000}'),n={name:"FE/PWA/3.Workbox.md"};function l(h,s,p,r,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<p><a href="https://developer.chrome.com/docs/workbox/service-worker-overview/" target="_blank" rel="noreferrer">官方workbox</a></p><p><a href="https://fed.taobao.org/blog/taofed/do71ct/workbox3/" target="_blank" rel="noreferrer">淘系前端之workbox</a></p><p><a href="https://www.npmjs.com/package/workbox-webpack-plugin" target="_blank" rel="noreferrer">workbox-webpack-plugin</a></p><h2 id="_3-1-缓存策略" tabindex="-1">3-1.缓存策略 <a class="header-anchor" href="#_3-1-缓存策略" aria-label="Permalink to &quot;3-1.缓存策略&quot;">​</a></h2><p><a href="https://developer.chrome.com/docs/workbox/modules/workbox-strategies" target="_blank" rel="noreferrer">Workbox 策略</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>GenerateSW</code> 模式默认使用的是 <a href="https://developer.chrome.com/docs/workbox/modules/workbox-precaching?hl=zh-cn#serving_precached_responses" target="_blank" rel="noreferrer">workbox.precaching.precacheAndRoute</a> 方法，而该方法默认是 <code>CacheFirst</code> 策略。</p></div><h3 id="_1-cacheonly" tabindex="-1">1.CacheOnly <a class="header-anchor" href="#_1-cacheonly" aria-label="Permalink to &quot;1.CacheOnly&quot;">​</a></h3><p><code>CacheOnly</code> 策略从缓存中获取资源，如果缓存中找不到资源，则返回 <code>404</code>。</p><p><img src="https://developer.chrome.com/static/docs/workbox/modules/workbox-strategies/image/cache-diagram-19446e5e2337e.png" alt="" loading="lazy"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { registerRoute } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-routing&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CacheOnly } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-strategies&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url.pathname.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/app/v2/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CacheOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h3 id="_2-networkonly" tabindex="-1">2.NetworkOnly <a class="header-anchor" href="#_2-networkonly" aria-label="Permalink to &quot;2.NetworkOnly&quot;">​</a></h3><p><code>NetworkOnly</code> 策略从网络获取资源，如果网络请求失败，则返回 <code>404</code>。</p><p><img src="https://developer.chrome.com/static/docs/workbox/modules/workbox-strategies/image/network-diagram-8244250312532.png" alt="" loading="lazy"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { registerRoute } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-routing&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { NetworkOnly } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-strategies&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url.pathname.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/admin/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NetworkOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h3 id="_3-cachefirst" tabindex="-1">3.CacheFirst <a class="header-anchor" href="#_3-cachefirst" aria-label="Permalink to &quot;3.CacheFirst&quot;">​</a></h3><p><code>CacheFirst</code> 策略从缓存中获取资源，如果缓存中找不到资源，则从网络获取资源。</p><p><img src="https://developer.chrome.com/static/docs/workbox/caching-strategies-overview/image/shows-flow-page-servic-a13fd1c656eeb.png" alt="" loading="lazy"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { registerRoute } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-routing&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CacheFirst } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-strategies&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.destination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CacheFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h3 id="_4-networkfirst" tabindex="-1">4.NetworkFirst <a class="header-anchor" href="#_4-networkfirst" aria-label="Permalink to &quot;4.NetworkFirst&quot;">​</a></h3><p><code>NetworkFirst</code> 策略从网络获取资源，如果网络请求失败，则从缓存中获取资源。</p><p><img src="https://developer.chrome.com/static/docs/workbox/modules/workbox-strategies/image/network-diagram-34e6dede5ee14.png" alt="" loading="lazy"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { registerRoute } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-routing&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { NetworkFirst } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-strategies&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url.pathname.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/social-timeline/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NetworkFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_5-stalewhilerevalidate" tabindex="-1">5.StaleWhileRevalidate <a class="header-anchor" href="#_5-stalewhilerevalidate" aria-label="Permalink to &quot;5.StaleWhileRevalidate&quot;">​</a></h3><p><code>StaleWhileRevalidate</code> 策略从缓存中获取资源，如果缓存中找不到资源，则从网络获取资源，如果网络请求失败，则返回缓存中的资源。</p><p><img src="https://developer.chrome.com/static/docs/workbox/modules/workbox-strategies/image/stale-while-revalidate-di-81829f38d8fde.png" alt="" loading="lazy"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { registerRoute } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-routing&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { StaleWhileRevalidate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbox-strategies&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url.pathname.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/images/avatars/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StaleWhileRevalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="_3-2-workbox-webpack-plugin" tabindex="-1">3-2.workbox-webpack-plugin <a class="header-anchor" href="#_3-2-workbox-webpack-plugin" aria-label="Permalink to &quot;3-2.workbox-webpack-plugin&quot;">​</a></h2><p><code>workbox-webpack-plugin</code> 是一个 <code>Webpack</code> 插件，用于生成 <code>Service Worker</code> 文件。</p><p>它支持两种模式：</p><ol><li><code>GenerateSW</code>（<strong>默认值</strong>）</li><li><code>InjectManifest</code></li></ol><p>官方介绍<a href="https://developer.chrome.com/docs/workbox/modules/workbox-webpack-plugin" target="_blank" rel="noreferrer">如何选择 GenerateSW 或者 InjectManifest 模式</a>。</p><p>简单说一下我对这两种模式的理解：</p><ol><li><p><code>GenerateSW</code>：在该模式下，<code>workbox-webpack-plugin</code> 会自动生成 <code>precache-manifest.js</code> 和 <code>Service Worker</code> 文件，且该 <code>Service Worker</code> 文件内置了对于 <code>precache-manifest.js</code> 文件的处理逻辑。（很方便开发者使用默认逻辑，但缺点是不支持自定义 <code>Service Worker</code> 逻辑）。</p></li><li><p><code>InjectManifest</code>：在该模式下，<code>workbox-webpack-plugin</code> 只会生成 <code>precache-manifest.js</code>，因此开发者需要手动声明 <code>swSrc</code> 配置以自定义 <code>Service Worker</code> 文件逻辑。<code>workbox-webpack-plugin</code> 会自动利用 <code>importScripts</code> 方法将 <code>precache-manifest.js</code> 注入到自定义 <code>Service Worker</code> 文件中。</p></li></ol>`,33)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
