import{_ as i,c as a,o as e,b0 as t}from"./chunks/framework.CEggy_nf.js";const r=JSON.parse('{"title":"7.SELECT","description":"","frontmatter":{"title":"7.SELECT"},"headers":[],"relativePath":"DB/sql/7.select.md","filePath":"DB/sql/7.select.md","lastUpdated":1744950676000}'),n={name:"DB/sql/7.select.md"};function l(d,s,h,p,o,k){return e(),a("div",null,s[0]||(s[0]=[t(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong><code>SQL</code> 不区分大小写（除了表格名）</strong>。</p><p>但书写 <code>SQL</code> 关键字时，我们推荐用大写形式。</p><p>这有助于我们把<strong>关键字</strong>和 表名、列名区分开，让 <code>SQL</code> 更容易理解。</p></div><h2 id="查询所有列" tabindex="-1">查询所有列 <a class="header-anchor" href="#查询所有列" aria-label="Permalink to &quot;查询所有列&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span></code></pre></div><h2 id="查询指定列" tabindex="-1">查询指定列 <a class="header-anchor" href="#查询指定列" aria-label="Permalink to &quot;查询指定列&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column, another_column, …</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span></code></pre></div><h2 id="基础条件查询" tabindex="-1">基础条件查询 <a class="header-anchor" href="#基础条件查询" aria-label="Permalink to &quot;基础条件查询&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column, another_column, …</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  AND/OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> another_condition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  AND/OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span></code></pre></div><p>条件 <code>condition</code> 是包含操作符 <code>operator</code> 的表达式。</p><p>以下操作符可以用来<strong>筛选数字属性列</strong>：</p><table tabindex="0"><thead><tr><th>Operator</th><th>Condition</th><th>Example</th></tr></thead><tbody><tr><td><code>=</code> <code>!=</code> <code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code></td><td>比较运算</td><td><code>goods_num &gt; 100</code></td></tr><tr><td><code>BETWEEN...AND...</code></td><td>在区域之间</td><td><code>goods_num BETWEEN 100 AND 1000</code></td></tr><tr><td><code>NOT BETWEEN...AND...</code></td><td>不在区域之间</td><td><code>goods_num NOT BETWEEN 100 AND 1000</code></td></tr><tr><td><code>IN (...)</code></td><td>在列表中</td><td><code>goods_num IN (200, 400, 600)</code></td></tr><tr><td><code>NOT IN (...)</code></td><td>不在列表中</td><td><code>goods_num NOT IN (200, 400, 600)</code></td></tr></tbody></table><p>以下操作符可以用来<strong>筛选字符串属性列</strong>：</p><table tabindex="0"><thead><tr><th>Operator</th><th>Condition</th><th>Example</th></tr></thead><tbody><tr><td><code>=</code></td><td>等于</td><td><code>goods_name = &#39;apple&#39;</code></td></tr><tr><td><code>!=</code> 或 <code>&lt;&gt;</code></td><td>不等于</td><td><code>goods_name != &#39;apple&#39;</code></td></tr><tr><td><code>LIKE</code></td><td>没有用通配符时，等价于 <code> =</code></td><td><code>goods_name LIKE &#39;apple&#39;</code></td></tr><tr><td><code>NOT LIKE</code></td><td>没有用通配符等价于 <code>!=</code></td><td><code>goods_name NOT LIKE &#39;apple&#39;</code></td></tr><tr><td><code>%</code></td><td>通配符。只和 <code>LIKE</code> 或 <code>NOT LIKE</code> 连用。代表匹配 <code>0</code> 个以上的字符。</td><td><code>goods_name LIKE &#39;%apple%&#39;</code></td></tr><tr><td><code>_</code></td><td>使用方式同 <code>%</code> ，区别在于 <code>_</code> 代表匹配 <code>1</code> 个字符。</td><td><code>goods_name LIKE &#39;apple_&#39;</code></td></tr><tr><td><code>IN (...)</code></td><td>在列表中</td><td><code>goods_num IN (&#39;apple&#39;, &#39;banana&#39;)</code></td></tr><tr><td><code>NOT IN (...)</code></td><td>不在列表中</td><td><code>goods_num NOT IN (&#39;apple&#39;, &#39;banana&#39;)</code></td></tr></tbody></table><h2 id="数据去重-distinct" tabindex="-1">数据去重 <code>DISTINCT</code> <a class="header-anchor" href="#数据去重-distinct" aria-label="Permalink to &quot;数据去重 \`DISTINCT\`&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column, another_column, ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition(s);</span></span></code></pre></div><h2 id="数据排序-order-by" tabindex="-1">数据排序 <code>ORDER BY</code> <a class="header-anchor" href="#数据排序-order-by" aria-label="Permalink to &quot;数据排序 \`ORDER BY\`&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column, another_column, ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC/DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="数据截取-limit、offset" tabindex="-1">数据截取 <code>LIMIT</code>、<code>OFFSET</code> <a class="header-anchor" href="#数据截取-limit、offset" aria-label="Permalink to &quot;数据截取 \`LIMIT\`、\`OFFSET\`&quot;">​</a></h2><p><strong><code>LIMIT</code> 和 <code>OFFSET</code> 子句通常和 <code>ORDER BY</code> 语句一起使用</strong>。</p><p><code>LIMIT</code> 代表数据数量限制，<code>OFFSET</code> 代表数据截取偏移量。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column, another_column, ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC/DESC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num_limit OFFSET num_offset;</span></span></code></pre></div><h2 id="联表查询" tabindex="-1">联表查询 <a class="header-anchor" href="#联表查询" aria-label="Permalink to &quot;联表查询&quot;">​</a></h2><p><code>JOINs</code> 类别分为两种 <code>INNER JOIN</code> 和 <code>OUTER JOIN</code>。</p><p>其中 <code>OUTER JOIN</code> 又可以细分为:</p><ol><li><code>LEFT JOIN</code></li><li><code>RIGHT JOIN</code></li><li><code>FULL JOIN</code></li></ol><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20230322141509.png" alt="" loading="lazy"></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> another_table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tableName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> another_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column, ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC/DESC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num_limit OFFSET num_offset;</span></span></code></pre></div><h2 id="null-字段的处理" tabindex="-1"><code>NULL</code> 字段的处理 <a class="header-anchor" href="#null-字段的处理" aria-label="Permalink to &quot;\`NULL\` 字段的处理&quot;">​</a></h2><p>之前我们已经接触过 <code>NULL</code>。 在数据库中，<code>NULL</code> 表达的是 &quot;无&quot; 的概念，或者说没有东西。因为 <code>NULL</code> 的存在，我们需要在编写 <code>SQL</code> 时考虑到某个属性列可能是 <code>NULL</code> 的情况， 这种特殊性会造成编写 <code>SQL</code> 的复杂性，所以没有必要的情况下，我们应该尽量减少 <code>NULL</code> 的使用，让数据中尽可能少出现 <code>NULL</code> 的情况。</p><p>如果某个字段你没有填写到数据库，很可能就会出现 <code>NULL</code> 。所已一个常见的方式就是为字段设置默认值,比如 数字的默认值设置为 <code>0</code>，字符串设置为 <code>&quot;&quot;</code> 字符串。</p><p>但是在一些 <code>NULL</code> 表示它本来含义的场景，需要注意是否设置默认值还是保持 <code>NULL</code>。 (比如, 当你计算一些行的平均值的时候，如果是 <code>0</code> 会参与计算导致平均值差错，是 <code>NULL</code> 则不会参与计算)。</p><p>还有一些情况很难避免 <code>NULL</code> 的出现, 比如之前说的 <code>OUTER JOINs</code> 多表连接，<code>A</code> 和 <code>B</code> 有数据差异时，必须用 <code>NULL</code> 来填充。这种情况，可以用 <code>IS NULL</code> 和 <code>IS NOT NULL</code> 来判断在某个字段是否等于 <code>NULL</code>。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEFT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> another_table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tableName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> another_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IS NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="在-sql-查询中使用表达式" tabindex="-1">在 <code>SQL</code> 查询中使用表达式 <a class="header-anchor" href="#在-sql-查询中使用表达式" aria-label="Permalink to &quot;在 \`SQL\` 查询中使用表达式&quot;">​</a></h2><p>之前我们在 <code>SQL</code> 中的出现 <code>column</code>（属性名）的地方，我们都只是写上 <code>column</code> 自身。</p><p><strong>其实在 <code>SQL</code> 中可以用 <code>column</code> 的地方，都可以用表达式来指定对属性进行一定的计算或处理</strong>。</p><p>同时，<strong>还能使用 <code>AS</code> 命名新的 <code>column</code> 名</strong>。</p><p>譬如针对 <code>John Lasseter</code> 导演的每部电影每分钟值多少钱，筛选出最高的 <code>3</code> 个电影名和价值:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Title, (Domestic_sales </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> International_sales) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Length_minutes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boxoffice</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> movies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Boxoffice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Movie_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Director </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;John Lasseter&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DESC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="在查询中进行统计" tabindex="-1">在查询中进行统计 <a class="header-anchor" href="#在查询中进行统计" aria-label="Permalink to &quot;在查询中进行统计&quot;">​</a></h2><p>我们之前只是这样使用：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableName</span></span></code></pre></div><p>但实际上 <code>SQL</code> 提供了一些<strong>聚合函数</strong>以供我们对指定列进行操作。</p><p>常用的<strong>聚合函数</strong>有：</p><table tabindex="0"><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>COUNT(*)</code>，<code>COUNT(column)</code></td><td>计数！<code>COUNT(*)</code> 统计数据行数，<code>COUNT(column)</code> 统计 <code>column</code> 非 <code>NULL</code> 的行数。</td></tr><tr><td><code>MIN(column)</code></td><td>找 <code>column</code> 最小的一行</td></tr><tr><td><code>MAX(column)</code></td><td>找 <code>column</code> 最大的一行</td></tr><tr><td><code>AVG(column)</code></td><td>对 <code>column</code> 的所有行求平均值</td></tr><tr><td><code>SUM(column)</code></td><td>对 <code>column</code> 的所有行求和</td></tr></tbody></table><p>譬如，以下形式是对指定列求和：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(years) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies</span></span></code></pre></div><p>关于这些函数的使用方式，要注意的一点是，<strong>获取到指定列后再操作</strong>。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20230322194216.png" alt="" loading="lazy"></p><h2 id="数据分组-group-by" tabindex="-1">数据分组 <code>GROUP BY</code> <a class="header-anchor" href="#数据分组-group-by" aria-label="Permalink to &quot;数据分组 \`GROUP BY\`&quot;">​</a></h2><p>数据分组，就是按照指定列的相同数据进行分组。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> role_name, work_year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emplyees</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> role_name;</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20230322200335.png" alt="" loading="lazy"></p><p>通常情况下<strong>聚合函数</strong>会与 <code>GROUP BY</code> 分组联用。</p><p>譬如，计算角色的平均工作年限：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> role_name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(work_year) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emplyees</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> role_name;</span></span></code></pre></div><h2 id="数据子集过滤-having" tabindex="-1">数据子集过滤 <code>HAVING</code> <a class="header-anchor" href="#数据子集过滤-having" aria-label="Permalink to &quot;数据子集过滤 \`HAVING\`&quot;">​</a></h2><p>当我们使用 <code>GROUP BY</code> 对数据分组之后，如果想要进一步筛选，就可以使用 <code>HAVING</code>。</p><p><strong><code>HAVING</code> 的语法类似于 <code>WHERE</code>，但二者针对的数据集不同</strong>。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> role_name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(work_year) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg_work_year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emplyees</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> role_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HAVING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg_work_year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20230322201015.png" alt="" loading="lazy"></p><h2 id="select-查询执行顺序" tabindex="-1"><code>SELECT</code> 查询执行顺序 <a class="header-anchor" href="#select-查询执行顺序" aria-label="Permalink to &quot;\`SELECT\` 查询执行顺序&quot;">​</a></h2><p>完整的 <code>SELECT</code> 语句如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column, AGG_FUNC(column_or_expression), …</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mytable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> another_table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mytable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> another_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">column</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> constraint_expression</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  HAVING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> constraint_expression</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC/DESC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count OFFSET COUNT;</span></span></code></pre></div><p>执行顺序：</p><ol><li><code>FROM</code> 和 <code>JOINs</code></li><li><code>WHERE</code></li><li><code>GROUP BY</code></li><li><code>HAVING</code></li><li><code>SELECT</code></li><li><code>DISTINCT</code></li><li><code>ORDER BY</code></li><li><code>LIMIT</code> 和 <code>OFFSET</code></li></ol>`,65)]))}const E=i(n,[["render",l]]);export{r as __pageData,E as default};
