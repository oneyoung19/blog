import{_ as i,c as a,o as e,b1 as n}from"./chunks/framework.BbHYEPU-.js";const t="/blog/assets/reactive.C22O_4xN.png",E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vue2/source-code/core/observer/index.md","filePath":"frame/vue2/source-code/core/observer/index.md","lastUpdated":1752744100000}'),l={name:"frame/vue2/source-code/core/observer/index.md"};function p(h,s,k,d,r,c){return e(),a("div",null,s[0]||(s[0]=[n('<p>在梳理具体的响应式之前，可以从官网上的这张图一窥整体逻辑：</p><p><img src="'+t+`" alt="reactive" loading="lazy"></p><p>从上图中，抛却 <code>UI</code> 部分，我们可以将响应式核心逻辑拆分为以下几个部分：</p><ol><li>数据劫持</li><li>依赖收集</li><li>依赖触发</li></ol><p>事实上，<code>Vue</code> 的核心代码就是围绕着这三部分展开的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { observe } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../observer/index&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Watcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../observer/watcher&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据劫持</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依赖收集、依赖触发</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Watcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data1.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data2.msg, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>简单整理一下上述代码的逻辑：</p><ol><li>数据劫持：<code>observe</code> 函数对数据进行劫持，为每个数据添加 <code>getter</code> 和 <code>setter</code>。</li><li>依赖收集：<code>Watcher</code> 类在创建时，会调用 <code>get</code> 方法，在 <code>get</code> 方法中，会调用 <code>pushTarget</code> 将当前 <code>Watcher</code> 实例添加到 <code>Dep.target</code> 中，然后调用 <code>getter</code> 方法，在 <code>getter</code> 方法中，会调用 <code>Dep.depend</code> 方法，将当前 <code>Watcher</code> 实例添加到 <code>Dep</code> 的 <code>subs</code> 数组中。</li><li>依赖触发：当数据发生变化时，会调用 <code>setter</code> 方法，在 <code>setter</code> 方法中，会调用 <code>Dep.notify</code> 方法，遍历 <code>Dep</code> 的 <code>subs</code> 数组，调用每个 <code>Watcher</code> 实例的 <code>update</code> 方法，最终调用 <code>run</code> 方法，执行回调函数。</li></ol>`,8)]))}const g=i(l,[["render",p]]);export{E as __pageData,g as default};
