import{_ as i,c as a,o as n,b0 as e}from"./chunks/framework.CEggy_nf.js";const r=JSON.parse('{"title":"output","description":"","frontmatter":{"title":"output"},"headers":[],"relativePath":"engineer/webpack/3.output.md","filePath":"engineer/webpack/3.output.md","lastUpdated":1745141008000}'),h={name:"engineer/webpack/3.output.md"};function l(p,s,t,k,d,o){return n(),a("div",null,s[0]||(s[0]=[e(`<p><code>output</code> 用来配置 <code>webpack</code> 输出相关的内容。</p><h2 id="_1-path" tabindex="-1">1.path <a class="header-anchor" href="#_1-path" aria-label="Permalink to &quot;1.path&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>output.path</code> 用来配置文件输出到哪个目录里。一般都是会配置成项目根目录下的 <code>dist</code> 文件夹。</p><h2 id="_2-filename" tabindex="-1">2.filename <a class="header-anchor" href="#_2-filename" aria-label="Permalink to &quot;2.filename&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name].[hash:6].js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>output.filename</code> 用来配置输出文件的文件名。由于即使单页面应用，最终输出也可能是多个 <code>js</code> 文件（由于异步 <code>chunk</code> 或者公共 <code>chunk</code> 的存在）。</p><p>为了代码更好的组织，通常可以将这些 <code>js</code> 文件统一放到 <code>js</code> 目录下。代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 注意 不要把path改成path.resolve(__dirname, &#39;../dist/js&#39;) 这会导致输出目录变成&#39;dist/js&#39; 项目分离的图片和css等也会放在&#39;dist/js&#39;目录下了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // filename加上&#39;js/&#39;就可以</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js/[name].[hash:6].js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>下面说下<code>[name].[hash:6].js</code>的含义：</p><ul><li><code>name</code>:输出文件的<code>name</code>，默认是<code>main</code>，可以在<code>entry</code>的对象形式中指定，而字符串和数组形式则采用默认的<code>main</code>名。譬如：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // output =&gt; main.872e20.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src/start.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // output =&gt; main.872e20.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: [path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src/start.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src/entry.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // output =&gt; start.872e20.js  entry.872e20.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    start: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src/start.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src/entry.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p><code>hash:6</code>:<code>hash</code>会让<code>webpack</code>使用<code>hash</code>值，另外还可替换成<code>chunkhash</code>或者<code>contenthash</code>。<code>6</code>代表只取6位哈希值。</p></li><li><p><code>js</code>: 因为输出文件都是 <code>js</code> 文件，所以直接配置成 <code>js</code> 即可。如果文件后缀名称不确定，也可以使用<code>[ext]</code>占位。</p></li></ul><h2 id="_3-chunkfilename" tabindex="-1">3.chunkFilename <a class="header-anchor" href="#_3-chunkfilename" aria-label="Permalink to &quot;3.chunkFilename&quot;">​</a></h2><p><code>chunkFilename</code>可以用来定义<code>webpack</code>打包过程中公共<code>chunk</code>或者异步<code>chunk</code>的输出文件名。</p><p><code>webpack</code>当中有个术语，叫做<code>Code Spliting</code>。主要目的是将打包后的文件，譬如<code>main.js</code>，依据一定的规则（公共<code>chunk</code>或异步<code>chunk</code>）拆分成多个文件。这样有助于浏览器中的资源缓存，降低服务器压力，提升网站性能。</p><p>实现上述功能，旧版本<code>webpack</code>使用的是<code>CommonsChunkPlugin</code>。而<code>webpack4.0</code>使用的是<code>SplitChunksPlugin</code>。所幸的是，<code>webpack</code>已经内置了<code>SplitChunksPlugin</code>插件，无需我们再进行安装。我们只需要在<code>optimization.splitChunks</code>下配置规则即可。更加详细的介绍可见性能优化部分。</p><h2 id="ps-hash-vs-chunkhash-vs-contenthash" tabindex="-1">ps. hash vs chunkhash vs contenthash <a class="header-anchor" href="#ps-hash-vs-chunkhash-vs-contenthash" aria-label="Permalink to &quot;ps. hash vs chunkhash vs contenthash&quot;">​</a></h2><ul><li><code>hash</code> 与整个项目的构建有关。只要项目的文件更改，<code>hash</code> 就会改变。</li><li><code>chunkhash</code> 与 <code>webpack</code> 打包的 <code>chunk</code> 有关。只有当前 <code>chunk</code> 发生了改变，<code>chunkhash</code> 才会改变。</li><li><code>contenthash</code> 与文件本身内容有关。只有该文件的内容发生改变，<code>contenthash</code> 才会改变。</li></ul><p>之所以要有这3种哈希值，主要目的还是<strong>为了静态资源的缓存，提升网站性能</strong>。当浏览器发现文件名改变时，才会重新发起网络请求，否则都会直接去取浏览器缓存。</p><p>在 <code>webpack</code> 的实际构建中，很少直接使用 <code>hash</code>。因为 <code>hash</code> 会根据每次工程的内容进行计算，很容易造成不必要的 <code>hash</code> 变更，不利于版本管理。以下面的代码来说明其他两种哈希值的使用场景。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 针对于输出文件，我们使用chunkhash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js/[name].[chunkhash:6].js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunkFilename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js/[name].[chunkhash:6].js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 此hash不是我们讨论的三种哈希中的hash 它是loader自带的hash定义 会根据文件内容来生成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image/[name].[hash:6].[ext]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 对于css文件来说，一般会使用MiniCssExtractPlugin将其抽取为一个单独的css文件。此时可以使用contenthash进行标记，确保css文件内容变化时，可以更新hash。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MiniCssExtractPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css/[name].[contenthash:6].css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunkFilename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css/[name].[contenthash:6].css&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>值得注意的是，上面代码中的 <code>loader</code> 使用了 <code>hash</code> 来配置文件名。但是此哈希并不是我们说的 <code>hash</code>。</p><p><code>file-loader</code> 或者 <code>url-loader</code>的 <code>hash</code> 字段，它是该 <code>loader</code> 自己定义的占位符，和 <code>webpack</code> 的内置 <code>hash</code> 字段并不一致。<code>loader</code> 里的 <code>hash</code> 是使用 <code>md4</code> 等 <code>hash</code> 算法，对文件内容进行 <code>hash</code>。所以只要文件内容不变，<code>hash</code> 还是会保持一致。</p><p>相关参考链接：<a href="https://cloud.tencent.com/developer/article/1642029" target="_blank" rel="noreferrer">黄腾霄的博客</a>与<a href="https://zh.bccrwp.org/compare/hash-vs-chunkhash-vs-contenthash-4823e6/" target="_blank" rel="noreferrer">zh.bccrwp.org</a></p><h2 id="_4-publicpath" tabindex="-1">4.publicPath <a class="header-anchor" href="#_4-publicpath" aria-label="Permalink to &quot;4.publicPath&quot;">​</a></h2><p><code>output</code> 中的 <code>publicPath</code> 指定了在部署时静态资源的引用位置。默认值是空字符串<code>&#39;&#39;</code>。<strong>不过大多数封装的脚手架都会默认设置为<code>/</code></strong>。</p><p>说一个例子，来解释下不同之处。譬如现在要将打包好的 <code>dist</code> 部署到 <code>jsgoshu.cn/demo/</code> 这个地址下。</p><ul><li><p><code>publicPath: &#39;/&#39;</code>。这个设置打包出来的资源路径是这样的：<code>/static/js/demo.js</code>。实际的访问路径是：<code>jsgoshu.cn/static/js/demo.js</code>。 很明显，资源是访问不到的，会报<code>404</code>。</p></li><li><p><code>publicPath: &#39;/demo/&#39;</code>。这种方式可以解决上面 <code>404</code> 的问题，因为实际的访问路径会是 <code>jsgoshu.cn/demo/static/js/demo.js</code>。</p></li><li><p><code>publicPath: &#39;&#39;</code>。这种方式会是相对路径。打包的资源路径是 <code>static/js/demo.js</code>。部署到服务器后，访问路径是 <code>jsgoshu.cn/demo/static/js/demo.js</code>。<code>publicPath: &#39;./&#39;</code> 与 <code>publicPath: &#39;&#39;</code> 效果一致。</p></li></ul><p>总结下，<code>publicPath: &#39;&#39;</code>是百搭的，无需纠结项目具体要部署到<strong>根目录</strong>还是<strong>子级目录</strong>。<code>publicPath: &#39;/&#39;</code> 可以将项目部署到<strong>根目录</strong>。<code>publicPath: &#39;/demo/&#39;</code>等类似配置则是可以将项目部署到<strong>对应的子级目录</strong>。</p><h2 id="_5-crossoriginloading" tabindex="-1">5.crossOriginLoading <a class="header-anchor" href="#_5-crossoriginloading" aria-label="Permalink to &quot;5.crossOriginLoading&quot;">​</a></h2><p><code>crossOriginLoading</code>是跟异步<code>chunk</code>相关的内容。异步 <code>chunk</code> 的原理是使用了 <code>JSONP</code>。而 <code>crossOriginLoading</code> 则是用来配置相应的<code>script</code> 标签上是否需要有 <code>crossorigin</code> 属性。可设置的值如下：</p><ul><li><code>&#39;anonymous&#39;</code>: <strong>不带凭据(credential)</strong> 启用跨域加载。</li><li><code>&#39;use-credential&#39;</code>: <strong>携带凭据(credential)</strong> 启用跨域加载。</li></ul><p>最后简单介绍下<code>crossorigin</code>属性，它主要是为了给某些 <code>html</code> 标签无限制加载其他资源提供验证功能，譬如我们都知道 <code>script</code> 与 <code>img</code> 标签加载跨域资源是不受限制的，但某些场景会受到浏览器的限制，这就需要提供 <code>CORS</code> 的验证机制以验证资源本身是允许跨域的。</p><ul><li><code>script</code>: 如果 <code>script</code> 标签加载的 <code>js</code> 资源是跨域，那么当加载的 <code>js</code> 文件有报错时，浏览器是不会明确提示你具体的报错信息。除非在 <code>script</code>标签上加上 <code>crossorigin</code>，而且 <code>js</code> 文件确实配置了 <code>Allow-Control-Access-Origin</code> 等 <code>CORS</code> 验证。</li><li><code>img</code>: <code>img</code> 标签也能加载跨域图片（当然是没做防盗链的图片）。但是假如使用 <code>canvas</code> 绘制跨域图片时，如果使用 <code>toBlob</code> 或者 <code>toDataURL</code>，就会失败。解决办法同上。更详细的内容可以看我这篇<a href="./../../FE/html5/5.graphic#_8-绘制图片image">文章</a></li></ul><h2 id="_6-library" tabindex="-1">6.library <a class="header-anchor" href="#_6-library" aria-label="Permalink to &quot;6.library&quot;">​</a></h2><p>如果你想要把输出文件作为 <code>npm</code> 包发布，那么就可以用该配置项来确定输出文件的<strong>导出值</strong>。</p><p>假设 <code>output</code> 的 <code>library</code> 设置为 <code>myLibrary</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    library: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myLibrary&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在入口文件 <code>main.js</code> 中使用了下边的语法导出：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  alpha: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;export default--message&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> beta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;export--message&#39;</span></span></code></pre></div><p>由于 <code>libraryTarget</code> 的默认值为 <code>var</code>，变量 <code>myLibrary</code> 会暴露在全局。所以利用 <code>script</code> 标签加载，打印下<code>myLibrary</code>，结果如下： <img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/0081Kckwly1gkq7dlr6c6j32kc08q40o.jpg" alt="" loading="lazy"></p><p>如果入口文件 <code>main.js</code> 没有返回值，即 <code>_entry_return_</code> 为 <code>undefined</code>，同样打印下 <code>myLibrary</code>，结果如下： <img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/0081Kckwly1gkq7fvc7xqj32ka040jsg.jpg" alt="" loading="lazy"></p><h2 id="_7-libraryexport" tabindex="-1">7.libraryExport <a class="header-anchor" href="#_7-libraryexport" aria-label="Permalink to &quot;7.libraryExport&quot;">​</a></h2><p>根据上例，可以看到原始导出下的 <code>_entry_return_</code> 的数据结构不够友好。</p><p>在使用的时候还需要利用对象结构寻找实际要的属性。那么 <code>libraryTarget</code> 可以用来解决这个问题的。</p><p>默认值为<code>_entry_return_</code>（符合上例）。根据设置的值不同，其实际导出的值也会有所区别。</p><ul><li><code>libraryExport: default</code>: <code>_entry_return_.default</code>。会是上例中的<code>{ alpha: &quot;export default--message&quot; }</code>。</li><li><code>libraryExport: beta</code>: <code>_entry_return_.beta</code>。会是上例中的<code>export--message</code>。</li><li><code>libraryExport: [&#39;MyModule&#39;, &#39;MySubModule&#39;]</code>: <code>_entry_return_.MyModule</code> 及 <code>_entry_return_.MySubModule</code>。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong><code>libraryExport</code> 的默认设置是 <code>undefined</code>，在这种情况下，会兼容 <code>export default</code> 与 <code>export</code> 两种语法</strong>。</p><p>因此，在实际使用过程中，可以根据仓库目的，选择不同的 <code>libraryExport</code> 配置。</p></div><h2 id="_8-librarytarget" tabindex="-1">8.libraryTarget <a class="header-anchor" href="#_8-librarytarget" aria-label="Permalink to &quot;8.libraryTarget&quot;">​</a></h2><p>配置如何暴露 <code>library</code>。假设 <code>library</code> 设置为 <code>myLibrary</code>，常用可配置值及其对应作用如下：</p><ul><li><p><code>var</code>: 默认值。会将 <code>myLibrary</code> 设置为全局变量，<strong>浏览器环境下</strong>可利用 <code>script</code> 标签引入使用。也可在 <code>node</code> 环境下使用。</p></li><li><p><code>window</code>: 将 <code>myLibrary</code> 分配给全局 <code>window</code> 下。<code>window.myLibrary</code>。</p></li><li><p><code>this</code>: 将 <code>myLibrary</code> 分配给实际执行时的 <code>this</code>。例如 <code>AMD</code> 模块化、<code>CMD</code> 模块化或者 <code>node</code> 环境下，<code>this</code> 不一定是 <code>window</code>。</p></li><li><p><code>global</code>: 将 <code>myLibrary</code> 分配给全局 <code>global</code> 下。</p></li><li><p><code>commonjs</code>: <code>commonJs 1.0</code>版本的规范。<code>exports[&quot;myLibrary&quot;] = _entry_return_</code>。</p></li><li><p><code>commonjs2</code>: <code>commonJs 2.0</code>版本的规范。<code>module.exports = _entry_return_</code>。</p></li><li><p><code>amd</code>: <code>AMD</code> 模块化规范。需要 <code>require.js</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myLibrary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _entry_return_; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此模块返回值，是入口 chunk 返回的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myLibrary&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MyLibrary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用 library 做一些事……</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li><li><p><code>umd</code>: 将 <code>myLibrary</code> 暴露为所有的模块定义下都可运行的方式。它将在 <code>CommonJS</code>、 <code>AMD</code> 环境下运行，或将模块导出到 <code>global</code> 下的变量。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> webpackUniversalModuleDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> define </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> define.amd) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([], factory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myLibrary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    root[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myLibrary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _entry_return_; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此模块返回值，是入口 chunk 返回的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul>`,52)]))}const E=i(h,[["render",l]]);export{r as __pageData,E as default};
