import{_ as e,o as d,c as l,b0 as n}from"./chunks/framework.DDuwZS-e.js";const g=JSON.parse('{"title":"浮点数","description":"","frontmatter":{"title":"浮点数"},"headers":[],"relativePath":"cs/digit/2.float-point.md","filePath":"cs/digit/2.float-point.md","lastUpdated":1737636722000}'),c={name:"cs/digit/2.float-point.md"};function a(o,t,r,i,s,p){return d(),l("div",null,t[0]||(t[0]=[n('<h2 id="_1-科学计数法" tabindex="-1">1.科学计数法 <a class="header-anchor" href="#_1-科学计数法" aria-label="Permalink to &quot;1.科学计数法&quot;">​</a></h2><p><code>scientific-notation</code></p><p>维基百科对于科学计数法的定义：</p><blockquote><p>一个数被写成一个尾数M与10的E次幂的积。</p></blockquote><p>譬如：<code>N = M * 10^E</code></p><p>整个表达式由尾数、基数、指数组成。</p><ul><li><p>尾数指的是 <code>Mantissa</code>，简写为 <code>M</code>。</p></li><li><p>基数指的是 <code>10</code>，因为这里讨论是十进制。</p></li><li><p>指数指的是 <code>Exponent</code>，简写为 <code>E</code>。</p></li></ul><p>与其说是科学计数法 不如说是科学计位法。</p><p>维基百科或者百度百科对于科学计数法都是以十进制为例，但其实科学记数法也支持使用二进制。</p><p>十进制的 <code>89089</code> 可以写成 <code>8.9089 * 10^4</code>。</p><p>在数学角度，我们通常会把 <code>8.9089 * 10^4</code> 看做 <code>8.9089</code> 乘以 <code>10000</code>。得到的结果确实是正确的。</p><p>但我们应该这样看待科学计数法：<code>10^4</code> 代表的是<strong>十进制下小数点向右移动4位</strong>。</p><p>因为二进制下 <code>11011</code> 的科学记数法是 <code>1.1011 * 2^4</code>。</p><p>很明显，这时不能再将 <code>1.1011 * 2^4</code> 看做 <code>1.1011</code> 乘以 <code>16</code>。得到的结果肯定是错误的。</p><p>我们应该将 <code>2^4</code> 看做二进制下小数点向右移动4位。</p><p>所以我们要认识到的一点是，<strong>科学记数法的根本在于改变了小数点位数</strong>，使得数字更通俗易看。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>总结：</p><p>科学记数法的根本在于改变了小数点位数。</p><p>另外科学计数法的表达式由三部分组成：</p><ul><li>尾数 <code>Matissa</code></li><li>基数 <code>Base</code></li><li>指数 <code>Exponent</code></li></ul></div><h2 id="_2-二进制转化十进制" tabindex="-1">2.二进制转化十进制 <a class="header-anchor" href="#_2-二进制转化十进制" aria-label="Permalink to &quot;2.二进制转化十进制&quot;">​</a></h2><p>因为二进制转化十进制的方式比较简单，所以我们优先叙述这部分。</p><h3 id="_2-1-整数二进制" tabindex="-1">2-1.整数二进制 <a class="header-anchor" href="#_2-1-整数二进制" aria-label="Permalink to &quot;2-1.整数二进制&quot;">​</a></h3><p>将二进制 <code>11011</code> 转化为十进制：</p><p><code>1*2^4 + 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 27</code></p><h3 id="_2-2-小数二进制" tabindex="-1">2-2.小数二进制 <a class="header-anchor" href="#_2-2-小数二进制" aria-label="Permalink to &quot;2-2.小数二进制&quot;">​</a></h3><p>将二进制 <code>1.1011</code> 转化为十进制：</p><p><code>1*2^0 + 1*2^(-1) + 0*2^(-2) + 1*2^(-3) + 1*2^(-4) = 1.6875</code></p><p>这里有一个网站<a href="https://baseconvert.com/" target="_blank" rel="noreferrer">baseconvert.com</a>，它支持将二进制转化成其他进制。可以对比检测结果。</p><h2 id="_3-十进制转化二进制" tabindex="-1">3.十进制转化二进制 <a class="header-anchor" href="#_3-十进制转化二进制" aria-label="Permalink to &quot;3.十进制转化二进制&quot;">​</a></h2><h3 id="_3-1-整数十进制" tabindex="-1">3-1.整数十进制 <a class="header-anchor" href="#_3-1-整数十进制" aria-label="Permalink to &quot;3-1.整数十进制&quot;">​</a></h3><p>口诀：<strong>除二取余，逆序排列</strong>。</p><p>以整数 <code>1019</code> 为例：</p><table tabindex="0"><thead><tr><th style="text-align:center;">被除数</th><th style="text-align:center;">除数</th><th style="text-align:center;">商</th><th style="text-align:center;">余数</th></tr></thead><tbody><tr><td style="text-align:center;">1019</td><td style="text-align:center;">2</td><td style="text-align:center;">509</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">509</td><td style="text-align:center;">2</td><td style="text-align:center;">254</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">254</td><td style="text-align:center;">2</td><td style="text-align:center;">127</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">127</td><td style="text-align:center;">2</td><td style="text-align:center;">63</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">63</td><td style="text-align:center;">2</td><td style="text-align:center;">31</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">31</td><td style="text-align:center;">2</td><td style="text-align:center;">15</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;">2</td><td style="text-align:center;">7</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">2</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr></tbody></table><p>所以十进制 <code>1019</code>转化成二进制，就是 <code>111111011</code>。</p><h3 id="_3-2-小数十进制" tabindex="-1">3-2.小数十进制 <a class="header-anchor" href="#_3-2-小数十进制" aria-label="Permalink to &quot;3-2.小数十进制&quot;">​</a></h3><p>口诀：<strong>乘二取整，顺序排列</strong>。</p><p>以小数 <code>1.125</code> 为例：</p><p>我们需要将整数部分和小数部分单独计算。</p><p>由于 <code>1.125</code> 的整数部分是 <code>1</code>，<code>1</code>转化为二进制的话就是 <code>1</code>。</p><p>所以我们直接计算 <code>0.125</code>即可。</p><table tabindex="0"><thead><tr><th style="text-align:center;">被乘数</th><th style="text-align:center;">乘数</th><th style="text-align:center;">积</th><th style="text-align:center;">整数</th></tr></thead><tbody><tr><td style="text-align:center;">0.125</td><td style="text-align:center;">2</td><td style="text-align:center;">0.25</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">0.25</td><td style="text-align:center;">2</td><td style="text-align:center;">0.5</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">0.5</td><td style="text-align:center;">2</td><td style="text-align:center;">1.0</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">0</td><td style="text-align:center;">2</td><td style="text-align:center;">0</td><td style="text-align:center;">0（后续计算已经无意义了...）</td></tr></tbody></table><p>所以 <code>0.125</code>转化为二进制为：<code>.001</code></p><p>再加上整数部分的二进制，那么<code>1.125</code>转化为二进制就是 <code>1.001</code>。</p>',41)]))}const y=e(c,[["render",a]]);export{g as __pageData,y as default};
