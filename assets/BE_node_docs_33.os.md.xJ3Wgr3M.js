import{_ as i,c as e,o as l,b1 as a}from"./chunks/framework.BbHYEPU-.js";const E=JSON.parse('{"title":"33.os","description":"","frontmatter":{"title":"33.os"},"headers":[],"relativePath":"BE/node/docs/33.os.md","filePath":"BE/node/docs/33.os.md","lastUpdated":1752754176000}'),o={name:"BE/node/docs/33.os.md"};function d(t,s,n,h,k,p){return l(),e("div",null,s[0]||(s[0]=[a(`<p><code>Operate System</code></p><p><code>Node.js</code> 的 <code>os</code> 模块提供了一些与操作系统相关的实用函数，可以用来获取系统信息和与系统交互。</p><ol><li>系统信息:</li></ol><ul><li><code>os.arch()</code>: 返回操作系统的 <code>CPU</code> 架构，例如 <code>x64</code>、<code>arm</code> 等。</li><li><code>os.platform()</code>: 返回 <code>Node.js</code> 编译时的操作系统平台，例如 <code>darwin</code>、<code>win32</code>、<code>linux</code> 等。</li><li><code>os.type()</code>: 返回操作系统名称，例如 <code>Linux</code>、<code>Windows_NT</code>、<code>Darwin</code>。</li><li><code>os.release()</code>: 返回操作系统的版本号。</li><li><code>os.uptime()</code>: 返回系统的运行时间，以秒为单位。</li></ul><ol start="2"><li>内存信息:</li></ol><ul><li><code>os.totalmem()</code>: 返回系统总内存，以字节为单位。</li><li><code>os.freemem()</code>: 返回系统空闲内存，以字节为单位。</li><li><code>os.loadavg()</code>: 返回一个数组，表示系统的 <code>1</code> 分钟、<code>5</code> 分钟和 <code>15</code> 分钟的平均负载（只适用于类 <code>Unix</code> 系统）。</li></ul><ol start="3"><li>用户信息:</li></ol><ul><li><code>os.userInfo()</code>: 返回当前用户的信息对象，包含用户名、主目录路径、<code>Shell</code> 等信息。</li><li><code>os.homedir()</code>: 返回当前用户的主目录路径。</li><li><code>os.hostname()</code>: 返回操作系统的主机名。</li></ul><ol start="4"><li>网络接口:</li></ol><ul><li><code>os.networkInterfaces()</code>: 返回一个包含每个网络接口的详细信息的对象。可以用来获取网络 <code>IP</code> 地址、<code>MAC</code> 地址等。</li></ul><ol start="5"><li><code>CPU</code> 信息:</li></ol><ul><li><code>os.cpus()</code>: 返回一个包含每个逻辑 <code>CPU</code> 内核信息的数组，信息包括型号、速度（<code>MHz</code>）和时间使用情况。</li><li><code>os.endianness()</code>: 返回系统的字节序，可能的值为 <code>BE</code>（大端）或 <code>LE</code>（小端）。</li></ul><ol start="6"><li>文件路径信息:</li></ol><ul><li><code>os.tmpdir()</code>: 返回操作系统默认的临时文件目录。</li></ul><ol start="7"><li>系统优先级:</li></ol><ul><li><code>os.setPriority()</code> 和 <code>os.getPriority()</code>: 设置和获取指定进程的优先级。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;os&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;操作系统平台:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;系统总内存:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalmem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;空闲内存:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freemem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CPU信息:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;网络接口:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">networkInterfaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div>`,17)]))}const r=i(o,[["render",d]]);export{E as __pageData,r as default};
