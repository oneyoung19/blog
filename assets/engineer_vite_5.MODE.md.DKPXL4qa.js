import{_ as e,o as a,c as i,b0 as t}from"./chunks/framework.DDuwZS-e.js";const k=JSON.parse('{"title":"5.环境变量与模式","description":"","frontmatter":{"title":"5.环境变量与模式"},"headers":[],"relativePath":"engineer/vite/5.MODE.md","filePath":"engineer/vite/5.MODE.md","lastUpdated":1737702697000}'),n={name:"engineer/vite/5.MODE.md"};function p(l,s,d,o,h,c){return a(),i("div",null,s[0]||(s[0]=[t(`<h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p><code>Vite</code> 在一个特殊的 <code>import.meta.env</code> 对象上暴露环境变量。</p><p>这里有一些在所有情况下都可以使用的内建变量：</p><ul><li><p><code>import.meta.env.MODE</code> 应用运行的模式</p></li><li><p><code>import.meta.env.BASE_URL</code> 部署应用时的基本 <code>URL</code></p></li><li><p><code>import.meta.env.DEV</code> 应用是否运行在开发环境</p></li><li><p><code>import.meta.env.PROD</code> 应用是否运行在生产环境</p></li><li><p><code>import.meta.env.SSR</code> 应用是否运行在 <code>server</code> 上</p></li></ul><h2 id="env文件" tabindex="-1">.env文件 <a class="header-anchor" href="#env文件" aria-label="Permalink to &quot;.env文件&quot;">​</a></h2><p><code>Vite</code> 使用 <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noreferrer">dotenv</a> 从环境目录中的下列文件，加载额外的环境变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.env                # 所有情况下都会加载</span></span>
<span class="line"><span>.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span>.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span>.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre></div><p>加载的环境变量会通过 <code>import.meta.env</code> 以字符串形式暴露给客户端源码。</p><p><strong>只有以 <code>VITE_</code> 为前缀的变量才会暴露给经过 <code>vite</code> 处理的代码</strong>。</p><p>例如下面这些环境变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>VITE_SOME_KEY=123</span></span>
<span class="line"><span>DB_PASSWORD=foobar</span></span></code></pre></div><p>只有 <code>VITE_SOME_KEY</code> 会被暴露为 <code>import.meta.env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</p><h2 id="html-环境变量替换" tabindex="-1">HTML 环境变量替换 <a class="header-anchor" href="#html-环境变量替换" aria-label="Permalink to &quot;HTML 环境变量替换&quot;">​</a></h2><p><code>import.meta.env</code> 中的任何属性都可以通过特殊的 <code>%ENV_NAME%</code> 语法在 <code>HTML</code> 文件中使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Vite is running in %MODE%&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Using data from %VITE_API_URL%&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h2><p>默认情况下，开发服务器 (<code>dev</code> 命令) 运行在 <code>development</code> (开发) 模式，而 <code>build</code> 命令则运行在 <code>production</code> (生产) 模式。</p><p>这意味着当执行 <code>vite build</code> 时，它会自动加载 <code>.env.production</code> 中可能存在的环境变量：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .env.production</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VITE_APP_TITLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">My</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span></span></code></pre></div><p>在某些情况下，若想在 <code>vite build</code> 时运行不同的模式来渲染不同的标题，你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。</p><p>譬如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> staging</span></span></code></pre></div><p>此时对应的执行文件为：<code>.env.staging</code>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .env.staging</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VITE_APP_TITLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">My</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (staging)</span></span></code></pre></div>`,24)]))}const g=e(n,[["render",p]]);export{k as __pageData,g as default};
