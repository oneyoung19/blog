import{_ as i,c as a,o as e,b0 as t}from"./chunks/framework.Ctc7-3V1.js";const c=JSON.parse('{"title":"Buffer","description":"","frontmatter":{"title":"Buffer"},"headers":[],"relativePath":"BE/node/docs/4.buffer.md","filePath":"BE/node/docs/4.buffer.md","lastUpdated":1748085908000}'),n={name:"BE/node/docs/4.buffer.md"};function l(h,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[t(`<p>在 <code>Node.js</code> 中，<code>Buffer</code> 是一个用于处理二进制数据的类。</p><p>由于 <code>JavaScript</code> 的原生类型只能处理字符串（基于 <code>UTF-16</code>），<code>Buffer</code> 类应运而生，用于在处理文件、网络通信、加密等场景中高效地操作二进制数据。</p><ul><li><strong>定长且不可变</strong>: 一旦创建，<code>Buffer</code> 的长度是固定的，不能动态调整。</li><li><strong>高效的二进制数据操作</strong>: <code>Buffer</code> 提供了一系列方法，能够高效地读写二进制数据。</li><li><strong>多种编码支持</strong>: 可以将数据编码为多种不同的格式，如 <code>UTF-8</code>、<code>Base64</code>、<code>Hex</code> 等。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([buf1, buf2])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &quot;HelloWorld&quot;</span></span></code></pre></div>`,4)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
