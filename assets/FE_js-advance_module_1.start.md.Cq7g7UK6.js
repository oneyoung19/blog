import{_ as o,o as d,c,b0 as l}from"./chunks/framework.CkgpWotD.js";const t="/blog/assets/module.history.drawio.DPFrbYmK.png",S=JSON.parse('{"title":"1.简介","description":"","frontmatter":{"title":"1.简介"},"headers":[],"relativePath":"FE/js-advance/module/1.start.md","filePath":"FE/js-advance/module/1.start.md","lastUpdated":1737464486000}'),i={name:"FE/js-advance/module/1.start.md"};function p(r,e,a,s,n,m){return d(),c("div",null,e[0]||(e[0]=[l('<p>前端模块化的作用有两个：</p><ol><li>不污染全局变量。</li><li>更好的组织和维护代码模块之间的关系。</li></ol><p>由于 <code>JavaScript</code> 刚开始时，都是利用 <code>var</code> 语法声明变量。</p><p>而 <code>var</code> 声明的属性则有可能污染全局变量 <code>window</code>（函数作用域内的 <code>var</code> 除外）。</p><p>由此，解决办法就是 <code>IIFE</code>（<strong>立即执行函数</strong>）。</p><p>另外，在前端工程化概念未普及的时代，我们在开发时，通常是利用 <code>&lt;script&gt;</code> 标签来引入 <code>JavaScript</code>。</p><p>但这样做有两个弊端：</p><ol><li>需要严格控制 <code>script</code> 的引用顺序。</li><li><code>&lt;script&gt;</code> 默认同步加载，不利于页面渲染。</li></ol><p>在这种情况下，衍生出了许多模块化标准：</p><ul><li><code>CommonJS</code></li><li><code>AMD</code></li><li><code>CMD</code></li><li><code>UMD</code></li><li><code>EsModule</code></li></ul><p>在谈论具体的模块化规范之前，我们先梳理下<strong>模块化规范的历史</strong>。</p><p>前端模块化的诞生，最早要追溯到 <code>Node</code> 的出现。</p><ol><li><p><code>Node</code> 的模块化规范刚开始命名为 <code>ServerJS</code>，后来社区想要根据 <code>ServerJS</code> 一统浏览器端和服务端的模块规范，更名为了 <code>CommonJS</code>。</p></li><li><p>但在这段进展中，有人觉得浏览器端有其本身的特性，应该据此设计新的模块规范 <code>AMD</code>，这一规范的标准产物是 <code>RequireJS</code>。</p></li><li><p>而后第三方库里，为了兼容 <code>CommonJS</code> 和 <code>AMD</code> 这两种规范，使用了 <code>UMD</code>。</p></li><li><p>还有一部分同学，觉得应该讲浏览器端的特性及 <code>CommonJS</code> 规范相结合，从而有了 <code>CMD</code> 规范，这一规范的标准产物是 <code>SeaJS</code>。</p></li><li><p>但 <code>CMD</code> 的推广做的并不好，所以导致在实际应用和社区支持上远远比不上 <code>AMD</code> 和 <code>CommonJS</code>。</p></li><li><p>而后，打包工具大行其是，前端工程化开始流行。即模块引用在开发时做好，构建过程中分析依赖，注入生产。标准产物是 <code>webpack</code> 和 <code>browserify</code>。</p></li><li><p>如今，在 <code>Es6</code> 中提供了新语法 <code>EsModule</code>，浏览器端也逐渐开始直接支持 <code>Module Script</code>。标准产物是 <code>Vite</code>。</p></li></ol><p><img src="'+t+'" alt="" loading="lazy"></p><p>参考文章：</p><ul><li><p><a href="https://github.com/seajs/seajs/issues/588" target="_blank" rel="noreferrer">前端模块化开发那点历史</a></p></li><li><p><a href="http://huangxuan.me/js-module-7day/#/" target="_blank" rel="noreferrer">JavaScript 模块化七日谈</a></p></li></ul>',16)]))}const g=o(i,[["render",p]]);export{S as __pageData,g as default};
