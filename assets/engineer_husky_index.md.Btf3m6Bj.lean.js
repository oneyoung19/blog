import{_ as i,o as s,c as o,aP as a}from"./chunks/framework.D1yHhm2y.js";const k=JSON.parse('{"title":"Husky","description":"","frontmatter":{"title":"Husky"},"headers":[],"relativePath":"engineer/husky/index.md","filePath":"engineer/husky/index.md","lastUpdated":1735964775000}'),t={name:"engineer/husky/index.md"};function c(d,e,n,l,p,h){return s(),o("div",null,e[0]||(e[0]=[a(`<p>本章主要说明结合了 <code>Git Hooks</code> 与 <code>NPM Hooks</code> 的 <code>husky</code> 仓库。</p><p>以实现在 <code>git commit</code> 操作时对代码进行 <code>lint-staged</code> 操作。</p><h2 id="_1-yorkie-husky" tabindex="-1">1.yorkie &amp; husky <a class="header-anchor" href="#_1-yorkie-husky" aria-label="Permalink to &quot;1.yorkie &amp; husky&quot;">​</a></h2><h3 id="_1-1-yorkie" tabindex="-1">1-1.yorkie <a class="header-anchor" href="#_1-1-yorkie" aria-label="Permalink to &quot;1-1.yorkie&quot;">​</a></h3><p><code>yorkie</code> 是 <code>fork</code> 自 <code>husky</code> 的项目。目前较新版本是<a href="https://www.npmjs.com/package/yorkie" target="_blank" rel="noreferrer">yorkie@2.0.0</a></p><ol><li><p>项目中执行 <code>git init</code>，以支持 <code>yorkie</code> 在 <code>.git/hooks</code> 目录下创建 <code>hooks</code> 文件。</p></li><li><p>它内置了 <code>install</code> 生命周期钩子，在安装该依赖包时，会自动在 <code>.git/hooks</code> 目录下注册所有可用 <code>hooks</code>。</p></li><li><p>用户在使用时，需要在 <code>package.json</code> 中定制化声明 <code>Git Hooks</code>，譬如：</p></li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;gitHooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;pre-commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lint-staged&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;*.{js,jsx,vue}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-cli-service lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样，在执行 <code>git commit</code> 时，就会触发 <code>pre-commit</code> 钩子。</p><p><strong><em>要注意的的一点，由于 <code>yorkie</code> 依赖 <code>.git</code> 目录，所以在安装 <code>yorkie</code> 之前，最好保证当前项目目录已经执行 <code>git init</code> 命令，创建了 <code>.git</code> 目录</em></strong>。</p><p>如果说，先安装了 <code>yorkie</code>，后执行了 <code>git init</code>。那么你可以手动执行 <code>yorkie</code> 的 <code>bin/install.js</code> 文件进行补救：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node_modules/yorkie/bin/install.js&quot;</span></span></code></pre></div><h3 id="_1-2-husky" tabindex="-1">1-2.husky <a class="header-anchor" href="#_1-2-husky" aria-label="Permalink to &quot;1-2.husky&quot;">​</a></h3><p>较新版本的<a href="https://typicode.github.io/husky/" target="_blank" rel="noreferrer">husky</a> 已经<a href="https://blog.typicode.com/husky-git-hooks-autoinstall/" target="_blank" rel="noreferrer">不推荐 <code>autoinstall</code></a>。</p><p>譬如笔者在测试中使用的版本是<a href="https://www.npmjs.com/package/husky" target="_blank" rel="noreferrer">husky@^8.0.3</a>。</p><p>新版本的 <code>husky</code> 使用方式有两种：</p><ol><li><p>第一种是利用 <code>npx husky-init</code></p></li><li><p>第二种是手动安装 <code>husky</code>，然后配置 <code>Git Hooks</code>。</p></li></ol><p>详见<a href="https://typicode.github.io/husky/getting-started.html" target="_blank" rel="noreferrer">安装husky</a></p><p>安装完成后，执行 <code>git config -l</code> 会发现 <code>core.hookspath=.husky</code>。</p><p>如果要卸载 <code>husky</code> 的话，执行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.hooksPath</span></span></code></pre></div><p>然后你可以根据实际需求，抉择是否删除 <code>.husky</code> 目录：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky</span></span></code></pre></div><p><strong><em><code>husky</code> 根据 <code>git</code> 提供的 <code>core.hooksPath</code> 创建了 <code>.husky</code> 目录，不再依赖 <code>.git</code> 目录</em></strong>。</p><p><strong><em>但由于映射关系的存在，同样需要先利用 <code>git init</code> 创建 <code>.git</code> 目录</em></strong>。</p><h2 id="_2-yorkie-of-vue-cli" tabindex="-1">2.yorkie of vue-cli <a class="header-anchor" href="#_2-yorkie-of-vue-cli" aria-label="Permalink to &quot;2.yorkie of vue-cli&quot;">​</a></h2><p><strong><code>yorkie</code> 是 <code>fork</code> 自 <code>husky</code>，在安装时，会 <code>autoinstall</code>。</strong></p><p>假设 <code>vue-app-git</code> 和 <code>vue-app-not-git</code> 都是利用 <code>vue create</code> 创建的项目。</p><p>二者的唯一区别是，<code>vue-app-git</code> 是在本机检测有 <code>git</code> 的情况下安装的，而 <code>vue-app-not-git</code> 则是在本机检测没有 <code>git</code> 的情况下安装的。</p><p>上述区别是通过更改全局包 <code>@vue/cli-shared-utils</code> 中的 <code>hasGit</code> 函数返回值实现的。</p><p><code>vue-app-git</code> 和 <code>vue-app-not-git</code> 都是选择了 <code>lint on commit</code>，但实际执行，会发现：</p><ol><li><code>vue-app-git</code> 的 <code>git commit</code> 会触发检测。</li><li><code>vue-app-not-git</code> 的 <code>git commit</code> 则不会触发检测。</li></ol><p>这是因为当 <code>yorkie</code> 在安装会自动执行，但在 <code>vue-app-not-git</code> 下没有找到 <code>.git</code> 目录，也就无法在 <code>.git/hooks</code> 下注入执行脚本。</p><h2 id="_3-notes" tabindex="-1">3.Notes <a class="header-anchor" href="#_3-notes" aria-label="Permalink to &quot;3.Notes&quot;">​</a></h2><h3 id="_3-1-prepare" tabindex="-1">3-1.prepare <a class="header-anchor" href="#_3-1-prepare" aria-label="Permalink to &quot;3-1.prepare&quot;">​</a></h3><p>在 <code>scripts</code> 下定义了 <code>prepare</code> 生命周期钩子。</p><p>但利用 <code>yarn add yorkie -D</code> 时，<code>prepare</code> 会触发，而 <code>npm install yorkie --save-dev</code> 并不会触发。</p><p>执行 <code>npm install</code> 会触发 <code>prepare</code> 生命周期钩子。</p><h3 id="_3-2-install-uninstall" tabindex="-1">3-2.install &amp; uninstall <a class="header-anchor" href="#_3-2-install-uninstall" aria-label="Permalink to &quot;3-2.install &amp; uninstall&quot;">​</a></h3><p>在 <code>scripts</code> 下定义了 <code>install</code> 和 <code>uninstall</code>。</p><p>但为什么触发 <code>install</code> 和 <code>uninstall</code> 时，并没有打印 <code>node bin/install.js</code> 中的 <code>console</code> 呢?</p><p>答案是<a href="https://docs.npmjs.com/cli/v10/using-npm/scripts#a-note-on-a-lack-of-npm-uninstall-scripts" target="_blank" rel="noreferrer">与 <code>npm</code> 版本相关</a>。</p><p>测试了下，<code>pnpm@7.33.6</code> 在安装或者卸载包时，不会触发 <code>install</code> 或 <code>uninstall</code> 生命周期钩子。</p><p>因此 <code>vue-app-git-pnpm</code> 目录下的 <code>git commit</code> 不会触发 <code>pre-commit</code> 钩子。</p><h2 id="_4-npm-life-cycle-scripts" tabindex="-1">4.NPM Life Cycle Scripts <a class="header-anchor" href="#_4-npm-life-cycle-scripts" aria-label="Permalink to &quot;4.NPM Life Cycle Scripts&quot;">​</a></h2><p>查看 <code>NPM</code> 支持的生命周期钩子：<a href="https://docs.npmjs.com/cli/v10/using-npm/scripts#life-cycle-scripts" target="_blank" rel="noreferrer">life-cycle-scripts</a></p><h2 id="_5-git-hooks" tabindex="-1">5.Git Hooks <a class="header-anchor" href="#_5-git-hooks" aria-label="Permalink to &quot;5.Git Hooks&quot;">​</a></h2><p>查看 <code>Git</code> 支持的钩子：<a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">Git Hooks</a></p>`,47)]))}const u=i(t,[["render",c]]);export{k as __pageData,u as default};
