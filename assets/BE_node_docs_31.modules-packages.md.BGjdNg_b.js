import{_ as i,c as e,o as a,b0 as o}from"./chunks/framework.DpiX_U7m.js";const r=JSON.parse('{"title":"31.Modules Packages","description":"","frontmatter":{"title":"31.Modules Packages"},"headers":[],"relativePath":"BE/node/docs/31.modules-packages.md","filePath":"BE/node/docs/31.modules-packages.md","lastUpdated":1748348682000}'),n={name:"BE/node/docs/31.modules-packages.md"};function t(l,s,p,d,c,h){return a(),e("div",null,s[0]||(s[0]=[o(`<p><code>Node.js</code> 中使用 <code>package.json</code> 文件中的以下字段：</p><ol><li><code>name</code> - 在包中使用命名导入时相关。包管理器也将其用作包的名称。</li><li><code>main</code> - 如果未指定导出，以及在引入导出之前的 <code>Node.js</code> 版本中，加载包时的默认模块。</li><li><code>packageManager</code> - 为包做贡献时推荐的包管理器。由 <code>Corepack</code> 垫片利用。</li><li><code>type</code> - 包类型决定是否将 <code>.js</code> 文件加载为 <code>CommonJS</code> 或 <code>ES</code> 模块。</li><li><code>exports</code> - 打包导出和有条件导出。如果存在，则限制可以从包内加载哪些子模块。</li><li><code>imports</code> - 包导入，供包本身内的模块使用。</li></ol><h2 id="_1-commonjs" tabindex="-1">1.CommonJS <a class="header-anchor" href="#_1-commonjs" aria-label="Permalink to &quot;1.CommonJS&quot;">​</a></h2><p>当作为初始输入传递给node时，或者被 <code>import</code> 语句或 <code>import()</code> 表达式引用时，<code>Node.js</code> 会将以下内容视为 <code>CommonJS</code> ：</p><ol><li><code>Files with a .cjs extension</code>.</li></ol><p>扩展名为 <code>.cjs</code> 文件。</p><ol start="2"><li><p><code>Files with a .js extension when the nearest parent package.json file contains a top-level field &quot;type&quot; with a value of &quot;commonjs&quot;</code>. 当最近的父 <code>package.json</code> 文件包含值为 <code>commonjs</code> 的顶级字段 <code>type</code> 时，具有 <code>.js</code> 扩展名的文件。</p></li><li><p><code>Strings passed in as an argument to --eval or --print, or piped to node via STDIN, with the flag --input-type=commonjs</code>. 字符串作为参数传入 <code>--eval</code> 或 <code>--print</code> ，或通过 <code>STDIN</code> 通过管道传输到 <code>node</code> ，并带有标志 <code>--input-type=commonjs</code> 。</p></li></ol><p>以 <code>.cjs</code> 结尾的文件始终作为 <code>CommonJS</code> 加载，无论最近的父 <code>package.json</code> 是什么。</p><h2 id="_2-esm" tabindex="-1">2.ESM <a class="header-anchor" href="#_2-esm" aria-label="Permalink to &quot;2.ESM&quot;">​</a></h2><p>当作为初始输入传递给 <code>node</code> 时，或者被 <code>import</code> 语句或 <code>import()</code> 表达式引用时，<code>Node.js</code> 会将以下内容视为 <code>ES</code> 模块：</p><ol><li><code>Files with an .mjs extension</code>.</li></ol><p>扩展名为 <code>.mjs</code> 文件。</p><ol start="2"><li><code>Files with a .js extension when the nearest parent package.json file contains a top-level &quot;type&quot; field with a value of &quot;module&quot;</code>.</li></ol><p>当最近的父 <code>package.json</code> 文件包含值为 <code>module</code> 的顶级 <code>type</code> 字段时，具有 <code>.js</code> 扩展名的文件。</p><ol start="3"><li><code>Strings passed in as an argument to --eval, or piped to node via STDIN, with the flag --input-type=module</code>.</li></ol><p>字符串作为参数传入 <code>--eval</code> ，或通过 <code>STDIN</code> 通过管道传输到 <code>node</code> ，并带有标志 <code>--input-type=module</code> 。</p><ol start="4"><li><code>When using --experimental-detect-module, code containing syntax only successfully parsed as ES modules, such as import or export statements or import.meta, having no explicit marker of how it should be interpreted. Explicit markers are .mjs or .cjs extensions, package.json &quot;type&quot; fields with either &quot;module&quot; or &quot;commonjs&quot; values, or --input-type or --experimental-default-type flags. Dynamic import() expressions are supported in either CommonJS or ES modules and would not cause a file to be treated as an ES module</code>.</li></ol><p>当使用 <code>--experimental-detect-module</code> 时，包含仅成功解析为 <code>ES</code> 模块的语法的代码，例如 <code>import</code> 或 <code>export</code> 语句或 <code>import.meta</code> ，没有明确标记应如何解释它。</p><p>显式标记是 <code>.mjs</code> 或 <code>.cjs</code> 扩展名、带有 <code>module</code> 或 <code>commonjs</code> 值的 <code>package.json</code> <code>type</code>字段，或者 <code>--input-type</code> 或<code>--experimental-default-type</code> 标志。 <code>CommonJS</code> 或 <code>ES</code> 模块都支持动态 <code>import()</code> 表达式，并且不会导致文件被视为 <code>ES</code> 模块。</p><p>以 <code>.mjs</code> 结尾的文件始终作为 <code>ES</code> 模块加载，无论最近的父 <code>package.json</code> 是什么。</p><p><strong>import能够导入CommonJS模块 但require不能导入ES模块。</strong></p><p><strong>CommonJS模块中，可以使用import懒加载加载esm模块。</strong></p><h2 id="_3-entry-cjs" tabindex="-1">3.entry.cjs <a class="header-anchor" href="#_3-entry-cjs" aria-label="Permalink to &quot;3.entry.cjs&quot;">​</a></h2><p><code>package.json</code> 中的 <code>main</code> 字段通常只能定义一个入口。</p><p>这样的话，往往只能使用 <code>require(&#39;module&#39;)</code>，而是用 <code>require(&#39;module/lib/module.js&#39;)</code> 则会失败。</p><p>在这种场景下，可以在 <code>package.json</code> 中定义 <code>exports</code> 字段。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;commonjs-a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> libMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;commonjs-a/lib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libMessage)</span></span></code></pre></div><h2 id="_4-entry-mjs" tabindex="-1">4.entry.mjs <a class="header-anchor" href="#_4-entry-mjs" aria-label="Permalink to &quot;4.entry.mjs&quot;">​</a></h2><p>在包的 <code>package.json</code> 文件中，两个字段可以定义包的入口点： <code>main</code> 和 <code>exports</code> 。</p><p>这两个字段都适用于 <code>ES</code> 模块和 <code>CommonJS</code> 模块入口点。</p><p>所有版本的 <code>Node.js</code> 都支持 <code>main</code> 字段，但其功能有限：它仅定义包的主入口点。</p><p><code>exports</code> 提供了 <code>main</code> 的现代替代方案，允许定义多个入口点、环境之间的条件入口解析支持，并<strong>防止除&quot;exports&quot;中定义的入口点之外的任何其他入口点</strong>。这种封装允许模块作者清楚地定义其包的公共接口。</p><p>对于针对当前支持的 <code>Node.js</code> 版本的新包，建议使用 <code>exports</code> 字段。对于支持 <code>Node.js 10</code> 及更低版本的包， <code>main</code> 字段是必需的。</p><p>如果同时定义了 <code>exports</code> 和 <code>main</code> ，则在受支持的 <code>Node.js</code> 版本中 <code>exports</code> 字段优先于 <code>main</code> 。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const message = require(&#39;esm-a&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(message)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const libMessage = require(&#39;esm-a/lib&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(libMessage)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;esm-a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libMessage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;esm-a/lib&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libMessage)</span></span></code></pre></div>`,37)]))}const E=i(n,[["render",t]]);export{r as __pageData,E as default};
