import{_ as i,o as a,c as e,aP as t}from"./chunks/framework.D1yHhm2y.js";const r=JSON.parse('{"title":"3.暂存区","description":"","frontmatter":{"title":"3.暂存区"},"headers":[],"relativePath":"engineer/git/3.stage.md","filePath":"engineer/git/3.stage.md","lastUpdated":1736067115000}'),l={name:"engineer/git/3.stage.md"};function n(h,s,p,d,o,k){return a(),e("div",null,s[0]||(s[0]=[t(`<h2 id="_3-1-操作" tabindex="-1">3-1.操作 <a class="header-anchor" href="#_3-1-操作" aria-label="Permalink to &quot;3-1.操作&quot;">​</a></h2><p>在上节，我们通过 <code>git add</code> 命令将文件提交到了暂存区。</p><p>现在执行下 <code>git status</code> 查看下文件状态：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/008eGmZEly1gp2xo1znuij30x4068gmh.jpg" alt="" loading="lazy"></p><p>在暂存区，对于文件的操作，也基本是两种：</p><ul><li>提交 提交文件到本地仓库</li><li>撤销 回退文件到工作区</li></ul><h2 id="_3-2-commit-规范" tabindex="-1">3-2.commit 规范 <a class="header-anchor" href="#_3-2-commit-规范" aria-label="Permalink to &quot;3-2.commit 规范&quot;">​</a></h2><p><code>commit</code> 的类别，只允许使用下面7个标识:</p><ul><li><code>feat</code>：新功能（<code>feature</code>）</li><li><code>fix</code>：修补 <code>bug</code></li><li><code>docs</code>：文档（<code>documentation</code>）</li><li><code>style</code>： 格式（不影响代码运行的变动）</li><li><code>refactor</code>：重构（即不是新增功能，也不是修改bug的代码变动）</li><li><code>test</code>：增加测试</li><li><code>chore</code>：构建过程或辅助工具的变动</li></ul><h2 id="指令总结" tabindex="-1">指令总结 <a class="header-anchor" href="#指令总结" aria-label="Permalink to &quot;指令总结&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交文件到本地仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;message&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 补充上次的commit信息并覆盖,通常用以重新提交commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --amend</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;message&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 撤销</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --staged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 撤销 重置HEAD指针</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div>`,11)]))}const g=i(l,[["render",n]]);export{r as __pageData,g as default};
