import{_ as i,c as a,o as s,b1 as t}from"./chunks/framework.BbHYEPU-.js";const k=JSON.parse('{"title":"2.CLI","description":"","frontmatter":{"title":"2.CLI"},"headers":[],"relativePath":"engineer/prettier/2.cli.md","filePath":"engineer/prettier/2.cli.md","lastUpdated":1752754176000}'),o={name:"engineer/prettier/2.cli.md"};function n(c,e,d,l,h,r){return s(),a("div",null,e[0]||(e[0]=[t('<p>本节总结 <code>CLI</code> 工具的相关<a href="https://prettier.io/docs/en/cli" target="_blank" rel="noreferrer">选项配置</a>。</p><h2 id="_1-check" tabindex="-1">1. <code>--check</code> <a class="header-anchor" href="#_1-check" aria-label="Permalink to &quot;1. `--check`&quot;">​</a></h2><p>检测代码，但不进行修复。只会报告错误</p><h2 id="_2-write" tabindex="-1">2. <code>--write</code> <a class="header-anchor" href="#_2-write" aria-label="Permalink to &quot;2. `--write`&quot;">​</a></h2><p>检测代码，并进行修复。</p><h2 id="_3-debug-check" tabindex="-1">3. <code>--debug-check</code> <a class="header-anchor" href="#_3-debug-check" aria-label="Permalink to &quot;3. `--debug-check`&quot;">​</a></h2><blockquote><p>If you&#39;re worried that Prettier will change the correctness of your code, add --debug-check to the command.</p></blockquote><blockquote><p>This will cause Prettier to print an error message if it detects that code correctness might have changed.</p></blockquote><blockquote><p>Note that --write cannot be used with --debug-check.</p></blockquote><p>以上引用是<a href="https://prettier.io/docs/en/cli#--debug-check" target="_blank" rel="noreferrer">官方网站原话</a>。</p><p>笔者测试了下，很多场景不怎么生效，用途不大。</p><h2 id="_4-find-config-path" tabindex="-1">4. <code>--find-config-path</code> <a class="header-anchor" href="#_4-find-config-path" aria-label="Permalink to &quot;4. `--find-config-path`&quot;">​</a></h2><p>找出启用的 <code>config</code> 文件路径</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --find-config-path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/main.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># It will maybe print &quot;.prettierrc.js&quot;</span></span></code></pre></div><h2 id="_5-config" tabindex="-1">5. <code>--config</code> <a class="header-anchor" href="#_5-config" aria-label="Permalink to &quot;5. `--config`&quot;">​</a></h2><p>设置指定的 <code>config</code> 目录或文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --write</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path/to/config</span></span></code></pre></div><h2 id="_6-ignore-path" tabindex="-1">6. <code>--ignore-path</code> <a class="header-anchor" href="#_6-ignore-path" aria-label="Permalink to &quot;6. `--ignore-path`&quot;">​</a></h2><p>忽略文件</p><h2 id="_7-list-different" tabindex="-1">7. <code>--list-different</code> <a class="header-anchor" href="#_7-list-different" aria-label="Permalink to &quot;7. `--list-different`&quot;">​</a></h2><p>类似于 <code>--check</code>，但是信息更加精简，只会列出不合规范的目标文件，没有其他多余信息。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --single-quote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-different</span></span></code></pre></div><h2 id="_8-no-config" tabindex="-1">8. <code>--no-config</code> <a class="header-anchor" href="#_8-no-config" aria-label="Permalink to &quot;8. `--no-config`&quot;">​</a></h2><p>不再寻找配置文件，只会使用 <code>prettier</code> 的内置配置。</p><h2 id="_9-config-precedence" tabindex="-1">9. <code>--config-precedence</code> <a class="header-anchor" href="#_9-config-precedence" aria-label="Permalink to &quot;9. `--config-precedence`&quot;">​</a></h2><p>设置配置的优先级。有以下几种选项：</p><ol><li><p><code>cli-override</code>： <strong>默认</strong>，<code>CLI</code> 选项配置的优先级高于 <code>config</code> 文件；</p></li><li><p><code>file-override</code>： <code>config</code> 文件的优先级高于 <code>CLI</code> 选项配置；</p></li><li><p><code>prefer-file</code>: 如果 <code>config</code> 文件存在的话，会忽略 <code>CLI</code> 选项配置。否则，会采用 <code>CLI</code> 选项配置。</p></li></ol><h2 id="_10-no-editorconfig" tabindex="-1">10. <code>--no-editorconfig</code> <a class="header-anchor" href="#_10-no-editorconfig" aria-label="Permalink to &quot;10. `--no-editorconfig`&quot;">​</a></h2><p>当调用 <code>resolveConfig</code> 时，不解析 <code>.editorconfig</code> 文件。</p><p>阅读<a href="https://prettier.io/docs/en/api#prettierresolveconfigfilepath--options" target="_blank" rel="noreferrer">resolveConfig</a>。</p><h2 id="_11-with-node-modules" tabindex="-1">11. <code>--with-node-modules</code> <a class="header-anchor" href="#_11-with-node-modules" aria-label="Permalink to &quot;11. `--with-node-modules`&quot;">​</a></h2><p><code>Prettier</code> 默认会忽略检测 <code>node_modules</code> 下的文件。</p><p>如果想要更改上述情形的话，可以使用 <code>--with-node-modules</code>。</p><h2 id="_12-log-level" tabindex="-1">12. <code>--log-level</code> <a class="header-anchor" href="#_12-log-level" aria-label="Permalink to &quot;12. `--log-level`&quot;">​</a></h2><p>日志等级，有以下可配置选项：</p><ol><li><code>error</code></li><li><code>warn</code></li><li><code>log</code> 默认</li><li><code>debug</code></li><li><code>silent</code></li></ol><h2 id="_13-stdin-filepath" tabindex="-1">13. <code>--stdin-filepath</code> <a class="header-anchor" href="#_13-stdin-filepath" aria-label="Permalink to &quot;13. `--stdin-filepath`&quot;">​</a></h2><p>声明文件路径，<code>Prettier</code> 会将其当做 <code>stdin</code> 处理：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* abc.css */</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abc.css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stdin-filepath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abc.css</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  display:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_14-ignore-unknown" tabindex="-1">14. <code>--ignore-unknown</code> <a class="header-anchor" href="#_14-ignore-unknown" aria-label="Permalink to &quot;14. `--ignore-unknown`&quot;">​</a></h2><p>用来忽略无法识别的文件类型。</p><p>假设某文件为 <code>unknown.abc</code>，<code>Prettier</code> 指令为 <code>prettier **/* --write</code>。</p><p>此时，执行指令，会报错：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[error] No parser could be inferred for file &quot;/path/to/unknown.abc&quot;.</span></span></code></pre></div><p>为了保证指令的正常执行，可以修改指令为 <code>prettier **/* --write --ignore-unknown</code>。</p><h2 id="_15-no-error-on-unmatched-pattern" tabindex="-1">15. <code>--no-error-on-unmatched-pattern</code> <a class="header-anchor" href="#_15-no-error-on-unmatched-pattern" aria-label="Permalink to &quot;15. `--no-error-on-unmatched-pattern`&quot;">​</a></h2><p>当某文件类型无法识别时，阻止报错。</p><p>譬如 <code>prettier **/* --write --no-error-on-unmatched-pattern</code>。</p><h2 id="_16-cache" tabindex="-1">16. <code>--cache</code> <a class="header-anchor" href="#_16-cache" aria-label="Permalink to &quot;16. `--cache`&quot;">​</a></h2><p>运行 <code>Prettier</code> 时，使用 <code>cache</code> 缓存。</p><p>除非以下几项变化：</p><ol><li><p><code>Prettier</code> 版本</p></li><li><p><code>Node.js</code> 版本</p></li><li><p><code>Options</code></p></li><li><p><code>file metadata</code>，当设置 <code>--cache-strategy</code> 为 <code>metadata</code></p></li><li><p><code>file content</code>，当设置 <code>--cache-strategy</code> 为 <code>content</code></p></li></ol><h2 id="_17-cache-location" tabindex="-1">17. <code>--cache-location</code> <a class="header-anchor" href="#_17-cache-location" aria-label="Permalink to &quot;17. `--cache-location`&quot;">​</a></h2><p>默认的 <code>cache</code> 目录为 <code>./node_modules/.cache/prettier/.prettier-cache</code>，可以通过 <code>--cache-location</code> 来自定义缓存目录。</p><p>譬如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --write</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cache</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cache-location=path/to/cache-file</span></span></code></pre></div><p><strong>如果不想使用 <code>cache</code> 的话，可以将缓存目录删除，重新执行指令</strong>。</p><h2 id="_18-cache-strategy" tabindex="-1">18. <code>--cache-strategy</code> <a class="header-anchor" href="#_18-cache-strategy" aria-label="Permalink to &quot;18. `--cache-strategy`&quot;">​</a></h2><p>用来判断文件是否发生更新的缓存策略。</p><p>可以设置为 <code>metadata</code> 或 <code>content</code>。默认为 <code>content</code>。</p>',61)]))}const g=i(o,[["render",n]]);export{k as __pageData,g as default};
