import{_ as t,c as e,o,b0 as c}from"./chunks/framework.CEggy_nf.js";const m=JSON.parse('{"title":"3.数据类型与运算符","description":"","frontmatter":{"title":"3.数据类型与运算符"},"headers":[],"relativePath":"DB/sql/3.base.md","filePath":"DB/sql/3.base.md","lastUpdated":1745136129000}'),r={name:"DB/sql/3.base.md"};function a(h,d,i,l,n,b){return o(),e("div",null,d[0]||(d[0]=[c('<h2 id="sql数据类型" tabindex="-1">SQL数据类型 <a class="header-anchor" href="#sql数据类型" aria-label="Permalink to &quot;SQL数据类型&quot;">​</a></h2><p>在数据库中，表的每列都具有特定的数据类型。</p><p>数据类型指定列(字段)可以容纳的数据类型，例如字符串，数值和日期时间值。</p><h3 id="精确数字数据类型" tabindex="-1">精确数字数据类型 <a class="header-anchor" href="#精确数字数据类型" aria-label="Permalink to &quot;精确数字数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>起始值</th><th>结束值</th></tr></thead><tbody><tr><td><code>bigint</code></td><td><code>-9,223,372,036,854,775,808</code></td><td><code>9,223,372,036,854,775,807</code></td></tr><tr><td><code>int</code></td><td><code>-2,147,483,648</code></td><td><code>2,147,483,647</code></td></tr><tr><td><code>smallint</code></td><td><code>-32,768</code></td><td><code>32,767</code></td></tr><tr><td><code>tinyint</code></td><td><code>0</code></td><td><code>255</code></td></tr><tr><td><code>bit</code></td><td><code>0</code></td><td><code>1</code></td></tr><tr><td><code>decimal</code></td><td><code>-10^38 +1</code></td><td><code>10^38 -1</code></td></tr><tr><td><code>numeric</code></td><td><code>-10^38 +1</code></td><td><code>10^38 -1</code></td></tr><tr><td><code>money</code></td><td><code>-922,337,203,685,477.5808</code></td><td><code>+922,337,203,685,477.5807</code></td></tr><tr><td><code>smallmoney</code></td><td><code>-214,748.3648</code></td><td><code>+214,748.3647</code></td></tr></tbody></table><h3 id="近似数字数据类型" tabindex="-1">近似数字数据类型 <a class="header-anchor" href="#近似数字数据类型" aria-label="Permalink to &quot;近似数字数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>起始值</th><th>结束值</th></tr></thead><tbody><tr><td><code>float</code></td><td><code>-1.79E + 308</code></td><td><code>1.79E + 308</code></td></tr><tr><td><code>real</code></td><td><code>-3.40E + 38</code></td><td><code>3.40E + 38</code></td></tr></tbody></table><h3 id="日期和时间数据类型" tabindex="-1">日期和时间数据类型 <a class="header-anchor" href="#日期和时间数据类型" aria-label="Permalink to &quot;日期和时间数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>起始值</th><th>结束值</th></tr></thead><tbody><tr><td><code>datetime</code></td><td><code>-1.79E + 308</code></td><td><code>1.79E + 308</code></td></tr><tr><td><code>smalldatetime</code></td><td><code>Jan 1, 1900</code></td><td><code>Jun 6, 2079</code></td></tr><tr><td><code>date</code></td><td>存储日期，如：1991年6月30日</td><td></td></tr><tr><td><code>time</code></td><td>存储时间。如：下午12:30</td><td></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里的 <code>datetime</code> 的精度为 <code>3.33</code> 毫秒，而 <code>smalldatetime</code> 的精度为<code>1</code>分钟。</p></div><h3 id="字符串数据类型" tabindex="-1">字符串数据类型 <a class="header-anchor" href="#字符串数据类型" aria-label="Permalink to &quot;字符串数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>char</code></td><td>最大长度为 <code>8,000 </code>个字符，非 <code>Unicode</code> 字符固定长度。</td></tr><tr><td><code>varchar</code></td><td>最多 <code>8,000</code> 个字符，非 <code>Unicode </code>数据可变长度。</td></tr><tr><td><code>varchar(max)</code></td><td>最大长度为 <code>2E + 31</code> 个字符，可变长度非 <code>Unicode</code> 数据(仅限 <code>SQL Server 2005</code>)。</td></tr><tr><td><code>text</code></td><td>非 <code>Unicode </code>数据的可变长度，最大长度为 <code>2,147,483,647</code> 个字符。</td></tr></tbody></table><h3 id="unicode字符串数据类型" tabindex="-1">Unicode字符串数据类型 <a class="header-anchor" href="#unicode字符串数据类型" aria-label="Permalink to &quot;Unicode字符串数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>nchar</code></td><td>最大长度为 <code>4,000 </code>个字符，<code>Unicode</code> 字符固定长度。</td></tr><tr><td><code>nvarchar</code></td><td>最大长度为 <code>4,000 </code>个字符，<code>Unicode</code> 字符可变长度。</td></tr><tr><td><code>nvarchar(max)</code></td><td>最大长度为 <code>2E + 31 </code>个字符( 仅限<code>SQL Server 2005</code>)，<code>Unicode</code> 字符可变长度。</td></tr><tr><td><code>ntext</code></td><td>最大长度为 <code>1,073,741,823</code> 个字符，可变长度。</td></tr></tbody></table><h3 id="二进制数据类型" tabindex="-1">二进制数据类型 <a class="header-anchor" href="#二进制数据类型" aria-label="Permalink to &quot;二进制数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>binary</code></td><td>最大长度为 <code>8,000 </code> 字节，固定长度的二进制数据。</td></tr><tr><td><code>varbinary</code></td><td>最大长度为 <code>8,000 </code>字节，可变长度二进制数据。</td></tr><tr><td><code>varbinary(max)</code></td><td>最大长度为 <code>2E + 31</code> 个字节(仅限 <code>SQL Server 2005</code>)，可变长度二进制数据。</td></tr><tr><td><code>image</code></td><td>最大长度为 <code>2,147,483,647</code> 字节，可变长度二进制数据)</td></tr></tbody></table><h3 id="其它数据类型" tabindex="-1">其它数据类型 <a class="header-anchor" href="#其它数据类型" aria-label="Permalink to &quot;其它数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>sql_variant</code></td><td>存储各种 <code>SQL Server</code> 支持的数据类型的值，<code>text</code>，<code>ntext</code> 和 <code>timestamp</code> 类型除外</td></tr><tr><td><code>timestamp</code></td><td>存储数据库范围的唯一编号，每次更新行时都会更新该编号</td></tr><tr><td><code>uniqueidentifier</code></td><td>存储全局唯一标识符(<code>GUID</code>)</td></tr><tr><td><code>xml</code></td><td>存储 <code>XML</code> 数据，可以将 <code>xml</code> 实例存储在列或变量中(仅限 <code>SQL Server 2005</code> )</td></tr><tr><td><code>cursor</code></td><td>引用游标对象</td></tr><tr><td><code>table</code></td><td>存储结果集以供以后处理</td></tr></tbody></table><h2 id="sql运算符" tabindex="-1">SQL运算符 <a class="header-anchor" href="#sql运算符" aria-label="Permalink to &quot;SQL运算符&quot;">​</a></h2><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>-</code></td><td>减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>%</code></td><td>取余</td></tr></tbody></table><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>&lt;&gt;</code></td><td>不等于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>!&lt;</code></td><td>不小于</td></tr><tr><td><code>!&gt;</code></td><td>不大于</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>ALL</code></td><td><code>ALL</code> 运算符用于将值与另一个值集中的所有值进行比较。</td></tr><tr><td><code>AND</code></td><td><code>AND</code> 运算符允许在SQL语句的 <code>WHERE</code> 子句中指定多个条件。</td></tr><tr><td><code>ANY</code></td><td><code>ANY</code> 运算符用于根据条件将值与列表中的任何适用值进行比较。</td></tr><tr><td><code>BETWEEN</code></td><td><code>BETWEEN</code> 运算符用于搜索在给定最小值和最大值内的值。</td></tr><tr><td><code>EXISTS</code></td><td><code>EXISTS</code> 运算符用于搜索指定表中是否存在满足特定条件的行。</td></tr><tr><td><code>IN</code></td><td><code>IN</code> 运算符用于将值与已指定的文字值列表进行比较。</td></tr><tr><td><code>LIKE</code></td><td><code>LIKE</code> 运算符用于使用通配符运算符将值与类似值进行比较。</td></tr><tr><td><code>NOT</code></td><td><code>NOT</code> 运算符反转使用它的逻辑运算符的含义。 例如：<code>NOT EXISTS</code>, <code>NOT BETWEEN</code>, <code>NOT IN</code> 等等，这是一个否定运算符。</td></tr><tr><td><code>OR</code></td><td><code>OR</code> 运算符用于组合 <code>SQL</code> 语句的 <code>WHERE</code> 子句中的多个条件。</td></tr><tr><td><code>IS NULL</code></td><td><code>NULL</code> 运算符用于将值与 <code>NULL</code> 值进行比较。</td></tr><tr><td><code>UNIQUE</code></td><td><code>UNIQUE </code>运算符搜索指定表的每一行的唯一性(无重复项)。</td></tr></tbody></table>',25)]))}const u=t(r,[["render",a]]);export{m as __pageData,u as default};
