import{_ as i,o as a,c as e,aP as n}from"./chunks/framework.D1yHhm2y.js";const r=JSON.parse('{"title":"package.json","description":"","frontmatter":{"title":"package.json"},"headers":[],"relativePath":"engineer/pkg-manager/npm/4.package.json.md","filePath":"engineer/pkg-manager/npm/4.package.json.md","lastUpdated":1735912341000}'),p={name:"engineer/pkg-manager/npm/4.package.json.md"};function t(l,s,o,h,d,k){return a(),e("div",null,s[0]||(s[0]=[n(`<p><a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json" target="_blank" rel="noreferrer">package.json</a></p><h2 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h2><p>如果计划发布一个包，在 <code>package.json</code> 文件中，最重要的是 <code>name</code> 和 <code>version</code> 字段，<strong>因为它们是必需的</strong>。</p><p><code>name</code> 和 <code>version</code> 组合起来形成一个被认为是完全唯一的标识符。</p><p>对包的更改应该伴随着版本的更改。如果你不计划发布你的包，<code>name</code> 和 <code>version</code> 字段是可选的。</p><p><code>name</code> 是你的项目的名称。</p><p>一些规则：</p><ol><li>名称必须小于等于 <code>214</code> 个字符，包括作用域（对于作用域包）。</li><li>带有作用域的包的名称可以以点（<code>.</code>）或下划线（<code>_</code>）开头，但是不能没有作用域。</li><li>新的包名称不能包含大写字母。</li><li>名称最终会成为 <code>URL</code> 的一部分、命令行的参数和文件夹名称。因此，名称不能包含任何非 URL 安全的字符。</li></ol><p>一些建议：</p><ol><li>不要使用与核心 <code>Node</code> 模块相同的名称。</li><li>不要在名称中包含 <code>js</code> 或 <code>node</code>。因为你编写的是 <code>package.json</code> 文件，所以可以假设是 <code>JavaScript</code>，而可以使用 <code>engines</code> 字段指定引擎。</li><li>名称可能会作为参数传递给 <code>require()</code> 函数，所以它应该是一个简短但合理描述的名称。</li><li>在你对名称过于依赖之前，可能需要检查 <code>npm</code> 注册表，看看是否已经有相同名称的包存在。<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npmjs.com</a></li><li>名称可以选择性地添加作用域前缀，例如 <code>@myorg/mypackage</code>。</li></ol><h2 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h2><p><code>version</code> 字段用于标识包的版本号，它应该遵循<strong>语义化版本控制规范</strong>，并且在发布新版本时进行适当的升级。</p><p><code>version</code> 必须是可被 <code>semver</code> 解析的，<code>semver</code> 是作为 <code>npm</code> 的一个依赖项捆绑在一起的。（你可以使用 <code>npm install semver</code> 来自己使用它。）</p><p><code>npm</code> 使用语义化版本控制（<code>Semantic Versioning</code>）规范来管理版本号。</p><p>语义化版本控制分为三个部分：主版本号、次版本号和补丁版本号。具体规则如下：</p><ol><li>主版本号（<code>Major</code>）：当你做了不兼容的 API 修改时，应该升级主版本号。</li><li>次版本号（<code>Minor</code>）：当你添加了向后兼容的功能时，应该升级次版本号。</li><li>补丁版本号（<code>Patch</code>）：当你进行向后兼容的 bug 修复时，应该升级补丁版本号。</li><li>版本号可以包含预发布标识（如 <code>beta</code>、<code>alpha</code>）和构建标识（如 <code>build-123</code>）。</li></ol><p>例如，一个有效的版本号可以是 <code>1.0.0</code>，<code>2.3.1</code>，<code>1.2.0-beta.1</code> 等。</p><p>当你发布新的版本时，你应该根据你的修改类型适当地升级主版本号、次版本号或补丁版本号，并在 <code>package.json</code> 文件中更新 <code>version</code> 字段。</p><h2 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">​</a></h2><p><code>description</code> 字段用于描述包的简短说明。</p><p>类似于 <code>HTML</code> 网页 <code>TDK</code> 的 <code>description</code>，<code>description</code> 字段可以帮助用户快速了解包的作用。</p><h2 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;keywords&quot;">​</a></h2><p><code>keywords</code> 字段用于描述包的关键字，它是一个<strong>字符串数组</strong>。</p><p>类似于 <code>HTML</code> 网页 <code>TDK</code> 的 <code>keywords</code>，<code>keywords</code> 字段可以帮助用户快速了解包的作用。</p><p>也有助于用户的检索。</p><h2 id="homepage" tabindex="-1">homepage <a class="header-anchor" href="#homepage" aria-label="Permalink to &quot;homepage&quot;">​</a></h2><p><code>homepage</code> 字段用于指定包的主页。</p><p>以 <code>axios</code> 仓库为例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;homepage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://axios-http.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="bugs" tabindex="-1">bugs <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;bugs&quot;">​</a></h2><p><code>bugs</code> 字段用于指定包的 <code>issue</code> 跟踪地址。</p><p>可以是一个 <code>URL</code>，也可以是一个邮箱地址。但<strong>推荐使用 <code>URL</code></strong>。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bugs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/axios/axios/issues&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project@hostname.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-label="Permalink to &quot;license&quot;">​</a></h2><p><code>license</code> 字段用于指定包的许可证。</p><p><code>license</code> 字段可以是一个字符串，也可以是一个对象。</p><p>如果是一个字符串，那么它应该是一个有效的 <a href="https://spdx.org/licenses/" target="_blank" rel="noreferrer">SPDX</a> 许可证标识符。</p><p>如果是一个对象，那么它应该包含 <code>type</code> 字段，用于指定许可证类型，以及 <code>url</code> 字段，用于指定许可证的 <code>URL</code> 地址。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MIT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MIT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.opensource.org/licenses/mit-license.php&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="author" tabindex="-1">author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;author&quot;">​</a></h2><p><code>author</code> 字段用于指定包的作者。</p><p><code>author</code> 字段可以是一个字符串，也可以是一个对象。</p><p>如果是一个字符串，那么它应该是一个有效的 <code>name &lt;email&gt; (url)</code> 格式的字符串。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果是一个对象，那么它应该包含 <code>name</code> 字段，用于指定作者名称，以及 <code>email</code> 字段和 <code>url</code> 字段，用于指定作者的邮箱地址和个人主页。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Barney Rubble&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b@rubble.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://barnyrubble.tumblr.com/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="contributors" tabindex="-1">contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;contributors&quot;">​</a></h2><p><code>contributors</code> 字段用于指定包的贡献者。</p><p><code>contributors</code> 字段是一个数组，<strong>数组中的每一项可以是一个字符串，也可以是一个对象</strong>。</p><p><em><code>contributors</code> 与上述 <code>author</code> 字段的格式和使用方式相同</em>。</p><p><strong>区别在于 <code>author</code> 指定单个人，而 <code>contributors</code> 是数组，指代人的集合</strong>。</p><h2 id="funding" tabindex="-1">funding <a class="header-anchor" href="#funding" aria-label="Permalink to &quot;funding&quot;">​</a></h2><p><code>funding</code> 字段用于指定包的资助信息。</p><p>它包含 <code>type</code> 字段和 <code>url</code> 字段。</p><p><code>type</code> 字段用于指定资助类型，<code>url</code> 字段用于指定资助地址。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;funding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;individual&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.com/donate&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;funding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;patreon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.patreon.com/my-account&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;funding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.com/donate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;funding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;individual&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.com/donate&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;http://example.com/donateAlso&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;patreon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.patreon.com/my-account&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h2><p>可选的 <code>files</code> 字段是一个文件模式数组，<strong>用于描述当你的包作为依赖项安装时应包含的条目</strong>。</p><p>文件模式遵循类似于 <code>.gitignore</code> 的语法，但是与 <code>.gitignore</code> 的行为相反：包含一个文件、目录或通配符模式（、<code>**/</code> 等）将使得在打包成 <code>tarball</code> 时该文件被包含在内。如果省略该字段，将默认为 [&quot;*&quot;]，表示包含所有文件。</p><p><strong>无论文件数组中是否存在，某些特殊的文件和目录始终会被包含或排除</strong>（请参阅下文）。</p><p>你还可以在你的包的根目录或子目录中提供一个 <code>.npmignore</code> 文件，用于阻止文件被包含。</p><p>在包的根目录中，它不会覆盖 <code>files</code> 字段，但在子目录中会覆盖。</p><p><code>.npmignore</code> 文件的工作原理与 <code>.gitignore</code> 文件类似。如果存在 <code>.gitignore</code> 文件而缺少 <code>.npmignore</code> 文件，则将使用 <code>.gitignore</code> 文件的内容。</p><p>使用 <code>package.json#files</code> 字段包含的文件无法通过 <code>.npmignore</code> 或 <code>.gitignore</code> 排除。</p><p>某些文件始终会被包含，不受设置的影响：</p><ul><li><code>package.json</code></li><li><code>README</code></li><li><code>LICENSE / LICENCE</code></li><li><code>main</code> 字段指定的文件</li><li><code>README</code> 和 <code>LICENSE</code> 可以具有任何大小写和扩展名。</li></ul><p>相反的，一些文件始终会被排除，不受设置的影响：</p><ul><li><code>.git</code></li><li><code>CVS</code></li><li><code>.svn</code></li><li><code>.hg</code></li><li><code>.lock-wscript</code></li><li><code>.wafpickle-N</code></li><li><code>.*.swp</code></li><li><code>.DS_Store</code></li><li><code>._*</code></li><li><code>npm-debug.log</code></li><li><code>.npmrc</code></li><li><code>node_modules</code></li><li><code>config.gypi</code></li><li><code>*.orig</code></li><li><code>package-lock.json</code> (use <code>npm-shrinkwrap.json</code> if you wish it to be published)</li></ul><h2 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h2><p><code>main</code> 字段用于指定包的入口文件。</p><p><strong><code>main</code> 只能设置为字符串</strong>。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./main.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果未设置 <code>main</code> 字段，默认情况下它将是包根目录中的 <code>index.js</code>。</p><h2 id="browser" tabindex="-1">browser <a class="header-anchor" href="#browser" aria-label="Permalink to &quot;browser&quot;">​</a></h2><p><code>browser</code> 字段用于指定包在 <code>browser</code> 环境中的入口文件。</p><p><strong><code>browser</code> 字段可以设置为字符串或对象</strong>。</p><p>当设置为<strong>字符串</strong>时，它代表的是客户端浏览器环境下的入口文件。此时，<strong>会覆盖 <code>main</code> 字段的设置</strong>。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./browser.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当设置为<strong>对象</strong>时，它代表的是客户端浏览器环境下的文件映射解析。以 <a href="https://github.com/axios/axios/blob/v1.x/package.json#L137" target="_blank" rel="noreferrer">axios</a> 库为例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/adapters/http.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/helpers/null.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/platform/node/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/platform/browser/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/platform/node/classes/FormData.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/helpers/null.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的 <code>./lib/adapters/http.js</code> 代表，在浏览器环境下将该文件映射为 <code>./lib/helpers/null.js</code> 文件。<strong>后续两条配置同理</strong>。</p><p>关于 <code>browser</code> 字段的更多信息，请参考 <a href="https://github.com/defunctzombie/package-browser-field-spec" target="_blank" rel="noreferrer">package-browser-field-spec</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>截止到这里，可能有一个疑问：设置 <code>browser</code> 字段后，代码是如何区分浏览器环境与 <code>Node.js</code> 环境的？</p><p>其实，可以将 <code>browser</code> 看做约定的准则、规范。<strong>环境的区分，依然要借助于打包器的实现</strong>。</p><p>譬如 <code>webpack</code> 中可以使用 <code>target</code> 字段来指定打包的目标环境。</p><p><strong>当 <code>target</code> 设置为 <code>web</code> 时，<code>webpack</code> 会将 <code>browser</code> 字段的配置应用到打包结果中</strong>。</p><p>又譬如 <code>rollup</code> 插件 <a href="https://github.com/rollup/plugins/tree/master/packages/node-resolve/#browser" target="_blank" rel="noreferrer">@rollup/plugin-node-resolve</a> 也提供了对应的 <code>browser</code> 配置项。</p></div><h2 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;bin&quot;">​</a></h2><p><code>bin</code> 字段用于定义可执行命令（<code>binaries</code>）的路径和名称。</p><p>当使用 <code>npm</code> 安装指定包时，<code>npm</code> 会自动创建符号链接（<code>symbolic link</code>），将存在的 <code>bin</code> 字段中的可执行文件链接到 <code>/usr/local/bin</code> 目录中。</p><p>它可以设置为字符串，譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./bin/eslint.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此时, 会采取 <code>name</code> 值作为命令名称。</p><p>如果需要设置多个命令，可以设置为对象，譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./bin/eslint.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-cli&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./bin/eslint-cli.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此时，会采取 <code>bin</code> 对象的 <code>key</code> 作为命令名称。</p><p><strong>所有的脚本 <code>JavaScript</code> 文件的头部需要声明 <a href="https://zh.wikipedia.org/wiki/Shebang" target="_blank" rel="noreferrer">Shebang</a></strong>，以便 <code>Node.js</code> 能够正确地执行它们。</p><p>譬如：<code>#!/usr/bin/env node</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>/usr/bin/env</code> 是一个常见的 <code>Unix</code> 和类 <code>Unix</code> 系统中的标准目录和命令。</p><p>它是一个可执行文件，通常用于在环境变量中查找并执行指定的命令。</p><p>当在命令行中执行 <code>/usr/bin/env command</code> 时，操作系统会搜索环境变量 <code>$PATH</code> 中列出的目录，以找到名为 <code>command</code> 的可执行文件，并使用找到的第一个匹配项来执行该命令。</p><p>例如，假设在环境变量 <code>$PATH</code> 中包含 <code>/usr/local/bin</code> 和 <code>/usr/bin</code> 这两个目录，并且在这两个目录下都存在名为 <code>node</code> 的可执行文件。</p><p>如果在命令行中执行 <code>/usr/bin/env node</code>，则操作系统将查找并执行 <code>$PATH</code> 中找到的第一个 <code>node</code> 可执行文件。</p><p><strong>使用 <code>/usr/bin/env</code> 命令有助于提高脚本的可移植性，因为它使用环境变量来确定要使用的命令。这样，无论命令在文件系统中的确切路径是什么，都可以确保脚本在不同的系统和环境中都能正常执行</strong>。</p><p>在 <code>Shebang</code> 行中使用 <code>/usr/bin/env</code> 是一种常见的做法，如 <code>#!/usr/bin/env python</code> 或 <code>#!/usr/bin/env node</code>。</p><p>这样做可以确保在不同的系统中使用正确的解释器路径，而无需硬编码特定的解释器路径。</p></div><h2 id="repository" tabindex="-1">repository <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;repository&quot;">​</a></h2><p><code>repository</code> 字段用于指定包的仓库地址。</p><p><code>repository</code> 字段可以是一个字符串，也可以是一个对象。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint/eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/axios/axios.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中，<code>eslint/eslint</code> 是一个简写，表示包的存储库位于 <code>GitHub</code> 上的 <code>eslint</code> 组织下的 <code>eslint</code> 存储库。</p><p>它等价于 <code>https://github.com/eslint/eslint.git</code>。</p><p>如果是一个对象，那么它应该包含 <code>type</code> 字段，用于指定仓库类型，以及 <code>url</code> 字段，用于指定仓库地址。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/eslint/eslint.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>type</code> 值可以设置为 <code>git</code>、<code>svn</code>、<code>mercurial</code> 以及 <code>cvs</code> 等等。</p><p>需要注意的是，<code>type</code> 属性并不影响包的实际行为或安装过程。</p><p><code>type</code> 仅用于提供关于包的版本控制存储库的元数据，以便用户和开发者能够方便地访问和查找相关信息。</p><p>如果这个包的 <code>package.json</code> 文件并不在根目录，譬如 <code>monorepo</code> 形式的仓库，那么可以利用 <code>directory</code> 字段进一步指定：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/facebook/react.git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;directory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/react-dom&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;scripts&quot;">​</a></h2><p><code>scripts</code> 字段用于指定一系列的脚本命令。</p><p><code>scripts</code> 字段是一个对象，<strong>对象的每一个 <code>key</code> 都是一个脚本命令的名称，<code>value</code> 是该脚本命令的执行命令</strong>。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Error: no test specified</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;config&quot;">​</a></h2><p><code>config</code> 字段用于指定<strong>自定义</strong>的配置信息。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;apiEndpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当在 <code>package.json</code> 中定义了上述信息后，可以通过 <code>process.env</code> 来访问这些信息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.npm_package_config_apiEndpoint)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.npm_package_config_port)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.npm_package_config_timeout)</span></span></code></pre></div><h2 id="dependencies" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;dependencies&quot;">​</a></h2><p><code>dependencies</code> 字段用于指定包的依赖项。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^0.21.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;chalk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="devdependencies" tabindex="-1">devDependencies <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;devDependencies&quot;">​</a></h2><p><code>devDependencies</code> 字段用于指定包的开发依赖项。</p><p>当我们的包要提供给其他人使用时，我们需要将项目中的相关开发依赖声明到 <code>devDependencies</code> 字段中。</p><p>这样，别人在利用 <code>npm install</code> 安装我们的包时，就不会安装这些多余的开发依赖了。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^7.18.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-config-standard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^16.0.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-plugin-import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.22.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-plugin-node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^11.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-plugin-promise&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.3.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-plugin-standard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^5.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;peerDependencies&quot;">​</a></h2><p><code>peerDependencies</code> 字段用于指定包的对等依赖项。</p><p>假设我们的包依赖于特定版本的第三方库，那么为了保证兼容性，可以将其声明为对等依赖项。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上述配置代表，我们的项目只能依赖于 <code>vue</code> 的 <code>2.x</code> 版本。</p><p>当我们安装了不符合要求的 <code>vue</code> 版本时，<strong><code>npm</code> 会给出警告</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 <code>npm@3.0</code> 至 <code>npm@6.0</code>，<code>npm install</code> 不会安装 <code>peerDependencies</code>。</p><p>在 <code>npm@7.0</code> 及以上版本，<code>npm install</code> 会安装 <code>peerDependencies</code>。</p><p>另外，笔者测试了本机上的 <code>yarn@1.22.17</code> 版本执行 <code>yarn</code> 时，不会安装 <code>peerDependencies</code>。</p></div><h2 id="peerdependenciesmeta" tabindex="-1">peerDependenciesMeta <a class="header-anchor" href="#peerdependenciesmeta" aria-label="Permalink to &quot;peerDependenciesMeta&quot;">​</a></h2><p><code>peerDependenciesMeta</code> 字段用于指定包的对等依赖项的元数据。</p><p>目前，<code>peerDependenciesMeta</code> 字段只支持 <a href="https://stackoverflow.com/questions/62047806/how-do-i-set-a-peer-dependency-optional" target="_blank" rel="noreferrer">optional 属性</a>。</p><p>譬如，我们创建了 <code>module-a</code>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;winston&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt; 1.0.0 &lt;= 1.2.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~2.3.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependenciesMeta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;winston&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;optional&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>那么，在利用 <code>npm install</code> 安装 <code>module-a</code> 时，如果 <code>winston</code> 的依赖不满足 <code>&gt; 1.0.0 &lt;= 1.2.10</code>，此时 <code>npm</code> 不会警告。</p><p>因为，此处设置了 <code>peerDependenciesMeta</code> 中的 <code>winston</code> 的 <code>optional</code> 为 <code>true</code>。</p><p>但是，如果 <code>foo</code> 的依赖不满足 <code>~2.3.0</code>，此时 <code>npm</code> 会警告。</p><h2 id="bundleddependencies" tabindex="-1">bundledDependencies <a class="header-anchor" href="#bundleddependencies" aria-label="Permalink to &quot;bundledDependencies&quot;">​</a></h2><p><code>bundledDependencies</code> 字段用于指定包的捆绑依赖项。</p><p>捆绑依赖项是指在项目打包过程中将依赖项的完整内容包含在项目中，而不是通过安装依赖项来引用它们。</p><p>这在某些情况下是有用的，例如当你的应用程序需要在某些环境中运行（如无网络连接的服务器或离线应用程序）。</p><p><code>bundleDependencies</code> 字段是一个字符串数组，包含了项目的捆绑依赖项的名称。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bundledDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;jquery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当你运行 <code>npm pack</code> 命令时，<code>npm</code> 将会包含这些依赖项的完整内容，并将它们打包到生成的 <code>.tgz</code> 文件中。</p><p>在使用这个打包文件部署应用程序时，捆绑的依赖项将被解压并包含在项目中。</p><p><strong>需要注意的是，<code>bundleDependencies</code> 是一个过时的字段，而在现代的 <code>Node.js</code> 项目中，更常用的方法是使用工具如 <code>webpack</code> 或 <code>Parcel</code> 来打包应用程序，并通过依赖项的引用来管理依赖关系</strong>。</p><h2 id="optionaldependencies" tabindex="-1">optionalDependencies <a class="header-anchor" href="#optionaldependencies" aria-label="Permalink to &quot;optionalDependencies&quot;">​</a></h2><p><code>optionalDependencies</code> 字段用于指定包的可选依赖项。</p><p>可选依赖项是指在安装项目的依赖项时，如果遇到可选依赖项无法安装或编译的情况，不会导致整个安装过程失败。</p><p>换句话说，可选依赖项是对项目功能的补充或增强，但不是必需的。</p><p><code>optionalDependencies</code> 字段是一个对象，其中键是可选依赖项的名称，值是版本范围或 <code>URL</code>。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;optionalDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^7.18.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当运行 <code>npm install</code> 命令安装项目的依赖项时，<code>NPM</code> 会尝试安装这些可选依赖项。</p><p>如果可选依赖项无法安装成功，<code>NPM</code> 将继续安装其他依赖项，并输出警告消息指示哪些可选依赖项未被安装。</p><p>可选依赖项在某些情况下很有用，例如当你的项目需要与某个特定的库或插件进行集成，但该库或插件并非必需时。</p><p>在这种情况下，你可以将其列为可选依赖项，并在项目中通过条件逻辑或动态加载来使用它们。</p><p>需要注意的是，可选依赖项的使用应慎重。在编写代码时，你应该始终考虑可选依赖项的缺失，并编写适当的逻辑来处理它们不存在的情况，以确保项目的健壮性和可移植性。</p><h2 id="engines" tabindex="-1">engines <a class="header-anchor" href="#engines" aria-label="Permalink to &quot;engines&quot;">​</a></h2><p><code>engines</code> 字段用于指定项目运行的 <code>Node.js</code> 版本范围。</p><p>这对于确保你的项目在特定的 <code>Node.js</code> 版本上能够正常运行非常有用，因为不同的 <code>Node.js</code> 版本可能具有不同的语法和功能特性。</p><p><code>engines</code> 字段是一个对象，其中可以包含以下键：</p><ul><li><p><code>node</code>：指定你的项目所需的最低 <code>Node.js</code> 版本或版本范围。你可以使用类似 <code>&gt;=10.0.0</code> 的语法来指定范围。</p></li><li><p><code>npm</code>：指定你的项目所需的最低 <code>npm</code> 版本或版本范围。</p></li></ul><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;engines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=12.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=6.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，<code>engines</code> 字段指定了项目所需的最低 <code>Node.js</code> 版本为 <code>&gt;=12.0.0</code> ，以及所需的最低 <code>npm</code> 版本为 <code>&gt;=6.0.0</code>。</p><p>当其他人尝试安装或使用你的项目时，<code>npm</code> 会检查他们的 <code>Node.js</code> 和 <code>npm</code> 版本是否满足 <code>engines</code> 字段中指定的要求。</p><p>如果不满足要求，<code>npm</code> 会显示警告消息，提醒他们升级 <code>Node.js</code> 或 <code>npm</code> 以满足项目的要求。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>默认情况下，本地环境不满足 <code>engines</code> 设置时，<code>npm</code> 会显示警告消息，但不会阻止安装或使用项目。</p><p>如果想要阻止，那么本地的 <code>npm</code> 需要设置 <code>engine-strict</code> 为 <code>true</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> engine-strict=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div></div><h2 id="os" tabindex="-1">os <a class="header-anchor" href="#os" aria-label="Permalink to &quot;os&quot;">​</a></h2><p><code>os</code> 字段用于指定项目运行的操作系统。</p><p><code>os</code> 字段是一个字符串数组，包含了项目所需的操作系统名称。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;os&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;darwin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;linux&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;!win32&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，<code>os</code> 字段指定了项目所需的操作系统为 <code>darwin</code> 和 <code>linux</code>，非 <code>win32</code>。</p><p>当其他人尝试安装或使用你的项目时，<code>npm</code> 会检查他们的操作系统是否满足 <code>os</code> 字段中指定的要求。</p><p>如果不满足要求，<code>npm</code> 会显示警告消息，提醒他们使用支持的操作系统。</p><h2 id="cpu" tabindex="-1">cpu <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;cpu&quot;">​</a></h2><p><code>cpu</code> 字段用于指定项目运行的 <code>CPU</code> 架构。</p><p><code>cpu</code> 字段是一个字符串数组，包含了项目所需的 <code>CPU</code> 架构名称。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;cpu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;x64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;ia32&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;!arm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，<code>cpu</code> 字段指定了项目所需的 <code>CPU</code> 架构为 <code>x64</code> 和 <code>ia32</code>，非 <code>arm</code>。</p><p>当其他人尝试安装或使用你的项目时，<code>npm</code> 会检查他们的 <code>CPU</code> 架构是否满足 <code>cpu</code> 字段中指定的要求。</p><p>如果不满足要求，<code>npm</code> 会显示警告消息，提醒他们使用支持的 <code>CPU</code> 架构。</p><h2 id="private" tabindex="-1">private <a class="header-anchor" href="#private" aria-label="Permalink to &quot;private&quot;">​</a></h2><p><code>private</code> 字段用于指定包是否为私有包。</p><p><code>private</code> 字段是一个布尔值，如果设置为 <code>true</code>，则表示该包为私有包，否则为公共包。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;private&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当设置为 <code>true</code> 时，<code>npm</code> 会在发布时给出警告。</p><h2 id="publishconfig" tabindex="-1">publishConfig <a class="header-anchor" href="#publishconfig" aria-label="Permalink to &quot;publishConfig&quot;">​</a></h2><p><code>publishConfig</code> 字段用于指定发布包时的配置信息。</p><p><code>publishConfig</code> 字段是一个对象，其中可以包含以下键：</p><ul><li><code>registry</code>：指定发布包时的仓库地址。</li><li><code>access</code>：指定发布包时的访问级别，可以设置为 <code>public</code> 表示公开访问，或者 <code>restricted</code> 表示限制访问。</li><li><code>tag</code>：指定发布包时的标签。</li><li><code>otp</code>：指定发布包时的 <code>OTP</code>。</li></ul><p><strong><code>npm</code> 默认将 <code>@scope/package</code> 视作 <code>private</code> 包</strong>。</p><p>因此，如果你想发布 <code>@scope/package</code> 包，那么需要设置 <code>publishConfig</code> 字段中的 <code>access</code> 属性为 <code>public</code>。</p><p>譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@scope/package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;publishConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;access&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;registry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://registry.npmjs.org/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="workspaces" tabindex="-1">workspaces <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;workspaces&quot;">​</a></h2><p><a href="https://docs.npmjs.com/cli/v9/using-npm/workspaces" target="_blank" rel="noreferrer"></a></p><h2 id="exports" tabindex="-1">exports <a class="header-anchor" href="#exports" aria-label="Permalink to &quot;exports&quot;">​</a></h2><p><code>exports</code> 字段用于指定包的导出方式。</p><p>它与 <code>main</code> 字段类似，但是提供了更多的灵活性。可以将其看做高版本 <code>Node.js</code> 的 <code>main</code> 字段。</p><p><strong>但 <code>exports</code> 只在较高版本的 <code>Node.js</code> 才支持，因此为了保证 <code>Node.js@12</code> 及以下版本的兼容，<code>Node.js</code> 通常依然会设置 <code>main</code> 字段</strong>。</p><p>譬如，假设有 <a href="https://www.npmjs.com/package/only-for-npm-test/v/1.0.2" target="_blank" rel="noreferrer">only-for-npm-test@1.0.2</a> 有以下设置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;only-for-npm-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/main.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>假设我们在此 <code>Node.js@8</code> 版本的基础上，创建了一个 <code>test.js</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;only-for-npm-test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span></code></pre></div><p>那么，此时执行 <code>test.js</code> 文件，是能够正常执行的。因为 <strong><code>Node.js@12</code> 及以下版本不支持 <code>exports</code> 字段, 支持 <code>main</code> 字段。</strong></p><p>让我们把 <code>Node.js</code> 切换到 <code>v16</code> 版本，此时执行 <code>test.js</code> 文件，会报错：</p><blockquote><p><code>[ERR_PACKAGE_PATH_NOT_EXPORTED]: No &quot;exports&quot; main defined</code></p></blockquote><p>此时，需要将代码修改为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;only-for-npm-test/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span></code></pre></div><p>关于 <code>exports</code> 属性的更多介绍，可以参考<a href="https://nodejs.org/api/packages.html#packages_package_entry_points" target="_blank" rel="noreferrer">packages_package_entry_points</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当 <code>package.json</code> 中的 <code>exports</code> 和 <code>main</code> 字段同时存在时，<code>exports</code> 的优先级更高，会覆盖 <code>main</code> 字段。</p><p>而在使用 <code>require(&#39;only-for-npm-test/main.js&#39;)</code>，要注意 <code>main.js</code> 相对 <code>only-for-npm-test</code> 的路径是 <code>./main.js</code>。</p><p>因此，在设置 <code>exports</code> 时，必须设置的是 <code>./main.js</code> 而非 <code>main.js</code>。</p><p>即：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/main.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>而非：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/main.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>否则，会报错：</p><blockquote><p><code>[ERR_PACKAGE_PATH_NOT_EXPORTED]:Package subpath &#39;./main.js&#39; is not defined by &quot;exports&quot;</code></p></blockquote></div>`,227)]))}const E=i(p,[["render",t]]);export{r as __pageData,E as default};
