import{_ as o,c,o as d,b0 as l}from"./chunks/framework.CEggy_nf.js";const u=JSON.parse('{"title":"1.介绍","description":"","frontmatter":{"title":"1.介绍"},"headers":[],"relativePath":"deploy/shell/1.start.md","filePath":"deploy/shell/1.start.md","lastUpdated":1744903825000}'),s={name:"deploy/shell/1.start.md"};function i(a,e,t,h,n,p){return d(),c("div",null,e[0]||(e[0]=[l(`<h2 id="_1-1-shell是什么" tabindex="-1">1-1.shell是什么？ <a class="header-anchor" href="#_1-1-shell是什么" aria-label="Permalink to &quot;1-1.shell是什么？&quot;">​</a></h2><p>我个人认为，<code>shell</code> 就是一系列的 <code>linux</code> 指令的集合。</p><p>它是用户与系统之间交互的媒介。</p><p>它既是一种命令语言，又是一种解释性的编程语言。</p><p><code>Shell</code> 相比 <code>C</code> 等语言的优势在于它是完全嵌入在 <code>Linux</code> 中的，不需要安装，编译。</p><p>学术话的定义如下：</p><ul><li><code>Shell</code> 可以是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（ <code>command line interface</code> ，简写为 <code>CLI</code> ）。 <code>Shell</code> 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。</li><li><code>Shell</code> 也可以是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 <code>Shell</code> 命令写出各种小程序，又称为脚本 <code>script</code>。这些脚本都通过 <code>Shell</code> 的解释执行，而不通过编译。</li><li><code>Shell</code> 还可以是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。</li></ul><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/008i3skNly1gt1gu4lft1j60tw0ta0ub02.jpg" alt="" loading="lazy"></p><h2 id="_1-2-shell的种类" tabindex="-1">1-2.shell的种类 <a class="header-anchor" href="#_1-2-shell的种类" aria-label="Permalink to &quot;1-2.shell的种类&quot;">​</a></h2><ul><li><code>Bourne Shell</code>(<code>/usr/bin/sh</code> 或者 <code>/bin/sh</code>) 目前所有 <code>Shell</code> 的祖先，被安装在几乎所有发源于 <code>Unix</code> 的操作系统上。</li><li><code>Bourne Again Shell</code>(<code>/bin/bash</code>) 是 <code>sh</code> 的一个进阶版本，比 <code>sh</code> 更优秀， <code>bash</code> 是目前大多数 <code>Linux</code> 发行版以及 <code>macOS</code> 操作系统的默认 <code>Shell</code>。</li><li><code>C Shell</code>(<code>/usr/bin/csh</code>) 它的语法类似 <code>C</code> 语言。</li><li><code>K Shell</code>(<code>/usr/bin/ksh</code>) 一般在收费的 <code>Unix</code> 版本上比较多见。</li><li><code>Z Shell</code>(<code>/bin/zsh</code>) 它是一种比较新近的 <code>Shell</code> ，集 <code>bash</code> 、 <code>ksh</code> 和 <code>tcsh</code> 各家之大成。</li></ul><h2 id="_1-3-全局变量" tabindex="-1">1-3.全局变量 <a class="header-anchor" href="#_1-3-全局变量" aria-label="Permalink to &quot;1-3.全局变量&quot;">​</a></h2><p>上述的 <code>/usr/bin/</code> 或者 <code>/bin/</code>，都是系统设置的<strong>环境变量</strong>，可以利用 <code>echo $PATH</code> 来查看所有的环境变量。</p><p>包含 <code>$PATH</code> 的所有的全局变量如下：</p><ul><li><code>BASHPID</code>：<code>Bash</code> 进程的进程 <code>ID</code>。</li><li><code>EDITOR</code>：默认的文本编辑器。</li><li><code>HOME</code>：用户的主目录。</li><li><code>HOST</code>：当前主机的名称。</li><li><code>LANG</code>：字符集以及语言编码，比如 <code>zh_CN.UTF-8</code>。</li><li><code>PATH</code>：由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。</li><li><code>PWD</code>：当前工作目录。</li><li><code>SHELL</code>：<code>Shell</code> 的名字。</li><li><code>TERM</code>：终端类型名，即终端仿真器所用的协议。</li><li><code>UID</code>：当前用户的 <code>ID</code> 编号。</li><li><code>USER</code>：当前用户的用户名。</li></ul><p>全局变量是 <code>Bash</code> 环境自带的变量，进入 <code>Shell</code> 时已经定义好了，可以直接使用。它们通常是系统定义好的。</p><p>可直接在 <code>Shell</code> 中输入 <code>env</code>，来查看所有的全局变量。</p><h2 id="_1-4-配置文件" tabindex="-1">1-4.配置文件 <a class="header-anchor" href="#_1-4-配置文件" aria-label="Permalink to &quot;1-4.配置文件&quot;">​</a></h2><p>全局变量一般都可以在<strong>配置文件</strong>中进行配置。<code>bash</code> 对应的是 <code>.bash_profile</code> 文件，而 <code>zsh</code> 对应的是 <code>.zshrc</code>。</p><p>配置文件的目录一般都放在当前用户的 <code>家</code> 目录下。</p><p>譬如，<code>macos</code> 系统中对应的 <code>家</code> 目录即是 <code>~</code> 或者 <code>/users/your-user-name/</code>。</p><p>以 <code>zsh</code> 为例：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.zshrc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设当前用户名为 jack，也可以使用这个：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /users/jack/.zshrc</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>在 <code>~</code> 目录下的配置文件是<strong>用户级别的配置</strong>。也就是说，只会对当前登录的用户起作用。如果切换了用户，新配置不会存在新用户的 <code>~</code> 目录下，也就不会生效。</li><li>如果想对所有用户生效，要配置 <code>/etc/</code> 目录下的相关对应配置文件。如 <code>/etc/profile</code>、 <code>/etc/zshrc</code> 等。</li></ul></div>`,23)]))}const _=o(s,[["render",i]]);export{u as __pageData,_ as default};
