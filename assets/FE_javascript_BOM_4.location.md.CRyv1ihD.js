import{_ as a,o as t,c as e,aP as n}from"./chunks/framework.D1yHhm2y.js";const d={mounted(){window.addEventListener("load",function(){var s=document.querySelector("#replace");s.addEventListener("click",function(){window.location.replace("https://github.com/Code1994")})})}},k=JSON.parse('{"title":"4.location","description":"","frontmatter":{"title":"4.location"},"headers":[],"relativePath":"FE/javascript/BOM/4.location.md","filePath":"FE/javascript/BOM/4.location.md","lastUpdated":1736067115000}');function o(s,i,h,l,p,r){return t(),e("div",null,i[0]||(i[0]=[n(`<p><code>location</code> 属性包含了页面的 <code>URL</code> 相关信息。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/e6c9d24ely1h21dx26d0uj22940lon2h.jpg" alt="" loading="lazy"></p><h2 id="_4-1-属性" tabindex="-1">4-1.属性 <a class="header-anchor" href="#_4-1-属性" aria-label="Permalink to &quot;4-1.属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td><code>protocol</code></td><td>协议</td></tr><tr><td><code>hostname</code></td><td>域名</td></tr><tr><td><code>port</code></td><td>端口号</td></tr><tr><td><code>pathname</code></td><td>路径</td></tr><tr><td><code>search</code></td><td><code>?</code>及其后面的字符串拼接</td></tr><tr><td><code>hash</code></td><td><code>#</code>及其后面的字符串拼接</td></tr><tr><td><code>href</code></td><td><code>protocol</code>+<code>hostname</code>+<code>port</code>+<code>pathname</code>+<code>search</code>+<code>hash</code></td></tr><tr><td><code>host</code></td><td><code>hostname</code>+<code>port</code></td></tr><tr><td><code>origin</code></td><td><code>protocol</code>+<code>hostname</code>+<code>port</code> (协议、域名、端口号)</td></tr></tbody></table><h2 id="_4-2-方法" tabindex="-1">4-2.方法 <a class="header-anchor" href="#_4-2-方法" aria-label="Permalink to &quot;4-2.方法&quot;">​</a></h2><h3 id="_4-2-1-reload" tabindex="-1">4-2-1.reload <a class="header-anchor" href="#_4-2-1-reload" aria-label="Permalink to &quot;4-2-1.reload&quot;">​</a></h3><p><code>reload</code> 方法可用于网页重新加载。</p><p>相当于刷新页面。外部请求会重新发起，所有资源会重新加载。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="_4-2-2-assign" tabindex="-1">4-2-2.assign <a class="header-anchor" href="#_4-2-2-assign" aria-label="Permalink to &quot;4-2-2.assign&quot;">​</a></h3><p><code>assign</code> 方法可用于将重定向或导航至另一 <code>URL</code>。</p><p>另外该方法会将页面保留在路由记录中，即<strong>能够通过浏览器的 <code>后退</code> 按钮返回</strong>。</p><p>在效果上类似于 <code>vue-router</code> 中的 <code>$router.push()</code>。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assign&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;assign&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assign </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#assign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    assign.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      window.location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://github.com/Code1994&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_4-2-3-replace" tabindex="-1">4-2-3.replace <a class="header-anchor" href="#_4-2-3-replace" aria-label="Permalink to &quot;4-2-3.replace&quot;">​</a></h3><p>与 <code>assign</code> 相同的是，<code>replace</code> 方法也用于将重定向或导航至另一 <code>URL</code>。</p><p>但该方法会将页面保留在路由记录中，即<strong>不能够通过浏览器的 <code>后退</code> 按钮返回</strong>。</p><p>在效果上类似于 <code>vue-router</code> 中的 <code>$router.replace()</code>。</p><p><button id="replace">replace</button></p>`,19)]))}const E=a(d,[["render",o]]);export{k as __pageData,E as default};
