import{_ as e,c as l,o as t,b0 as a,j as s,a as i}from"./chunks/framework.CEggy_nf.js";const g=JSON.parse('{"title":"Scroll","description":"","frontmatter":{"title":"Scroll"},"headers":[],"relativePath":"FE/javascript/DOM/3.scroll.md","filePath":"FE/javascript/DOM/3.scroll.md","lastUpdated":1746174913000}'),p={name:"FE/javascript/DOM/3.scroll.md"};function h(k,n,o,d,r,c){return t(),l("div",null,n[0]||(n[0]=[a('<p>这一节主要来探讨下页面能够滚动的原因以及方式。</p><p><code>Element.getBoundingClientRect()</code></p><h2 id="_1-页面滚动原因" tabindex="-1">1.页面滚动原因 <a class="header-anchor" href="#_1-页面滚动原因" aria-label="Permalink to &quot;1.页面滚动原因&quot;">​</a></h2><p>根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/scroll_event" target="_blank" rel="noreferrer">MDN</a>定义:</p><p><strong>文档视图</strong>或者<strong>一个元素在滚动</strong>时，会触发元素的 <code>scroll</code> 事件。</p><p>所以，我们将页面滚动可以分为两种情况：</p><ol><li><code>document</code> 文档滚动</li><li>某一 <code>element</code> 内部滚动</li></ol><p><strong>前者的页面滚动原因，是元素超出了视口范围，浏览器默认产生的滚动效果</strong>。</p><p><strong>后者的页面滚动原因，是子元素超出了固定范围（定宽或者定高）的容器，而容器需要设置 <code>overflow: scroll;</code></strong>。</p><p>而这俩种形式的滚动，其涉及到的事件监听是有区别的。</p><h2 id="_2-页面滚动事件监听" tabindex="-1">2.页面滚动事件监听 <a class="header-anchor" href="#_2-页面滚动事件监听" aria-label="Permalink to &quot;2.页面滚动事件监听&quot;">​</a></h2><p>事件阶段分为<strong>事件捕获</strong>和<strong>事件冒泡</strong>。</p><p><code>scroll</code> 事件的捕获阶段，在两种场景下是表现一致的。</p><p>而 <code>scroll</code> 事件的冒泡阶段，在两种场景下（<code>document</code> 或者 <code>element</code>）表现不同。</p><p>假如是 <code>document</code>，此时，事件冒泡会冒泡到 <code>document</code> 和 <code>window</code>。</p><p>（但 <code>document</code> 和 <code>window</code> 都是顶级对象，可以看做是一体的。）</p><p>假如是 <code>element</code>，此时，事件冒泡只会冒泡到 <code>element</code>，并不会冒泡到 <code>document</code> 和 <code>window</code>。</p><p>关于这个结论，可以稍显粗暴的总结成，<strong><code>scroll</code> 事件的冒泡阶段只会触发一次</strong>。</p><p>本节参考文章：</p><ul><li><a href="https://ayase.moe/2018/11/20/scroll-event/" target="_blank" rel="noreferrer">你所不知道的scroll事件：为什么scroll事件会失效？</a></li><li><a href="https://taylor-chan.github.io/2019/06/10/%E6%9C%89%E4%BA%9B%E2%80%9C%E5%A5%87%E6%80%AA%E2%80%9D%E7%9A%84scroll%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/" target="_blank" rel="noreferrer">有些“奇怪”的scroll事件监听</a></li></ul><h3 id="_2-1-document-滚动" tabindex="-1">2-1.<code>document</code> 滚动 <a class="header-anchor" href="#_2-1-document-滚动" aria-label="Permalink to &quot;2-1.`document` 滚动&quot;">​</a></h3><p>可以点击本例，进行实际测试 <code>console</code>:</p>',22),s("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/code1994/embed/xxjxmZd?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[i(" See the Pen "),s("a",{href:"https://codepen.io/code1994/pen/xxjxmZd"}," Untitled"),i(" by Code1994 ("),s("a",{href:"https://codepen.io/code1994"},"@code1994"),i(") on "),s("a",{href:"https://codepen.io"},"CodePen"),i(". ")],-1),a(`<p>在本例中，设置了超过页面高度的元素，以使页面自身发生滚动。</p><p>所以本例属于 <strong><code>document</code> 滚动</strong>。</p><p>然后在 <code>window</code>、<code>document</code> 以及 <code>element</code> 上都注册了 <code>scroll</code> 事件监听，分别在事件捕获和事件冒泡阶段进行触发。</p><p>而后的打印结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;scroll capture on window&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;scroll capture on document&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;scroll bubble on document&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;scroll bubble on window&quot;</span></span></code></pre></div><p>根据打印结果可知，<code>scroll</code> 事件监听只在 <code>window</code> 和 <code>document</code> 的捕获和冒泡阶段触发了。</p><h2 id="_2-2-element-滚动" tabindex="-1">2-2.<code>element</code> 滚动 <a class="header-anchor" href="#_2-2-element-滚动" aria-label="Permalink to &quot;2-2.\`element\` 滚动&quot;">​</a></h2><p>可以点击本例，进行实际测试 <code>console</code>:</p>`,8),s("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"element滚动",src:"https://codepen.io/code1994/embed/LYmYMxe?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[i(" See the Pen "),s("a",{href:"https://codepen.io/code1994/pen/LYmYMxe"}," element滚动"),i(" by Code1994 ("),s("a",{href:"https://codepen.io/code1994"},"@code1994"),i(") on "),s("a",{href:"https://codepen.io"},"CodePen"),i(". ")],-1),a(`<p>在本例中，设置了定高的元素，其属性设置了 <code>overflow: scroll;</code> 以使内部元素滚动。</p><p>所以本例属于 <code>element</code> 滚动。</p><p>然后在 <code>window</code>、<code>document</code> 以及 <code>element</code> 上都注册了 <code>scroll</code> 事件监听，分别在事件捕获和事件冒泡阶段进行触发。</p><p>而后的打印结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;scroll capture on window&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;scroll capture on document&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;scroll capture on app&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;scroll bubble on app&quot;</span></span></code></pre></div><p>根据打印结果可知，<code>scroll</code> 事件在冒泡阶段只触发了一次。</p><h2 id="_3-页面滚动相关方法" tabindex="-1">3.页面滚动相关方法 <a class="header-anchor" href="#_3-页面滚动相关方法" aria-label="Permalink to &quot;3.页面滚动相关方法&quot;">​</a></h2><p>本节总结介绍日常开发中，关于页面滚动的一些方法。</p><h3 id="_3-1-获取滚动距离" tabindex="-1">3-1.获取滚动距离 <a class="header-anchor" href="#_3-1-获取滚动距离" aria-label="Permalink to &quot;3-1.获取滚动距离&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getScrollTop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // safari使用的是window.pageYOffset</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.scrollTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.scrollTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.pageYOffset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getScrollLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // safari使用的是window.pageXOffset</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.scrollLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.scrollLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.pageXOffset </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-2-判断元素是否在视口中" tabindex="-1">3-2.判断元素是否在视口中 <a class="header-anchor" href="#_3-2-判断元素是否在视口中" aria-label="Permalink to &quot;3-2.判断元素是否在视口中&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getElementStatusInViewPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ele</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 浏览器高度兼容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> windowHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.innerHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.clientHeight</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> offsetHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.offsetHeight</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rectInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ele)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rectInfo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在视口之下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowHeight) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;UNSHOW&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 正在出现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowHeight) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHOWING&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在视口中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowHeight) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHOWED&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 正在离开视口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offsetHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;LEAVING&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 已经离开视口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;LEAVED&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-3-获取元素距离视口的上下左右边界" tabindex="-1">3-3.获取元素距离视口的上下左右边界 <a class="header-anchor" href="#_3-3-获取元素距离视口的上下左右边界" aria-label="Permalink to &quot;3-3.获取元素距离视口的上下左右边界&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 距离视窗的距离</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // html元素对象的上边框的宽度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> top</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top: rect.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bottom: rect.bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    left: rect.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    right: rect.right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-4-获取某元素参照body的offsettop" tabindex="-1">3-4.获取某元素参照body的offsetTop <a class="header-anchor" href="#_3-4-获取某元素参照body的offsettop" aria-label="Permalink to &quot;3-4.获取某元素参照body的offsetTop&quot;">​</a></h3><p><strong>不适用于 <code>position: fixed;</code> 元素</strong>。</p><p>因为设置了 <code>position: fixed;</code> 的元素，其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent" target="_blank" rel="noreferrer">offsetParent</a> 是 <code>null</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getOffsetTop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.offsetTop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.offsetParent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-5-滚动到指定位置" tabindex="-1">3-5.滚动到指定位置 <a class="header-anchor" href="#_3-5-滚动到指定位置" aria-label="Permalink to &quot;3-5.滚动到指定位置&quot;">​</a></h3><p><code>JavaScript</code> 提供了相关方法，以使页面滚动到对应位置。</p><p>比较简单的一种方式是 <code>element.scrollIntoView()</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.scroll-target&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollIntoView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behavior: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;smooth&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>但在实际操作中，会发现 <code>scrollIntoView</code> 方法并不是 “十分好用”。</p><p>在这种情况下，可以<strong>计算目标元素需要偏移的距离</strong>，并使用 <code>window.scrollTo</code> “精确”的使页面滚动到指定位置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behavior: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;smooth&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>其中 <code>top</code> 对应顶部滚动距离，<code>left</code> 对应左侧滚动距离。</p><p>而 <strong><code>top</code> 和 <code>left</code> 的具体值的获取，可以利用本节中已经声明的方法</strong>，有两种方式：</p><ol><li><code>getScrollTop</code> 或 <code>getScrollLeft</code>， 结合 <code>getRect</code>。</li><li>直接利用 <code>getOffsetTop</code>。</li></ol><p>其中 <code>behavior</code> 属性可设置为 <code>smooth</code>，页面会平滑过渡。</p><p>该属性也可以使用 <code>css</code> 属性进行替代。</p><p>在<strong>监听 <code>scroll</code> 事件的容器上</strong>设置：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.scroll-target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  scroll-behavior</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;smooth&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-页面滚动到指定位置" tabindex="-1">4.页面滚动到指定位置 <a class="header-anchor" href="#_4-页面滚动到指定位置" aria-label="Permalink to &quot;4.页面滚动到指定位置&quot;">​</a></h2><p>在本节中，我们介绍下，实现<strong>页面滚动到指定位置</strong>的几种方式。</p><h3 id="_4-1-a-链接" tabindex="-1">4-1.<code>a</code> 链接 <a class="header-anchor" href="#_4-1-a-链接" aria-label="Permalink to &quot;4-1.\`a\` 链接&quot;">​</a></h3><p>该方法是 “原始时代” 流传下来的方式。</p><p>操作方便、实现简单。</p><p>但如果想要体验友好的话，需要设置 <code>css</code> 属性 <code>scroll-behavior: &#39;smooth&#39;;</code>。</p>`,38),s("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"1.scrollTo-a-link",src:"https://codepen.io/code1994/embed/PoeoXdr?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[i(" See the Pen "),s("a",{href:"https://codepen.io/code1994/pen/PoeoXdr"}," 1.scrollTo-a-link"),i(" by Code1994 ("),s("a",{href:"https://codepen.io/code1994"},"@code1994"),i(") on "),s("a",{href:"https://codepen.io"},"CodePen"),i(". ")],-1),s("h3",{id:"_4-2-scrollintoview",tabindex:"-1"},[i("4-2.scrollIntoView "),s("a",{class:"header-anchor",href:"#_4-2-scrollintoview","aria-label":'Permalink to "4-2.scrollIntoView"'},"​")],-1),s("p",null,[s("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView",target:"_blank",rel:"noreferrer"},"scrollIntoView")],-1),s("p",null,[s("strong",null,"取决于其它元素的布局情况，此元素可能不会完全滚动到顶端或底端"),i("。")],-1),s("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"2.scrollTo-scrollIntoView",src:"https://codepen.io/code1994/embed/mdLdaNZ?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[i(" See the Pen "),s("a",{href:"https://codepen.io/code1994/pen/mdLdaNZ"}," 2.scrollTo-scrollIntoView"),i(" by Code1994 ("),s("a",{href:"https://codepen.io/code1994"},"@code1994"),i(") on "),s("a",{href:"https://codepen.io"},"CodePen"),i(". ")],-1),a('<h3 id="_4-3-scrollto" tabindex="-1">4-3.scrollTo <a class="header-anchor" href="#_4-3-scrollto" aria-label="Permalink to &quot;4-3.scrollTo&quot;">​</a></h3><p>关于 <code>window.scrollTo</code> 方法的重点在于<strong>如何计算滚动距离</strong>。</p><p>在本例中利用了 <code>scrollTop</code> 属性结合 <code>getBoundingClientRect</code> 方法。</p><p>此外也可以使用我们在前俩节中提到的 <code>offsetTop</code> 进行计算。</p>',4),s("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"3.scrollTo-scrollTo",src:"https://codepen.io/code1994/embed/PoeoVqw?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[i(" See the Pen "),s("a",{href:"https://codepen.io/code1994/pen/PoeoVqw"}," 3.scrollTo-scrollTo"),i(" by Code1994 ("),s("a",{href:"https://codepen.io/code1994"},"@code1994"),i(") on "),s("a",{href:"https://codepen.io"},"CodePen"),i(". ")],-1),s("p",null,[i("相应的，也可以利用对应 "),s("code",null,"API"),i(" 来实现横向滚动：")],-1),s("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"4.scrollTo-horizon",src:"https://codepen.io/code1994/embed/JjvjxEw?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[i(" See the Pen "),s("a",{href:"https://codepen.io/code1994/pen/JjvjxEw"}," 4.scrollTo-horizon"),i(" by Code1994 ("),s("a",{href:"https://codepen.io/code1994"},"@code1994"),i(") on "),s("a",{href:"https://codepen.io"},"CodePen"),i(". ")],-1),a(`<h2 id="_5-滚动条" tabindex="-1">5.滚动条 <a class="header-anchor" href="#_5-滚动条" aria-label="Permalink to &quot;5.滚动条&quot;">​</a></h2><p>在 <code>scroll</code> 相关需求中，有可能需要设置滚动条。</p><p>在此粗略记录下。</p><h3 id="_5-1-隐藏滚动条" tabindex="-1">5-1.隐藏滚动条 <a class="header-anchor" href="#_5-1-隐藏滚动条" aria-label="Permalink to &quot;5-1.隐藏滚动条&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 隐藏滚动条 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::-webkit-scrollbar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Chrome Safari */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  scrollbar-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* firefox */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -ms-overflow-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* IE 10+ */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* overflow-x: hidden; */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* overflow-y: auto; */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,5)]))}const y=e(p,[["render",h]]);export{g as __pageData,y as default};
