import{_ as i,c as a,o as n,b0 as t}from"./chunks/framework.CEggy_nf.js";const o=JSON.parse('{"title":"5.Integrating with Linters","description":"","frontmatter":{"title":"5.Integrating with Linters"},"headers":[],"relativePath":"engineer/prettier/5.integrate.md","filePath":"engineer/prettier/5.integrate.md","lastUpdated":1744344421000}'),e={name:"engineer/prettier/5.integrate.md"};function p(l,s,r,h,k,E){return n(),a("div",null,s[0]||(s[0]=[t(`<p>本节重点说明如何将 <code>Prettier</code> 集成到 <code>Eslint</code> 代码检测工具中。</p><h2 id="eslint-config-prettier" tabindex="-1">eslint-config-prettier <a class="header-anchor" href="#eslint-config-prettier" aria-label="Permalink to &quot;eslint-config-prettier&quot;">​</a></h2><p>首先要清楚的一点是，<strong><code>Prettier</code> 与 <code>Eslint</code> 的部分 <code>rules</code> 设置是存在冲突的</strong>。</p><p>如果不作任何变更，那么在使用 <code>Eslint</code> 格式化成功的代码，往往在经过 <code>Prettier</code> 格式化后，又会重新变乱。</p><p>因此，我们需要利用<a href="https://www.npmjs.com/package/eslint-config-prettier" target="_blank" rel="noreferrer">eslint-config-prettier</a>将 <code>Eslint</code> 中代码格式化的功能关闭。</p><p>也就是说，通过配置 <code>eslint-config-prettier</code> 能将代码格式化功能交给 <code>Prettier</code> 处理，<code>Eslint</code> 专心做静态代码检测即可。</p><h2 id="eslint-plugin-prettier" tabindex="-1">eslint-plugin-prettier <a class="header-anchor" href="#eslint-plugin-prettier" aria-label="Permalink to &quot;eslint-plugin-prettier&quot;">​</a></h2><p>通过 <code>eslint-config-prettier</code> 关闭了冲突 <code>rules</code> 还不够，我们还需要使用 <code>Prettier</code> 的自定义规则。</p><p>因此就需要利用<a href="https://www.npmjs.com/package/eslint-plugin-prettier" target="_blank" rel="noreferrer">eslint-plugin-prettier</a>。</p><p>在 <code>.eslintrc</code> 中直接使用 <code>plugin:prettier/recommended</code> 即可：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	root: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	env: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		node: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	extends: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;eslint:recommended&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;plugin:prettier/recommended&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	parserOptions: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// @babel/eslint-parser can transform new grammar better than default espree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		parser: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/eslint-parser&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&#39;no-unused-vars&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				// Don&#39;t lint unused function params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				args: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>查阅 <code>eslint-plugin-prettier</code> 的 <code>recommended</code> 源码会发现，它的核心功能是：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prettier/prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;arrow-body-style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prefer-arrow-callback&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;off&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>也就说 <code>eslint-plugin-prettier</code> 已经自动帮助使用者引入了 <code>eslint-config-prettier</code>。</p>`,14)]))}const c=i(e,[["render",p]]);export{o as __pageData,c as default};
