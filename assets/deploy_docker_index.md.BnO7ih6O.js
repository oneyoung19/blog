import{_ as e,c as d,o as c,b0 as t}from"./chunks/framework.D8aj9ziZ.js";const g=JSON.parse('{"title":"前言","description":"","frontmatter":{"title":"前言"},"headers":[],"relativePath":"deploy/docker/index.md","filePath":"deploy/docker/index.md","lastUpdated":1749894304000}'),r={name:"deploy/docker/index.md"};function n(p,o,s,a,i,_){return c(),d("div",null,o[0]||(o[0]=[t("<p>有这样一个场景，我们在开发一个应用，然后将其部署到服务器上，但是在部署的过程中，会遇到了<strong>平台不一致或者环境不一致等问题</strong>。</p><p>譬如，我们在 <code>Windows</code> 上开发了一个应用，然后将其部署到 <code>Linux</code> 上，这时候就会出现问题。</p><p>因为在 <code>Windows</code> 上安装的依赖，在 <code>Linux</code> 上可能就没有，或者版本不一致。</p><p><strong>第一种解决办法是采用虚拟机</strong>，譬如在 <code>Windows</code> 上安装 <code>VirtualBox</code>，然后在 <code>VirtualBox</code> 中安装 <code>Linux</code>，然后在 <code>Linux</code> 中部署应用。</p><p><strong>虚拟机的原理是在操作系统上再创建一个操作系统，这样就可以在虚拟机中运行不同的操作系统</strong>。</p><p>而操作系统一般体积较大，因此在实际使用虚拟机的时候，会发现<strong>虚拟机的性能比较差，而且启动速度慢</strong>。</p><p><strong>第二种解决办法是采用 <code>Docker</code></strong>。</p><p><code>Docker</code> 可以让我们在不同的操作系统上运行相同的应用，而且不需要担心环境的问题。</p><p><strong>相比于虚拟机创建一个新操作系统，<code>Docker</code> 是在现有操作系统上创建一个容器，在容器中运行不同的应用</strong>。</p><p>因此 <code>Docker</code> 的性能比虚拟机要好，而且启动速度也比虚拟机快。</p>",10)]))}const x=e(r,[["render",n]]);export{g as __pageData,x as default};
