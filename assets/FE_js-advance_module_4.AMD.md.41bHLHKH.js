import{_ as i,c as a,o as e,b0 as n}from"./chunks/framework.D8aj9ziZ.js";const t="/blog/assets/require.demo.drawio.BLs6xvQX.png",p="/blog/assets/amd.drawio.BQa9tYi8.png",g=JSON.parse('{"title":"4.AMD","description":"","frontmatter":{"title":"4.AMD"},"headers":[],"relativePath":"FE/js-advance/module/4.AMD.md","filePath":"FE/js-advance/module/4.AMD.md","lastUpdated":1750216722000}'),l={name:"FE/js-advance/module/4.AMD.md"};function h(k,s,d,o,c,r){return e(),a("div",null,s[0]||(s[0]=[n(`<p><code>AMD</code> 的全称是 <code>Asynchronous Module Definition</code>。即<strong>异步模块定义</strong>。</p><p><code>AMD</code> 规范的具体实现是 <code>RequireJS</code>。</p><h2 id="_4-1-基本用法" tabindex="-1">4-1.基本用法 <a class="header-anchor" href="#_4-1-基本用法" aria-label="Permalink to &quot;4-1.基本用法&quot;">​</a></h2><p><strong>这里只声明基本用法形式</strong>。</p><p>模板文件 <code>index.html</code>:</p><ol><li>利用 <code>script</code> 标签引入 <code>require.js</code>。</li><li>声明 <code>data-main</code> 自定义属性定义<strong>入口文件</strong>。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/main.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/require.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>入口文件 <code>main.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/modules/a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>a.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/modules/b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/modules/d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>b.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/modules/c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>c.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;c&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>d.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/modules/e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;d&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>e.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;e&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>其引用关系如下图：</p><p><img src="`+t+'" alt="" loading="lazy"></p><p>可以看出，<code>require.js</code> 的基本用法是：</p><ol><li>利用 <code>data-main</code> 属性声明入口文件。</li><li>入口文件利用 <code>require</code> 导入依赖。</li><li>模块使用 <code>define</code> 声明，而且相关依赖会提前在 <code>define</code> 中声明。</li></ol><h2 id="_4-2-requirejs的基本原理" tabindex="-1">4-2.requireJs的基本原理 <a class="header-anchor" href="#_4-2-requirejs的基本原理" aria-label="Permalink to &quot;4-2.requireJs的基本原理&quot;">​</a></h2><p><img src="'+p+'" alt="" loading="lazy"></p><p>对于 <code>commonJS</code> 模块化规范来说，它是同步读取磁盘内的文件，很快，不会有延时，而且 <code>node</code> 能够读取、处理文件。</p><p>但对于浏览器端来说，<code>JS</code> 并不能直接读取操作文件。</p><p>那浏览器端的模块化具体是怎样实现的呢？（这个问题在之前，对我来讲，一直是疑问和困扰，百思不得其解。）</p><p>后来我明白了<code>AMD</code> 和 <code>CMD</code> 都是利用的动态脚本以及其对应的 <code>onload</code> 事件监听。</p><p><code>AMD</code> 表示的是 <code>Asynchronous Module Definition</code>，其中的 <code>Asynchronous</code> 表示的就是 <code>&lt;script&gt;</code> 标签的 <code>async</code> 性质。</p><p>即异步加载，不阻塞 <code>DOM</code>。异步加载<strong>所有依赖</strong>后，再执行 <code>factory</code> 回调函数。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要注意的两个特点：</p><ol><li><code>RequireJS</code> 的依赖需要提前声明好。</li><li><code>RequireJS</code> 模块在加载完所有依赖后，会将各自的 <code>exports</code> 作为参数传入该模块对应的 <code>factory</code> 函数中，并立即执行该 <code>factory</code> 函数，也就是说每一个 <code>define</code> 的 <code>factory</code> 回调函数在执行时已经能够拿到其依赖项目的 <code>exports</code> 导出。</li></ol><p>这两点也是 <code>AMD</code> 与 <code>CMD</code> 的差异，下一节在 <code>CMD</code> 中会详述。</p></div><p><code>RequireJS</code> 源码晦涩冗余，比较难以梳理其逻辑关系。</p><p>这里推荐一个简化版的 <a href="https://github.com/ZhiCYue/requireJs-analysis" target="_blank" rel="noreferrer">RequireJS Analysis</a>。</p><h2 id="_4-3-r-js" tabindex="-1">4-3.r.js <a class="header-anchor" href="#_4-3-r-js" aria-label="Permalink to &quot;4-3.r.js&quot;">​</a></h2><p>我们已经知道 <code>require.js</code> 是利用动态脚本加载依赖。</p><p>那么显而易见的一个问题是：</p><p>当项目越来越大，依赖越来越多，会发起越来越多的 <code>http</code> 请求以加载依赖。</p><p>这对于项目性能，无疑是一种巨大的损耗。</p><p>出于这种角度的考虑，<code>requireJs</code> 团队他们提供了 <a href="https://github.com/requirejs/r.js" target="_blank" rel="noreferrer">r.js</a>。</p><p>该工具会将依赖打包以减少 <code>http</code> 请求。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们可以在生产环境下，利用该工具进行处置依赖，从而提升生产环境的项目性能。</p></div>',42)]))}const y=i(l,[["render",h]]);export{g as __pageData,y as default};
