import{_ as o,c,o as d,b0 as r}from"./chunks/framework.CEggy_nf.js";const _=JSON.parse('{"title":"6.性能 & 集成","description":"","frontmatter":{"title":"6.性能 & 集成"},"headers":[],"relativePath":"FE/html5/6.integration.md","filePath":"FE/html5/6.integration.md","lastUpdated":1744257956000}'),a={name:"FE/html5/6.integration.md"};function t(i,e,l,n,s,p){return d(),c("div",null,e[0]||(e[0]=[r('<p><code>HTML5</code> 带来了许多性能优化，如异步加载脚本、<code>defer</code> 属性、本地存储等，同时支持更有效地利用计算机硬件资源，提高了 <code>Web</code> 应用的性能和响应速度。</p><p>关于 <code>HTML5</code> 的性能和集成，有以下几个方面：</p><ol><li><p>异步加载脚本：<code>HTML5</code> 中，可以通过<code>async</code>和<code>defer</code>属性来异步加载脚本文件。<code>async</code>属性使得脚本在下载完成后立即执行，而不会阻塞页面的解析和渲染。<code>defer</code> 属性则使得脚本在文档解析完毕后执行，这样可以保证脚本在文档完整加载后再执行，而不会阻塞页面的渲染。</p></li><li><p><code>Web Worker</code>：允许在后台线程中执行耗时的任务，不影响主线程的性能。这在处理计算密集型任务时非常有用，可以提高应用的响应速度。</p></li><li><p><code>Web Assembly (Wasm)</code>：<code>Web Assembly</code> 是一种低级的编程语言，它可以在浏览器中高效地运行计算密集型任务。与 <code>JavaScript</code> 相比，<code>Wasm</code> 的执行速度更快，因为它直接编译成机器码运行。</p></li><li><p><code>Service Worker</code>：<code>Service Worker</code> 是一种特殊的 <code>Web Worker</code>，它可以拦截网络请求并缓存资源，实现离线访问和更好的缓存管理。通过 <code>Service Worker</code>，可以提高应用的性能，并在离线状态下继续提供核心功能。</p></li><li><p><code>LocalStorage</code> 和 <code>IndexedDB</code>：<code>HTML5</code> 引入了本地存储技术，如 <code>LocalStorage</code> 和 <code>IndexedDB</code>，允许将数据存储在客户端，避免了频繁的服务器请求。这样可以提高应用的加载速度和减轻服务器的负担。</p></li><li><p><code>requestAnimationFrame</code>：<code>requestAnimationFrame</code> 是一种优化动画效果的方法。它会在浏览器的绘制周期内执行动画，确保动画的流畅性，而不会导致掉帧和卡顿。</p></li><li><p><code>GPU</code> 加速：<code>HTML5</code> 引入了 <code>Canvas</code> 和 <code>WebGL</code>，使得在浏览器中绘制图形和实现 <code>3D</code> 效果成为可能。<code>WebGL</code> 使用 <code>GPU</code> 进行图形渲染，可以获得更高的性能，尤其对于需要复杂图形的应用来说。</p></li><li><p><code>WebP</code> 和 <code>WebM</code>：<code>HTML5</code> 对多媒体格式的支持也有一定的性能优化。<code>WebP</code> 是一种图像格式，可以提供更小的文件尺寸和更好的图像质量，而 <code>WebM</code> 是一种视频格式，能够实现更高的压缩比和更好的视频播放性能。</p></li></ol><h2 id="_1-worker" tabindex="-1">1.Worker <a class="header-anchor" href="#_1-worker" aria-label="Permalink to &quot;1.Worker&quot;">​</a></h2><p><a href="/blog/FE/worker/1.WebWorker.html" target="_blank">看这里吧</a></p><h2 id="_2-service-worker" tabindex="-1">2.Service Worker <a class="header-anchor" href="#_2-service-worker" aria-label="Permalink to &quot;2.Service Worker&quot;">​</a></h2><h2 id="_3-requestanimationframe" tabindex="-1">3.requestAnimationFrame <a class="header-anchor" href="#_3-requestanimationframe" aria-label="Permalink to &quot;3.requestAnimationFrame&quot;">​</a></h2><h2 id="_4-gpu加速" tabindex="-1">4.GPU加速 <a class="header-anchor" href="#_4-gpu加速" aria-label="Permalink to &quot;4.GPU加速&quot;">​</a></h2>',8)]))}const h=o(a,[["render",t]]);export{_ as __pageData,h as default};
