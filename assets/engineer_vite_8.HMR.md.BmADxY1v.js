import{_ as i,c as a,o as t,b0 as e}from"./chunks/framework.CEggy_nf.js";const c=JSON.parse('{"title":"8.HMR","description":"","frontmatter":{"title":"8.HMR"},"headers":[],"relativePath":"engineer/vite/8.HMR.md","filePath":"engineer/vite/8.HMR.md","lastUpdated":1745137493000}'),n={name:"engineer/vite/8.HMR.md"};function h(l,s,p,k,r,o){return t(),a("div",null,s[0]||(s[0]=[e(`<p>本节内容是笔者阅读了下 <code>vite</code> 的部分源码，又结合参考文章梳理形成。个人理解，仅供参阅。</p><ul><li><a href="https://sorrycc.com/hot-module-replacement-is-easy/" target="_blank" rel="noreferrer">HMR很简单!</a></li><li><a href="https://bjornlu.com/blog/hot-module-replacement-is-easy" target="_blank" rel="noreferrer">HMR is easy!</a></li></ul><p>当某一文件更新时，<code>HMR</code> 的完整流程如下：</p><ol><li><code>node server</code> 服务器利用 <code>chokidar</code> 监听到<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/index.ts#L798-L799" target="_blank" rel="noreferrer">目标文件更改</a>；</li><li>根据目标文件更改，根据<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/hmr.ts#L341-L342" target="_blank" rel="noreferrer">传播边界</a>检测热更新模块；</li><li>获取到热更新涉及到的模块后，利用 <code>socket</code> <a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/hmr.ts#L120-L121" target="_blank" rel="noreferrer">通知客户端</a>，其 <code>socket</code> 数据格式大致如下：</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;update&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;updates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js-update&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1717489737179</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/src/store/count.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;acceptedPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/src/store/count.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;explicitImportRequired&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;isWithinCircularImport&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;ssrInvalidates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li>客户端接收到通知后，根据上述数据，进行<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/shared/hmr.ts#L269-L270" target="_blank" rel="noreferrer">队列更新</a>，其原理是<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/client/client.ts#L144-L145" target="_blank" rel="noreferrer">利用 <code>import</code> 懒加载新的文件</a>；</li><li>当加载完成新文件后，会执行<strong>上一次加载</strong>已经注册的<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/shared/hmr.ts#L299-L300" target="_blank" rel="noreferrer">import.meta.dispose</a>和<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/shared/hmr.ts#L310-L311" target="_blank" rel="noreferrer">import.meta.accept</a>回调函数。</li><li>目前 <code>vite</code> 会自动向 <code>.vue</code> 单文件等注入如下热更新脚本：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .vue单文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mod) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_rerender_only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_rerender_only) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    __VUE_HMR_RUNTIME__.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rerender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(updated.__hmrId, updated.render)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    __VUE_HMR_RUNTIME__.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(updated.__hmrId, updated)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .css</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__vite__removeStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__vite__id))</span></span></code></pre></div><h2 id="vite-client" tabindex="-1">@vite/client <a class="header-anchor" href="#vite-client" aria-label="Permalink to &quot;@vite/client&quot;">​</a></h2><p><code>vite</code> 本地启动了 <code>node server</code>，托管了 <code>index.html</code>。</p><p>并且在 <code>index.html</code> 中注入了<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/client/client.ts" target="_blank" rel="noreferrer">@vite/client</a>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/@vite/client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>@vite/client</code> 大致做了以下几种功能：</p><ol><li>建立 <code>websocket</code> 以实现客户端和服务器的实时通信；</li><li>创建 <code>hmrClient</code> 热更新客户端，根据服务器推送数据，<code>import</code> 懒加载新文件。</li></ol><h2 id="生命周期与操作" tabindex="-1">生命周期与操作 <a class="header-anchor" href="#生命周期与操作" aria-label="Permalink to &quot;生命周期与操作&quot;">​</a></h2><p><a href="https://vitejs.cn/vite3-cn/guide/api-hmr.html" target="_blank" rel="noreferrer">HMR API</a></p><h3 id="import-meta-hot-accept-deps-cb" tabindex="-1">import.meta.hot.accept([deps], cb) <a class="header-anchor" href="#import-meta-hot-accept-deps-cb" aria-label="Permalink to &quot;import.meta.hot.accept([deps], cb)&quot;">​</a></h3><ul><li><p>模块自更新时触发回调；</p></li><li><p>或者指定模块更新时触发该监听回调。</p></li></ul><h3 id="import-meta-hot-dispose-cb" tabindex="-1">import.meta.hot.dispose(cb) <a class="header-anchor" href="#import-meta-hot-dispose-cb" aria-label="Permalink to &quot;import.meta.hot.dispose(cb)&quot;">​</a></h3><p>旧模块被舍弃时触发回调</p><h3 id="import-meta-hot-decline" tabindex="-1">import.meta.hot.decline() <a class="header-anchor" href="#import-meta-hot-decline" aria-label="Permalink to &quot;import.meta.hot.decline()&quot;">​</a></h3><p>该操作，传播边界依旧有效，但会停止热更新。</p><h3 id="import-meta-hot-invalidate" tabindex="-1">import.meta.hot.invalidate() <a class="header-anchor" href="#import-meta-hot-invalidate" aria-label="Permalink to &quot;import.meta.hot.invalidate()&quot;">​</a></h3><p>该操作，会使得已有的传播边界失效，继续向上搜索边界以更新。</p><h2 id="传播边界" tabindex="-1">传播边界 <a class="header-anchor" href="#传播边界" aria-label="Permalink to &quot;传播边界&quot;">​</a></h2><p>当某文件更新时，会根据依赖树查找直至 <code>import.meta.accept</code> 存在，而存在 <code>import.meta.accept</code> 的文件会作为更新入口，进行热更新加载渲染。</p><p><a href="https://bjornlu.com/blog/hot-module-replacement-is-easy#hmr-propagation" target="_blank" rel="noreferrer">HMR Propagation</a></p><h2 id="hmr-in-pinia" tabindex="-1">HMR In Pinia <a class="header-anchor" href="#hmr-in-pinia" aria-label="Permalink to &quot;HMR In Pinia&quot;">​</a></h2><p>当利用 <code>Pinia</code> 创建 <code>store</code> 时，默认情况下，当 <code>store</code> 更新时，<code>vite</code> 会根据传播边界热更新 <code>SFC</code> 文件。</p><p>虽然此过程中重新加载了新的 <code>store</code> 文件，但并不会触发 <code>view</code> 视图层的 <code>store</code> 数据更新。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>测试发现，在此种默认情况下，即使 <code>store</code> 文件懒加载了，但 <code>store</code> 内部判断了如果是 <code>hot</code> 热更新，则<a href="https://github.com/vuejs/pinia/blob/v2/packages/pinia/src/store.ts#L493-L494" target="_blank" rel="noreferrer">使用已备份的 <code>store</code></a>。</p></div><p>为此，我们需要在对应 <code>store</code> 文件中添加：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { acceptHMRUpdate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">acceptHMRUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(useYourStore, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>添加完成之后，再更新 <code>store</code> 文件，传播边界会仅限于该文件，且 <code>acceptHMRUpdate</code> 内部会触发视图层数据更新。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 <code>store</code> 内修改某一 <code>state</code> 值并不会触发热更新，但新增或删除某一 <code>state</code> 值，则会触发热更新。</p><p>关于此特性，详见<a href="https://github.com/vuejs/pinia/issues/843" target="_blank" rel="noreferrer">#843</a>。</p></div>`,35)]))}const E=i(n,[["render",h]]);export{c as __pageData,E as default};
