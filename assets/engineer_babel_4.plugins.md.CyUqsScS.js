import{_ as a,c as i,o as n,b0 as e}from"./chunks/framework.CEggy_nf.js";const c=JSON.parse('{"title":"plugins","description":"","frontmatter":{"title":"plugins"},"headers":[],"relativePath":"engineer/babel/4.plugins.md","filePath":"engineer/babel/4.plugins.md","lastUpdated":1746176938000}'),t={name:"engineer/babel/4.plugins.md"};function l(p,s,o,r,h,k){return n(),i("div",null,s[0]||(s[0]=[e(`<p>就像前文已经提过的，<code>babel</code> 的核心转换功能是在<code>@babel/core</code>。<code>@babel/core</code> 本身只是一个转换器，如果没有配置 <code>plugins</code> 声明转换规则的话，<code>babel</code> 什么都不会做。</p><p>插件分为两类：<strong>转换插件</strong> 与 <strong>语法插件</strong>。</p><h2 id="转换插件" tabindex="-1">转换插件 <a class="header-anchor" href="#转换插件" aria-label="Permalink to &quot;转换插件&quot;">​</a></h2><p>在 <code>.babelrc</code> 中配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/plugin-transfrom-arrow-fuctions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里列举些 <code>es6</code> 常见的插件：</p><p>箭头函数：<a href="https://www.babeljs.cn/docs/babel-plugin-transform-arrow-functions" target="_blank" rel="noreferrer">@babel/plugin-transform-arrow-functions</a></p><p>class: <a href="https://www.babeljs.cn/docs/babel-plugin-transform-classes" target="_blank" rel="noreferrer">@babel/plugin-transform-classes</a></p><p>for of: <a href="https://www.babeljs.cn/docs/babel-plugin-transform-for-of" target="_blank" rel="noreferrer">@babel/plugin-transform-for-of</a></p><h2 id="语法插件" tabindex="-1">语法插件 <a class="header-anchor" href="#语法插件" aria-label="Permalink to &quot;语法插件&quot;">​</a></h2><p>在 <code>.babelrc</code> 中配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;parserOpts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在使用某些<strong>转换插件</strong>的时候，会默认启用对应依赖的<strong>语法插件</strong>。</p><p>所以一般我们不用过于注重这类插件的种类和配置。</p><h2 id="插件顺序" tabindex="-1">插件顺序 <a class="header-anchor" href="#插件顺序" aria-label="Permalink to &quot;插件顺序&quot;">​</a></h2><ul><li>插件在 <code>presets</code> 前执行。</li><li>插件顺序从前往后运行。</li><li><code>presets</code> 顺序是颠倒的（从后往前）。这个是为了由于 <code>babel</code> 版本的迭代原因，保证向下兼容。</li></ul><h2 id="插件参数" tabindex="-1">插件参数 <a class="header-anchor" href="#插件参数" aria-label="Permalink to &quot;插件参数&quot;">​</a></h2><p>给插件设置参数的时候，可以将插件项写作<strong>数组形式</strong>。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@babel/plugin-transform-arrow-functions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,19)]))}const E=a(t,[["render",l]]);export{c as __pageData,E as default};
