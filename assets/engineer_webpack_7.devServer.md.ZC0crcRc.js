import{_ as i,c as a,o as e,b0 as n}from"./chunks/framework.CEggy_nf.js";const c=JSON.parse('{"title":"devServer","description":"","frontmatter":{"title":"devServer"},"headers":[],"relativePath":"engineer/webpack/7.devServer.md","filePath":"engineer/webpack/7.devServer.md","lastUpdated":1744950676000}'),l={name:"engineer/webpack/7.devServer.md"};function t(h,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>为了在日常中的开发效率更高、更容易调试代码，我们一般都会配置一套开发环境下的专用配置。而这其中最为核心的就是<code>devServer</code>。下边我们通过例子来一步步了解。</p><p>本章例子完整代码已放在<a href="https://github.com/Code1994/dev-server-demo" target="_blank" rel="noreferrer">github</a></p><p>为防版本差别，先放出该例的版本依赖：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev-server-demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MIT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack-dev-server --progress --config webpack/webpack.dev.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack --config webpack/webpack.prod.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;clean-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;copy-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;css-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^5.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;friendly-errors-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.7.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;html-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.5.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.1.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;mini-css-extract-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;portfinder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.28&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;webpack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4.29.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;webpack-cli&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.2.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;webpack-dev-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3.11.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;webpack-merge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^5.4.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-webpack-dev-server" tabindex="-1">2.webpack-dev-server <a class="header-anchor" href="#_2-webpack-dev-server" aria-label="Permalink to &quot;2.webpack-dev-server&quot;">​</a></h2><p><code>webpack</code>在开发环境下有专门的依赖来运行打包，即<code>webpack-dev-server</code>。安装之后，配置<code>scripts</code>。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack-dev-server --inline --progress -config webpack/webpack.dev.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中，<code>--inline</code>是将项目以<code>inline</code>模式在网页中打开，可省略，默认<code>inline</code>模式。而<code>--progress</code>是在控制台显示打包进程，也可省略，无伤大雅，省略了控制台反而清爽。总而言之，这俩项不重要。</p><p>执行<code>yarn dev</code>，此时项目已可打开，默认地址<code>http://localhost:8080</code>。更改项目中的代码，也会发现页面会重新刷新，此时的更新模式为<code>live reload</code>，即实时重载页面。</p><p>如果想要更改开发环境的某些配置，可以在<code>devServer</code>下进行更改。</p><h2 id="_3-地址相关" tabindex="-1">3.地址相关 <a class="header-anchor" href="#_3-地址相关" aria-label="Permalink to &quot;3.地址相关&quot;">​</a></h2><h3 id="_3-1-devserver-host" tabindex="-1">3-1.devServer.host <a class="header-anchor" href="#_3-1-devserver-host" aria-label="Permalink to &quot;3-1.devServer.host&quot;">​</a></h3><p>主机名。默认为<code>localhost</code>。也可设置成<code>127.0.0.1</code>或<code>localIp</code>。推荐设置成<code>0.0.0.0</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>设置成本机ip后，可以方便处于同一局域网下的用户访问我们的开发环境地址。找寻本机ip的方法：</p><p>windows系统，在终端执行<code>ipconfig</code>。</p><p>macos系统，在终端执行<code>ifconfig</code>。</p></div><h3 id="_3-2-devserver-port" tabindex="-1">3-2.devServer.port <a class="header-anchor" href="#_3-2-devserver-port" aria-label="Permalink to &quot;3-2.devServer.port&quot;">​</a></h3><p>端口号。默认为<code>8080</code>。一般为了防止我们设置的端口已被其他服务占用，可使用<code>portfinder</code>这个库，来找寻其他可用端口。</p><h3 id="_3-3-devserver-open" tabindex="-1">3-3.devServer.open <a class="header-anchor" href="#_3-3-devserver-open" aria-label="Permalink to &quot;3-3.devServer.open&quot;">​</a></h3><p>是否自动打开浏览器。默认为<code>false</code>。</p><h3 id="_3-4-devserver-uselocalip" tabindex="-1">3-4.devServer.useLocalIp <a class="header-anchor" href="#_3-4-devserver-uselocalip" aria-label="Permalink to &quot;3-4.devServer.useLocalIp&quot;">​</a></h3><p>自动打开浏览器时，是否默认使用本机<code>ip</code>。默认为<code>false</code>。注意：当<code>host</code>为<code>localIp</code>或者<code>0.0.0.0</code>时，能正常打开。</p><h3 id="_3-5-ip与portfinder" tabindex="-1">3-5.ip与portfinder <a class="header-anchor" href="#_3-5-ip与portfinder" aria-label="Permalink to &quot;3-5.ip与portfinder&quot;">​</a></h3><p>为了防止端口占用，可以使用<code>portfinder</code>库。</p><p>在<code>webpack</code>配置文件中，获取<code>localIp</code>的话，可以使用<code>ip</code>库。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持返回一个promise resolve的是devConfig</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  portfinder.basePort </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> devConfig.devServer.port</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  portfinder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 找到可使用的port后 对devServer重新设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      devConfig.devServer.port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> httpType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> devConfig.devServer.https </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      devConfig.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FriendlyErrorsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          compilationSuccessInfo: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            messages: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              \`Your application is running here: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> devConfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">devServer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> } \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }://127.0.0.1:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> } \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(devConfig)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_4-资源相关" tabindex="-1">4.资源相关 <a class="header-anchor" href="#_4-资源相关" aria-label="Permalink to &quot;4.资源相关&quot;">​</a></h2><h3 id="_4-1-devserver-publicpath" tabindex="-1">4-1.devServer.publicPath <a class="header-anchor" href="#_4-1-devserver-publicpath" aria-label="Permalink to &quot;4-1.devServer.publicPath&quot;">​</a></h3><p>开发服务器的访问前缀。默认为<code>&#39;&#39;</code>。</p><p>没有设置值时，会默认取<code>output.publicPath</code>。<strong>但两者并没有优先级关系，二者针对的场景和作用并不同</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>devServer.publicPath</code>会改变开发环境下的访问地址前缀。</p><ul><li>当设置为<code>/prefix/</code>时 浏览器地址会变为<code>127.0.0.1:8080/prefix/</code>，会自动找<code>/prefix/</code>下的<code>index.html</code>。找不到时，<code>index.html</code>的寻找路径以<code>contentBase</code>为主。另外注意<code>webpack-dev-server</code>本身依赖的是一个虚拟的<code>dist</code>目录。</li></ul><p><code>output.publicPath</code>会改变静态资源的引用前缀 (使用<code>html-webpack-plugin</code>时，在<code>dist/index.html</code>中一看便知)</p><p>开发环境下的<code>devServer.publicPath</code>与<code>output.publicPath</code>最好保持一致。否则可能会造成资源<code>404</code>。</p></div><h3 id="_4-2-devserver-contentbase" tabindex="-1">4-2.devServer.contentBase <a class="header-anchor" href="#_4-2-devserver-contentbase" aria-label="Permalink to &quot;4-2.devServer.contentBase&quot;">​</a></h3><p>设置<code>index.html</code>的寻找路径。默认为当前工作目录，即<code>path.resolve(__dirname, &#39;../&#39;)</code>。</p><p>寻找<code>index.html</code>时，<code>devServer.publicPath</code>的优先级大于<code>devServer.contentBase</code>。</p><h3 id="_4-3-devserver-watchcontentbase" tabindex="-1">4-3.devServer.watchContentBase <a class="header-anchor" href="#_4-3-devserver-watchcontentbase" aria-label="Permalink to &quot;4-3.devServer.watchContentBase&quot;">​</a></h3><p>监听<code>index.html</code>的改变。</p><p>在<code>live reload</code>模式下，修改<code>index.html</code>时，页面并不会自动刷新。设置该选项后，保证<code>contentBase</code>下的<code>index.html</code>修改时页面更新，依赖于<code>live reload</code>。</p><p>关闭<code>live reload</code>的话，失效。</p><h2 id="_5-热更新相关" tabindex="-1">5.热更新相关 <a class="header-anchor" href="#_5-热更新相关" aria-label="Permalink to &quot;5.热更新相关&quot;">​</a></h2><h3 id="_5-1-devserver-hot" tabindex="-1">5-1.devServer.hot <a class="header-anchor" href="#_5-1-devserver-hot" aria-label="Permalink to &quot;5-1.devServer.hot&quot;">​</a></h3><p>是否开启热更新<code>hmr</code>。</p><p>虽然<code>live reload</code>的模式，已经可以使页面自动刷新。但<strong>由于页面的刷新，页面的数据与状态必然会被初始化</strong>，这样的话，很不利于开发调试。于是我们可以使用<code>hot</code>模式来代替<code>live reload</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在<code>chrome</code>控制台辨别<code>live reload</code>与<code>hot</code>模式的方式：</p><p><code>live reload</code>: 页面会完全重新刷新，所有资源重新加载，请求重新发送。</p><p><code>hot</code>: 页面部分更新，依赖<code>update.json</code>等类似文件进行更新。</p></div><p>有一些文章中在开启<code>hot</code>选项后，依然会在开发环境的配置文件中，添加启用<code>webpack.HotMuduleReplacementPlugin</code>插件。但是官网上已经表明，在设置<code>hot</code>为<code>true</code>后，会自动启用该插件，无需再添加了。</p><p>其实这块坑还是蛮多的。我在实际测试中发现，即使开启<code>hot</code>为<code>true</code>，页面还是会以<code>live reload</code>的方式更新。排查了一番后，整理出以下的正确步骤：</p><ol><li>设置<code>devServer.hot</code>为<code>true</code></li><li>设置<code>devServer.liveReload</code>为<code>false</code>。<strong>这个属性看下节</strong></li><li>在<code>entry</code>文件中设置<code>module.hot.accept</code>。用它来监听具体文件的更新。譬如：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./hot.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;现在在更新 hot 模块了~&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      div.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><ol start="4"><li>在以上步骤之后，改变<code>entry</code>文件时，发现是<code>live reload</code>模式，所以再设置<code>devServer.hotOnly</code>为<code>true</code>。<strong>有些缺陷，具体见下下节</strong></li></ol><p>看到这里，可能会有疑问，为什么实际项目当中并没有以上的代码。那是因为已经有<code>loader</code>帮我们做好了这部分。不必我们写很多个<code>module.hot.accept</code>函数来监听文件改变。譬如<a href="https://vue-loader-v14.vuejs.org/zh-cn/" target="_blank" rel="noreferrer">vue-loader</a>以及<a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="noreferrer">react-hot-loader</a>。</p><p>在上面的步骤后，<code>js</code>文件的热更新应该已经可以正常运行了。而<code>css</code>文件的<code>hmr</code>，需要额外注意一些地方。</p><ul><li>如果<code>css</code>使用的是<code>style-loader</code>，那么在修改<code>css</code>后，页面是可以正常热更新的。因为<code>style-loader</code>已经内置了<code>module.hot.accept</code>函数。</li><li>如果<code>css</code>使用的是<code>mini-css-extract-plugin</code>的<code>loader</code>，那么热更新需要额外配置。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MiniCssExtractPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mini-css-extract-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 默认支持HMR功能 无需额外设置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // &#39;style-loader&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: MiniCssExtractPlugin.loader,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              hmr: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;css-loader&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MiniCssExtractPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 开发环境不能使用hash，否则mini-css-extract-plugin的hmr会失效。可以根据环境动态设置。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css/[name].css&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>开发环境下不要使用<code>chunkhash</code>以及<code>contenthash</code>。否则<code>hmr</code>会报错。<a href="https://stackoverflow.com/questions/50217480/cannot-use-chunkhash-or-contenthash-for-chunk-in-name-chunkhash-js-us" target="_blank" rel="noreferrer">issues</a></p><p>最好连<code>hash</code>也不要用，<code>mini-css-extract-plugin</code>的<code>loader</code>不支持热更新文件名为<code>[name].[hash].css</code>的<code>css</code>文件。需要设置为<code>[name].css</code>。<a href="https://github.com/webpack-contrib/mini-css-extract-plugin/issues/391" target="_blank" rel="noreferrer">issues</a></p></div><h3 id="_5-2-devserver-livereload" tabindex="-1">5-2.devServer.liveReload <a class="header-anchor" href="#_5-2-devserver-livereload" aria-label="Permalink to &quot;5-2.devServer.liveReload&quot;">​</a></h3><p>测试的时候发现，需要将此属性设置为<code>false</code>（虽然官网并无此属性配置）。否则<code>HMR</code>不会生效，一直采用<code>live reload</code>的方式。</p><p>如果只是单纯设置了<code>hot</code>选项为<code>true</code>。在更新文件时，依然会发现是<code>live reload</code>模式，因为<code>live reload</code>模式依然开启。见下图：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/0081Kckwly1gkwvztqy7nj30re068dh4.jpg" alt="" loading="lazy"></p><h3 id="_5-3-devserver-hotonly" tabindex="-1">5-3.devServer.hotOnly <a class="header-anchor" href="#_5-3-devserver-hotonly" aria-label="Permalink to &quot;5-3.devServer.hotOnly&quot;">​</a></h3><p>只使用<code>hot</code>模式，即便是无法热更新。</p><p>该配置项即便<code>hot</code>模式失败，也不会去使用<code>live reload</code>模式。</p><p>当我配置该项后，在更新<code>main.js</code>时，往往会导致页面有这样的警告。<strong>个人认为模块热更新不支持<code>main.js</code>文件</strong>。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/0081Kckwly1gkwvpykxelj32k805w76e.jpg" alt="" loading="lazy"></p><h3 id="_5-4-devserver-inline" tabindex="-1">5-4.devServer.inline <a class="header-anchor" href="#_5-4-devserver-inline" aria-label="Permalink to &quot;5-4.devServer.inline&quot;">​</a></h3><p>可设置<code>dev-server</code>的两种不同模式，默认为<code>true</code>。应用程序启用内联模式(<code>inline mode</code>)。</p><p>这意味着一段处理实时重载的脚本被插入到你的包(<code>bundle</code>)中，并且构建消息将会出现在浏览器控制台。</p><p>也可以使用 <code>iframe</code> 模式，它在通知栏下面使用 <code>&lt;iframe&gt;</code> 标签，包含了关于构建的消息。</p><h2 id="_6-代理相关" tabindex="-1">6.代理相关 <a class="header-anchor" href="#_6-代理相关" aria-label="Permalink to &quot;6.代理相关&quot;">​</a></h2><h3 id="_6-1-devserver-proxy" tabindex="-1">6-1.devServer.proxy <a class="header-anchor" href="#_6-1-devserver-proxy" aria-label="Permalink to &quot;6-1.devServer.proxy&quot;">​</a></h3><p>该配置项主要用来解决前端在开发过程中的跨域。它可以将本地对远程发起的请求做一层代理。</p><p>假设我本地开发地址为<code>127.0.0.1:8080</code>，向远程服务器<code>http://jsgoshu.cn/blog/</code>发起请求，必然存在跨域的问题。那么<code>webpack</code>利用<code>webpack-dev-server</code>启了个服务代理，将请求映射到<code>127.0.0.1:8080/blog/</code>。这样的话，开发环境的跨域就已经被解决了。</p><p><code>proxy</code>有两种形式，分别对应单个代理路径与多个代理路径：</p><ol><li>对象</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 单个代理路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/blog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.jsgoshu.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 重写路径 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pathRewrite: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^/blog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span></code></pre></div><ol start="2"><li>数组</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 多个代理路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/blog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 以 /blog 和 /project开头的请求都会被代理到 http://www.jsgoshu.cn</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.jsgoshu.cn&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span></code></pre></div><h3 id="_6-2-devserver-headers" tabindex="-1">6-2.devServer.headers <a class="header-anchor" href="#_6-2-devserver-headers" aria-label="Permalink to &quot;6-2.devServer.headers&quot;">​</a></h3><p>自定义代理服务器的<strong>响应头</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;x-response-header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev-server-demo&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_7-信息相关" tabindex="-1">7.信息相关 <a class="header-anchor" href="#_7-信息相关" aria-label="Permalink to &quot;7.信息相关&quot;">​</a></h2><h3 id="_7-1-devserver-quiet" tabindex="-1">7-1.devServer.quiet <a class="header-anchor" href="#_7-1-devserver-quiet" aria-label="Permalink to &quot;7-1.devServer.quiet&quot;">​</a></h3><p>净化终端信息，清除掉无用冗余的打包信息。</p><p>（本身是个坑比属性 连报错也会隐藏 害的我好久才排查到<code>chunkhash</code>在<code>HMR</code>下报错 🙃 ）</p><p>最好搭配<code>friendly-errors-webpack-plugin</code>使用。</p><h3 id="_7-2-devserver-overlay" tabindex="-1">7-2.devServer.overlay <a class="header-anchor" href="#_7-2-devserver-overlay" aria-label="Permalink to &quot;7-2.devServer.overlay&quot;">​</a></h3><p>将<code>errors</code>满屏显示在浏览器中。</p>`,84)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
