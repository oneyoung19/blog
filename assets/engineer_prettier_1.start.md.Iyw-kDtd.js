import{_ as a,o as t,c as s,aP as i}from"./chunks/framework.D1yHhm2y.js";const k=JSON.parse('{"title":"1.Install","description":"","frontmatter":{"title":"1.Install"},"headers":[],"relativePath":"engineer/prettier/1.start.md","filePath":"engineer/prettier/1.start.md","lastUpdated":1735988637000}'),r={name:"engineer/prettier/1.start.md"};function n(l,e,o,p,d,h){return t(),s("div",null,e[0]||(e[0]=[i(`<h2 id="what-is-prettier" tabindex="-1">What is Prettier <a class="header-anchor" href="#what-is-prettier" aria-label="Permalink to &quot;What is Prettier&quot;">​</a></h2><p><code>Prettier</code> 是以一种<strong>统一格式</strong>约束代码的格式化工具。</p><p>它支持的文件类型如下：</p><ul><li><code>JavaScript</code></li><li><a href="https://facebook.github.io/jsx/" target="_blank" rel="noreferrer"><code>JSX</code></a></li><li><a href="https://angular.io/" target="_blank" rel="noreferrer"><code>Angular</code></a></li><li><a href="https://vuejs.org/" target="_blank" rel="noreferrer"><code>Vue</code></a></li><li><a href="https://flow.org/" target="_blank" rel="noreferrer"><code>Flow</code></a></li><li><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer"><code>TypeScript</code></a></li><li><code>CSS</code>, <a href="https://lesscss.org/" target="_blank" rel="noreferrer"><code>Less</code></a>, and <a href="https://sass-lang.com/" target="_blank" rel="noreferrer"><code>SCSS</code></a></li><li><code>HTML</code></li><li><a href="https://handlebarsjs.com/" target="_blank" rel="noreferrer"><code>Ember/Handlebars</code></a></li><li><a href="https://json.org/" target="_blank" rel="noreferrer"><code>JSON</code></a></li><li><a href="https://graphql.org/" target="_blank" rel="noreferrer"><code>GraphQL</code></a></li><li><a href="https://commonmark.org/" target="_blank" rel="noreferrer"><code>Markdown</code></a>, including <a href="https://github.github.com/gfm/" target="_blank" rel="noreferrer"><code>GFM</code></a> and <a href="https://mdxjs.com/" target="_blank" rel="noreferrer"><code>MDX v1</code></a></li><li><a href="https://yaml.org/" target="_blank" rel="noreferrer"><code>YAML</code></a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>不同于 <code>Standard JS</code> 提供了一系列自定义配置供用户选择，<code>Prettier</code> 在代码格式化方面已经规定好了风格，它只暴露极少数的 <a href="./3.config">options</a> 供用户自定义。</p><p><code>Prettier</code> 也不推荐众多开发者围绕代码风格大作文章，因为每个人有自己的观点和爱好。这即是 <code>Prettier</code> 的配置理念 <a href="https://prettier.io/docs/en/option-philosophy" target="_blank" rel="noreferrer">Option Philosophy</a>。</p></div><h2 id="prettier-eslint" tabindex="-1">Prettier &amp; Eslint <a class="header-anchor" href="#prettier-eslint" aria-label="Permalink to &quot;Prettier &amp; Eslint&quot;">​</a></h2><p><code>Prettier</code> 偏向于<strong>代码格式化</strong>，而 <code>Eslint</code> 偏向于<strong>静态代码语法检查</strong>。</p><p>虽然 <code>Eslint</code> 也能做一些格式化的操作，但是相对 <code>Prettier</code> 来说，就是小巫见大巫了。</p><p>而且 <code>Eslint</code> 团队也正在逐渐<a href="https://mp.weixin.qq.com/s/6quq_qW6H1srZnoip1ognw" target="_blank" rel="noreferrer">舍弃格式化功能</a>。</p><p>另外，从文件类型来说，<code>Prettier</code> 支持的文件类型多种多样，而 <code>Eslint</code> 倾向于 <code>JS</code> 生态。</p><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><p>由于不同版本的 <code>Prettier</code> 可能风格及内置功能不一致，因此推荐安装时，安装某一确定版本：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-exact</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --exact</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-exact</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span></span></code></pre></div><p>然后可以在 <code>package.json</code> 中声明：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pretty:write&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier . --write&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者利用 <code>npx</code> 直接执行 <code>npx prettier . --write</code>。</p><p>这样，就会格式化当前项目下所有 <code>Prettier</code> 可识别的文件。</p>`,17)]))}const g=a(r,[["render",n]]);export{k as __pageData,g as default};
