import{_ as i,c as a,a1 as e,o as n}from"./chunks/framework.DAWq-o5U.js";const o=JSON.parse('{"title":"项目配置SSL","description":"","frontmatter":{"title":"项目配置SSL"},"headers":[],"relativePath":"cs/https/setup.md","filePath":"cs/https/setup.md"}'),t={name:"cs/https/setup.md"};function l(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="_1-域名添加ssl" tabindex="-1">1.域名添加SSL <a class="header-anchor" href="#_1-域名添加ssl" aria-label="Permalink to &quot;1.域名添加SSL&quot;">​</a></h2><p><code>HTTPS</code>（超文本传输安全协议）中的证书是一种用于确保网站安全性和身份验证的重要组成部分。</p><p><code>HTTPS</code> 协议通过在 <code>HTTP</code> 和传输层安全性协议（<code>TLS</code>）之间添加一层安全性来保护数据传输。</p><p>证书是 <code>TLS</code> 协议中的一部分，用于加密数据传输并验证服务器的身份。</p><p><code>HTTPS</code> 证书通常包含以下信息：</p><ol><li><p><strong>公钥</strong>：证书包含一个公钥，用于加密在客户端和服务器之间传输的数据。这意味着只有服务器拥有与此公钥相关联的私钥，才能解密客户端发送的数据。</p></li><li><p><strong>服务器信息</strong>：证书包含有关服务器的信息，包括服务器的域名（通常是网站的域名，如<code>www.example.com</code>）以及证书的颁发者（通常是证书颁发机构）。</p></li><li><p><strong>数字签名</strong>：证书包含一个数字签名，用于验证证书的完整性和真实性。数字签名是由证书颁发机构使用其私钥生成的，客户端可以使用证书颁发机构的公钥来验证签名。</p></li></ol><p><code>HTTPS</code> 证书的工作原理如下：</p><ul><li><p><strong>当客户端（通常是 <code>Web</code> 浏览器）连接到一个使用 <code>HTTPS</code> 的网站时，服务器会将其证书发送给客户端</strong>。</p></li><li><p><strong>客户端会验证证书的完整性，包括检查数字签名，以确保证书未被篡改并且来自可信任的证书颁发机构</strong>。</p></li><li><p><strong>客户端使用从服务器证书中提取的公钥来加密一个称为&quot;预主密钥&quot;（<code>pre-master secret</code>）的随机值，并将其发送回服务器</strong>。</p></li><li><p><strong>服务器使用其私钥来解密客户端发送的预主密钥</strong>。</p></li><li><p><strong>服务器和客户端都使用共享的预主密钥来生成会话密钥，用于加密和解密后续的数据传输</strong>。</p></li></ul><p><code>HTTPS</code> 证书的作用是确保通信双方的数据保密性、完整性和身份验证。</p><p>它们为用户提供了信任和安全，因为用户可以通过证书验证网站的真实性，并确保他们与合法网站进行通信，而不是受到中间人攻击。</p><p>证书颁发机构是第三方实体，它们对网站的身份进行了验证，并签发了证书，这增强了用户对网站的信任。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/Not-Count-Contribution/img/20230917161953.png" alt=""></p><h3 id="_1-1-freessl" tabindex="-1">1-1.freessl <a class="header-anchor" href="#_1-1-freessl" aria-label="Permalink to &quot;1-1.freessl&quot;">​</a></h3><p>先在<a href="https://freessl.cn/" target="_blank" rel="noreferrer">freessl.cn</a>上注册一个账号</p><p>然后在平台上添加目标域名:</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/008vxvgGly1h7gkx6xh8nj31hl0u0dii.jpg" alt=""></p><p>下一步，会需要配置 <code>DCV</code>，即 <code>Domain Control Verify</code>:</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/008vxvgGly1h7gkzm35euj31hg0u0n05.jpg" alt=""></p><p>根据图中的记录，在<strong>域名控制台</strong>配置解析（以阿里云为例）：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/008vxvgGly1h7gl1428pmj30u010b0v3.jpg" alt=""></p><p>配置完成之后，会出现最后的部署代码：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/008vxvgGly1h7gl1zhjp5j31ho0u0n09.jpg" alt=""></p><p>这里提供了两种方式 <code>acme.sh</code> 和 <code>certbot</code>。</p><h3 id="_1-2-acme-sh" tabindex="-1">1-2.acme.sh <a class="header-anchor" href="#_1-2-acme-sh" aria-label="Permalink to &quot;1-2.acme.sh&quot;">​</a></h3><p>我们以 <code>acme.sh</code> 为例，先在服务器上安装:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://get.acme.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>理论上会自动添加一个 <code>acme.sh</code> 全局应用别名，但有时候会 <code>command not found</code>，需要手动执行 <code>source ~/.bashrc</code> 或 <code>source ~/.bash_profile</code> 后再继续。</p><p>也可以采用比较笨的方法：重新打开命令行（如果是 <code>SSH</code>，选择重新连接），以使 <code>acme.sh</code> 命令生效。</p></div><p>安装 <code>acme.sh</code> 完成后，在服务器上执行我们之前得到的语句:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.jsgoshu.cn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --dns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dns_dp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://acme.freessl.cn/v2/DV90/directory/pqtrrn8aaf7gpgv23h9w</span></span></code></pre></div><p>执行完成之后，控制台会打印出 <code>cert</code> 和 <code>cert key</code> 的安装信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/.acme.sh/test.jsgoshu.cn/test.jsgoshu.cn.cer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/.acme.sh/test.jsgoshu.cn/test.jsgoshu.cn.key</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> intermediate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/.acme.sh/test.jsgoshu.cn/ca.cer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">And</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> there:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/.acme.sh/test.jsgoshu.cn/fullchain.cer</span></span></code></pre></div><h3 id="_1-3-配置nginx" tabindex="-1">1-3.配置nginx <a class="header-anchor" href="#_1-3-配置nginx" aria-label="Permalink to &quot;1-3.配置nginx&quot;">​</a></h3><p>接下来，就是配置托管服务器，以 <code>nginx</code> 为例：</p><p>在 <code>http</code> 模块下，新建一个 <code>server</code> 模块，监听 <code>443</code> 端口。与 <code>80</code> 端口的 <code>server</code> 监听模块是平级的。</p><p>然后修改对应的 <code>ssl_certificate</code> (<strong>证书</strong>)和 <code>ssl_certificate_key</code> (<strong>私钥</strong>)即可。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       [::]:443 ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         /usr/share/nginx/html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ssl_certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/root/.acme.sh/test.jsgoshu.cn/test.jsgoshu.cn.cer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ssl_certificate_key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/root/.acme.sh/test.jsgoshu.cn/test.jsgoshu.cn.key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ssl_session_cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared:SSL:1m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ssl_session_timeout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  10m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ssl_ciphers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HIGH:!aNULL:!MD5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ssl_prefer_server_ciphers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Load configuration files for the default server block.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/default.d/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.conf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error_page</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 404</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /404.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /40x.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error_page</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 502</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 503</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 504</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /50x.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /50x.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_1-4-http重定向" tabindex="-1">1-4.http重定向 <a class="header-anchor" href="#_1-4-http重定向" aria-label="Permalink to &quot;1-4.http重定向&quot;">​</a></h3><p>另外可以优化下 <code>http</code> 的重定向，以使用户在访问 <code>http</code> 协议的网站时，自动重定向到 <code>https</code> 协议：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       [::]:80;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         /usr/share/nginx/html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Load configuration files for the default server block.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/default.d/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.conf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 重定向到https</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://test.jsgoshu.cn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最后需要使用 <code>nginx -s reload</code> 重启 <code>nginx</code>，配置即可生效。</p><p>参考文章：</p><p><a href="https://blog.freessl.cn/acme-quick-start/" target="_blank" rel="noreferrer">ACME v2证书自动化快速入门</a><a href="https://www.goozoe.com/posts/8948.html" target="_blank" rel="noreferrer">Let&#39;s encrypt 免费证书申请教程</a></p><h2 id="_2-webpack添加ssl" tabindex="-1">2.webpack添加SSL <a class="header-anchor" href="#_2-webpack添加ssl" aria-label="Permalink to &quot;2.webpack添加SSL&quot;">​</a></h2><p>在本地的 <code>webpack</code> 服务上添加一个免费的 <code>SSL</code> 证书。</p><h3 id="_2-1-mkccert" tabindex="-1">2-1.mkccert <a class="header-anchor" href="#_2-1-mkccert" aria-label="Permalink to &quot;2-1.mkccert&quot;">​</a></h3><p>首先，在电脑上安装 <a href="https://github.com/FiloSottile/mkcert" target="_blank" rel="noreferrer">mkcert</a></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkcert</span></span></code></pre></div><p>安装完成之后，<code>Run &quot;mkcert -install&quot; for certificates to be trusted automatically.</code></p><p>即<strong>必须执行</strong> <code>mkcert --install</code> 安装根证书。</p><p>这会使得我们后续安装的其他子证书<strong>在本机上自动的受信任</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里的本机含义，指代的是，我们使用该节方式启动的 <code>https</code> 服务，只能在我们本机上访问。</p><p>同一内网下的机器，访问该 <code>https</code> 服务，依然是不受信任的、不安全的。</p></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkcert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span></code></pre></div><p>安装完根证书之后，就可以安装子证书了。</p><ul><li>在 <code>webpack</code> 工程下任意创建一个目录，譬如 <code>https</code>。</li><li>进入 <code>https</code> 目录。</li><li>执行 <code>mkcert example.com &quot;*.example.com&quot; example.test localhost 127.0.0.1 ::1</code>。</li></ul><p>以 <code>localhost</code> 为例：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkcert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>创建子证书，可以使用自定义域名或者任意 <code>IP</code> 地址。</p><ol><li><code>mkcert example.com</code></li><li><code>mkcert localhost</code></li><li><code>mkcert 127.0.0.1</code></li></ol></div><p>执行完之后，在 <code>https</code> 目录下会额外多俩文件 <code>localhost-key.pem</code> 和 <code>localhost.pem</code>。</p><h3 id="_2-2-配置webpack-dev-server" tabindex="-1">2-2.配置webpack-dev-server <a class="header-anchor" href="#_2-2-配置webpack-dev-server" aria-label="Permalink to &quot;2-2.配置webpack-dev-server&quot;">​</a></h3><p>然后配置 <code>webpack</code> 中的 <code>devServer</code> 属性：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;5000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    https: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      key: fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./https/localhost-key.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cert: fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./https/localhost.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>重启 <code>webpack</code> 服务，应用即可运行在 <code>https:localhost:5000</code>。</p>`,62)]))}const g=i(t,[["render",l]]);export{o as __pageData,g as default};
