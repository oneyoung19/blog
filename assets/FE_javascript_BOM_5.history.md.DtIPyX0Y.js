import{_ as e,c as s,o as t,b0 as i}from"./chunks/framework.CEggy_nf.js";const k=JSON.parse('{"title":"5.history","description":"","frontmatter":{"title":"5.history"},"headers":[],"relativePath":"FE/javascript/BOM/5.history.md","filePath":"FE/javascript/BOM/5.history.md","lastUpdated":1744903323000}'),o={name:"FE/javascript/BOM/5.history.md"};function l(p,a,h,d,c,n){return t(),s("div",null,a[0]||(a[0]=[i('<p><code>history</code> 属性提供了操作<strong>浏览器会话历史</strong>的接口。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/e6c9d24ely1h22ie8rh72j21sk0mctcc.jpg" alt="" loading="lazy"></p><h2 id="_5-1-属性" tabindex="-1">5-1.属性 <a class="header-anchor" href="#_5-1-属性" aria-label="Permalink to &quot;5-1.属性&quot;">​</a></h2><h3 id="_5-1-1-length" tabindex="-1">5-1-1.length <a class="header-anchor" href="#_5-1-1-length" aria-label="Permalink to &quot;5-1-1.length&quot;">​</a></h3><p><code>length</code> 属性表示<strong>当前窗口</strong>一共访问过的网址数量。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span></code></pre></div><h3 id="_5-1-2-state" tabindex="-1">5-1-2.state <a class="header-anchor" href="#_5-1-2-state" aria-label="Permalink to &quot;5-1-2.state&quot;">​</a></h3><p><code>state</code> 属性与 <code>pushState</code> 或者 <code>replaceState</code> 中声明的参数相关联。并不是网址中的 <code>queryString</code>。</p><p>默认值是 <code>null</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.state</span></span></code></pre></div><h2 id="_5-2-方法" tabindex="-1">5-2.方法 <a class="header-anchor" href="#_5-2-方法" aria-label="Permalink to &quot;5-2.方法&quot;">​</a></h2><p><code>history</code> 上的方法分为两类。</p><p>一类是用来触发浏览器的前进后退操作：</p><ol><li><code>back()</code></li><li><code>forward()</code></li><li><code>go()</code></li></ol><p>另一类是添加或修改浏览器历史记录条目：</p><ol><li><code>pushState()</code></li><li><code>replaceState()</code></li></ol><h3 id="_5-2-1-back" tabindex="-1">5-2-1.back() <a class="header-anchor" href="#_5-2-1-back" aria-label="Permalink to &quot;5-2-1.back()&quot;">​</a></h3><p>相当于点击一次浏览器后退按钮：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>如果当前页面无可后退页面，则上述代码调用后，不会起作用。</p><h3 id="_5-2-2-forward" tabindex="-1">5-2-2.forward() <a class="header-anchor" href="#_5-2-2-forward" aria-label="Permalink to &quot;5-2-2.forward()&quot;">​</a></h3><p>相当于点击一次浏览器前进按钮：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>如果当前页面无可前进页面，则上述代码调用后，不会起作用。</p><h3 id="_5-2-3-go" tabindex="-1">5-2-3.go() <a class="header-anchor" href="#_5-2-3-go" aria-label="Permalink to &quot;5-2-3.go()&quot;">​</a></h3><p>该方法可手动指定后退或者前进几个页面。</p><p>相当于 <code>back</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>相当于 <code>forward</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_5-2-4-pushstate" tabindex="-1">5-2-4.pushState() <a class="header-anchor" href="#_5-2-4-pushstate" aria-label="Permalink to &quot;5-2-4.pushState()&quot;">​</a></h3><p><code>pushState</code> 可以用来在浏览器历史记录中添加条目。</p><blockquote><p>window.history.pushState(state, title, url)</p></blockquote><p>有三个参数：</p><ol><li><code>state</code>: 它会与新条目绑定在一起，可以用来存储一些简单的数据，不过不能存太多，<code>firefox</code> 对它的限制是 <code>640K</code>，这个对象可以通过<code>popstate</code> 事件对象的 <code>state</code> 属性或者 <code>window.history.state</code> 来访问。</li><li><code>title</code>: 目前浏览器都是忽略它的，在使用的时候一般传入 <code>null</code> 即可。</li><li><code>url</code>: 新条目的地址。如果没有，默认就是当前文档的地址。可以是相对地址或者绝对地址。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>上述的相对地址，会相对于当前文档。</p><p>而绝对地址必须是<strong>同源地址</strong>，即绝对地址与当前文档地址是同源的，不能是跨域。否则会报错：</p><p><code>Uncaught DOMException: Failed to execute &#39;pushState&#39; on &#39;History&#39;: A history state object with URL cannot be created in a document with origin and URL.</code></p></div><p><code>pushState</code> 具有以下特点：</p><ol><li>更改当前 <code>URL</code>，但浏览器页面不会跳转，不会刷新。</li><li>会影响浏览器历史记录。</li></ol><p>可以这样理解，<strong><code>pushState</code> 与 <code>replaceState</code> 是浏览器暴露给开发者用来操作浏览器历史记录的接口</strong>。</p><p>开发者可以利用这俩接口来模拟实现自己想要的路由切换功能。</p><h3 id="_5-2-5-replacestate" tabindex="-1">5-2-5.replaceState() <a class="header-anchor" href="#_5-2-5-replacestate" aria-label="Permalink to &quot;5-2-5.replaceState()&quot;">​</a></h3><p><code>replaceState</code> 方法与 <code>pushState</code> 方法大同小异。</p><p>只有一点不同：</p><ol><li><code>pushState</code> 是在当前历史记录的基础上添加一条新的历史记录。</li><li><code>replaceState</code> 则是以一条新的历史记录替换当前历史记录。</li></ol><h2 id="_5-3-popstate事件" tabindex="-1">5-3.<code>popstate</code>事件 <a class="header-anchor" href="#_5-3-popstate事件" aria-label="Permalink to &quot;5-3.`popstate`事件&quot;">​</a></h2><p><code>pushState</code> 与 <code>replaceState</code> 的调用，不会触发 <code>popstate</code> 事件。</p><p>只有用户手动点击浏览器倒退按钮和前进按钮，或者使用 <code>JavaScript</code> 调用<code>back()</code>、<code>forward()</code>、<code>go()</code>方法时才会触发 <code>popstate</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;popstate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>页面第一次加载的时候，浏览器不会触发 <code>popstate</code> 事件，但可以正常访问 <code>history.state</code>。</p></div><h2 id="_5-4-hashchange事件" tabindex="-1">5-4.<code>hashchange</code>事件 <a class="header-anchor" href="#_5-4-hashchange事件" aria-label="Permalink to &quot;5-4.`hashchange`事件&quot;">​</a></h2><p>触发 <code>hashchange</code> 只有以下几种情况：</p><ol><li>直接更改浏览器地址，在最后面增加或改变 <code>#hash</code>；</li><li>通过改变 <code>location.href</code> 或 <code>location.hash</code> 的值；</li><li>通过触发点击带锚点的链接；</li><li>浏览器前进后退可能导致 <code>hash</code> 的变化，前提是两个网页地址中的 <code>hash</code> 值不同。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>需要注意的是 <code>pushState</code> 与 <code>replaceState</code> 并不会触发 <code>hashchange</code> 事件。</p></div><p><a href="https://www.cnblogs.com/lyzg/p/5960609.html" target="_blank" rel="noreferrer">pushState与hashchange</a></p>',54)]))}const g=e(o,[["render",l]]);export{k as __pageData,g as default};
