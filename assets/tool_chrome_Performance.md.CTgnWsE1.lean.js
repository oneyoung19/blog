import{_ as o,o as t,c as d,aP as c}from"./chunks/framework.D1yHhm2y.js";const g=JSON.parse('{"title":"Performance","description":"","frontmatter":{"title":"Performance"},"headers":[],"relativePath":"tool/chrome/Performance.md","filePath":"tool/chrome/Performance.md","lastUpdated":1736068111000}'),r={name:"tool/chrome/Performance.md"};function a(l,e,n,i,p,s){return t(),d("div",null,e[0]||(e[0]=[c('<h2 id="_1-chrome-devtools-performance" tabindex="-1">1.Chrome devtools - Performance <a class="header-anchor" href="#_1-chrome-devtools-performance" aria-label="Permalink to &quot;1.Chrome devtools - Performance&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/29879682" target="_blank" rel="noreferrer">全新Chrome Devtool Performance使用指南</a></p><h3 id="_1-1-fps" tabindex="-1">1-1.FPS <a class="header-anchor" href="#_1-1-fps" aria-label="Permalink to &quot;1-1.FPS&quot;">​</a></h3><p><code>frames per second</code> 每秒帧数，也可以看做屏幕刷新率。</p><p>动画通常不低于 <code>60fps</code>，会比较流畅。</p><p>而电影一般为 <code>24fps</code>。</p><h3 id="_1-2-cpu" tabindex="-1">1-2.CPU <a class="header-anchor" href="#_1-2-cpu" aria-label="Permalink to &quot;1-2.CPU&quot;">​</a></h3><p><code>central processing Unit</code> 中央处理器</p><p><code>CPU</code> 运行速率越高，处理速率会越快。</p><h3 id="_1-3-network" tabindex="-1">1-3.Network <a class="header-anchor" href="#_1-3-network" aria-label="Permalink to &quot;1-3.Network&quot;">​</a></h3><p>资源加载顺序</p><h3 id="_1-4-main" tabindex="-1">1-4.Main <a class="header-anchor" href="#_1-4-main" aria-label="Permalink to &quot;1-4.Main&quot;">​</a></h3><p>主线程 <code>Main thread</code>。</p><p>可以看到许多 <code>Task</code> 任务。</p><p>同时，此处也是梳理 <code>CRP</code> 的核心作用区域。</p><p><code>CRP</code> 即 <code>Critical Rendering Path</code>，<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path" target="_blank" rel="noreferrer">关键渲染路径</a>。</p><ul><li><code>DOM</code></li><li><code>CSSOM</code></li><li><code>Render Tree</code></li><li><code>Layout</code></li><li><code>Paint</code></li></ul><h2 id="_2-crp" tabindex="-1">2.CRP <a class="header-anchor" href="#_2-crp" aria-label="Permalink to &quot;2.CRP&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/npkz3z.png" alt="" loading="lazy"></p><ol><li>浏览器会将HTML解析成一个 <code>DOM</code> 树，<code>DOM</code> 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</li><li>将 <code>CSS</code> 解析成 <code>CSS Rule Tree</code> 。</li><li>根据 <code>DOM</code> 树和 <code>CSSOM</code> 来构造 <code>Rendering Tree</code>。注意：<code>Rendering Tree</code> 渲染树并不等同于 <code>DOM</code> 树，因为一些像 <code>Header</code> 或 <code>display:none</code> 的东西就没必要放在渲染树中了。</li><li>有了 <code>Render Tree</code>，浏览器已经能知道网页中有哪些节点、各个节点的 <code>CSS</code> 定义以及他们的从属关系。下一步操作称之为 <code>Layout</code>，顾名思义就是计算出每个节点在屏幕中的位置。</li><li>再下一步就是绘制，即遍历 <code>render</code> 树，并使用 <code>UI</code> 后端层绘制每个节点。</li></ol><p>上述这个过程是<strong>逐步完成</strong>的（因为浏览器解析是单线程的），<strong>为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的 <code>html</code> 都解析完成之后再去构建和布局 <code>render</code> 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容</strong>。</p><p><a href="https://kb.cnblogs.com/page/129756/" target="_blank" rel="noreferrer">How Browsers work</a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noreferrer">从输入URL到页面加载完成的过程中发生了什么？</a><a href="https://github.com/amandakelake/blog/issues/55" target="_blank" rel="noreferrer">浏览器工作原理</a></p><h3 id="_2-1-重排与重绘" tabindex="-1">2-1.重排与重绘 <a class="header-anchor" href="#_2-1-重排与重绘" aria-label="Permalink to &quot;2-1.重排与重绘&quot;">​</a></h3><p>重排，即 <code>reflow</code>。也被称作回流。</p><p>重绘，即 <code>repaint</code>。</p><p><a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noreferrer">Jank Animation Demo</a></p><p><a href="https://juejin.cn/post/6844904083212468238" target="_blank" rel="noreferrer">掘金-重排(reflow)和重绘(repaint)</a></p><p><a href="https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/#avoid-forced-synchronous-layouts" target="_blank" rel="noreferrer">重排(reflow)的触发时机</a></p><h3 id="_2-2-避免重排与重绘" tabindex="-1">2-2.避免重排与重绘 <a class="header-anchor" href="#_2-2-避免重排与重绘" aria-label="Permalink to &quot;2-2.避免重排与重绘&quot;">​</a></h3><ol><li><p>避免 <code>DOM</code> 的回流。也就是尽量避免重排和重绘操作。 减少 <code>JavaScript</code> 脚本执行时间。有时 <code>JavaScript</code> 函数的一次执行时间可能有几百毫秒，这就严重霸占了主线程执行其他渲染任务的时间。针对这种情况我们可以采用以下两种策略：</p><p>一种是将一次执行的函数分解为多个任务，使得每次的执行时间不要过久。<a href="https://web.dev/optimize-long-tasks/" target="_blank" rel="noreferrer">Optimize long tasks</a></p><p>另一种是采用 <code>Web Workers</code>。</p></li><li><p><code>DOM</code> 操作相关的优化。 浏览器有渲染引擎和 <code>JS</code> 引擎，所以当用 <code>JS</code> 操作 <code>DOM</code> 时，这两个引擎要通过接口互相“交流”，因此每一次操作 <code>DOM</code>（包括只是访问 <code>DOM</code> 的属性），都要进行引擎之间解析的开销，所以常说要减少 <code>DOM</code> 操作。总结下来有以下几点：</p></li><li><p>缓存一些计算属性，如 <code>let left = el.offsetLeft</code>。</p></li><li><p>通过 <code>DOM</code> 的 <code>class</code> 来集中改变样式，而不是通过 <code>style</code> 一条条的去修改。</p></li><li><p>分离读写操作。现代的浏览器都有渲染队列的机制。</p></li><li><p>放弃传统操作 <code>DOM</code> 的时代，基于 <code>vue/react</code> 等采用 <code>virtual dom</code> 的框架。</p></li><li><p>合理利用 <code>CSS</code> 合成动画。合成动画是直接在合成线程上执行的，这和在主线程上执行的布局、绘制等操作不同，如果主线程被 <code>JavaScript</code> 或者一些布局任务占用，<code>CSS</code> 动画依然能继续执行。所以要尽量利用好 <code>CSS</code> 合成动画，如果能让 <code>CSS</code> 处理动画，就尽量交给 <code>CSS</code> 来操作。</p></li><li><p><code>CSS</code> 选择器优化。我们知道 <code>CSS</code> 引擎查找是从右向左匹配的。所以基于此有以下几条优化方案：</p></li></ol><ul><li>尽量不要使用通配符</li><li>少用标签选择器</li><li>尽量利用属性继承特性</li><li><code>CSS</code> 属性优化。浏览器绘制图像时，<code>CSS</code> 的计算也是耗费性能的，一些属性需浏览器进行大量的计算，属于昂贵的属性（<code>box-shadows</code>、<code>border-radius</code>、<code>transforms</code>、<code>filters</code>、<code>opcity</code>、<code>:nth-child</code> 等），这些属性在日常开发中经常用到，所以并不是说不要用这些属性，而是在开发中，如果有其它简单可行的方案，那可以优先选择没有昂贵属性的方案。</li></ul><ol start="9"><li>避免频繁的垃圾回收。我们知道 <code>JavaScript</code> 使用了自动垃圾回收机制，如果在一些函数中频繁创建临时对象，那么垃圾回收器也会频繁地去执行垃圾回收策略。这样当垃圾回收操作发生时，就会占用主线程，从而影响到其他任务的执行，严重的话还会让用户产生掉帧、不流畅的感觉。</li></ol><h2 id="_3-page-life-cycle" tabindex="-1">3.Page Life Cycle <a class="header-anchor" href="#_3-page-life-cycle" aria-label="Permalink to &quot;3.Page Life Cycle&quot;">​</a></h2><p>页面性能指标节点：</p><ul><li><code>FP</code> <a href="https://stackoverflow.com/questions/61816232/how-to-measure-first-paint-fp" target="_blank" rel="noreferrer">First Paint</a></li><li><code>FCP</code> <a href="https://web.dev/i18n/zh/fcp/" target="_blank" rel="noreferrer">First Contentful Paint</a></li><li><code>LCP</code> <a href="https://web.dev/i18n/zh/lcp/" target="_blank" rel="noreferrer">Largest Contentful Paint</a></li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">Document.readyState状态</th><th style="text-align:center;">DOM事件</th><th></th></tr></thead><tbody><tr><td style="text-align:center;">loading</td><td style="text-align:center;"></td><td></td></tr><tr><td style="text-align:center;">interactive</td><td style="text-align:center;"></td><td></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" target="_blank" rel="noreferrer">DOMContentLoaded</a> (HTML文档加载完毕 其他静态资源链接正在加载)</td><td></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td>属性为defer的script脚本执行</td></tr><tr><td style="text-align:center;">complete</td><td style="text-align:center;"></td><td></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">load（页面完全加载完毕）</td><td></td></tr></tbody></table><h2 id="_5-template多页面脚手架开发环境" tabindex="-1">5.template多页面脚手架开发环境 <a class="header-anchor" href="#_5-template多页面脚手架开发环境" aria-label="Permalink to &quot;5.template多页面脚手架开发环境&quot;">​</a></h2><p>背景：</p><p><code>jquery</code> 结合 <code>template</code> 模板的多页面项目。</p><p>现象：</p><p>在开发环境下，页面加载渲染时，会先出现 <strong>布局变形</strong>，然后回归正常。</p><p>而生产环境下，展示正常。</p><p>有一种比较学术的说法是<strong>累计布局偏移</strong>，<code>Cumulative Layout Shift</code> 简称为 <code>CLS</code>。</p><p>该指标极大程度上影响用户体验。</p><p>经过一番调试发现，<code>template</code> 多页面应用在生产环境下的打包结果，与开发环境并不一致。</p><p>主要点是 <code>CSS</code> 的加载时机不一致。</p><p>在开发环境下，<code>webpack</code> 使用的是 <code>style-loader</code>，这样 <code>CSS</code> 会打包进页面底部的 <code>JS</code> 中，然后 <code>JS</code> 创建 <code>&lt;style&gt;</code> 标签，添加到 <code>&lt;head&gt;</code> 标签中。</p><p>可想而知，页面加载时，先 <code>parse HTML</code>，结合 <code>user agent style</code> 形成页面基本结构。执行到底部 <code>&lt;script&gt;</code> 后，拉取脚本并创建 <code>&lt;style&gt;</code>，此时会发生 <strong>重排</strong>。因此页面的表现，会先变形，然后回复正常。</p><p>而在生产环境下，<code>webpack</code> 使用的是 <code>mini-css-extract-plugin</code>，这样 <code>CSS</code> 在构建结束之后，会由 <code>&lt;link&gt;</code> 标签插入到 <code>&lt;head&gt;</code> 标签中。</p><p>这种情形下，页面加载时，先 <code>parse HTML</code>，然后 <code>recalcute style</code>，之后 <code>layout =&gt; pre-paint =&gt; paint</code>。这个过程很快，因此用户感知不到 <code>layout</code> 偏移。</p><p>在上述过程结束之后，继续 <code>parse HTML</code>，逐步执行 <code>&lt;script&gt;</code>，这时有可能发生<strong>重排</strong>或者<strong>重绘</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要注意的一点是，浏览器并不会等到完全 <code>parse HTML</code> 之后，再去 <code>layout</code>、<code>paint</code> 等。而是逐段 <code>parse HTML</code>，尽可能提前展示给用户一部分页面。</p><p>这对于用户体验，无疑是一种优化。</p></div><p>关于 <code>vue</code> 等单页面应用的开发环境，并无上述问题。笔者认为单页面应用的 <code>HTML DOM</code> 结构，本身是由 <code>JS</code> 生成的。因此在执行时机上是有差异。</p><p>譬如单页面应用的开发环境，也是先 <code>parse HHTML</code>，但此时页面中只有 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 这样的结构，只有等执行到 <code>&lt;script&gt;</code> 才会创建 <code>DOM</code> 以及 <code>&lt;style&gt;</code> 标签。</p>',54)]))}const f=o(r,[["render",a]]);export{g as __pageData,f as default};
