import{_ as i,c as a,o as n,b0 as e}from"./chunks/framework.CYy1HSjD.js";const c=JSON.parse('{"title":"9.misc","description":"","frontmatter":{"title":"9.misc"},"headers":[],"relativePath":"frame/axios/base/9.misc.md","filePath":"frame/axios/base/9.misc.md","lastUpdated":1750664209000}'),l={name:"frame/axios/base/9.misc.md"};function p(h,s,t,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<p>本节主要总结 <code>Axios</code> 提供的一些特殊功能点。</p><h2 id="_9-1-上传、下载进度" tabindex="-1">9-1.上传、下载进度 <a class="header-anchor" href="#_9-1-上传、下载进度" aria-label="Permalink to &quot;9-1.上传、下载进度&quot;">​</a></h2><p>现代浏览器端通信有 <code>XMLHttpRequest</code> 和 <code>fetch</code> 两种方式。</p><p>关于这俩者较为详细的介绍，可以参考<a href="./../../../cs/http/xhr-fetch">XHR/FETCH</a>。</p><p>截止到目前，<code>XMLHttpRequest</code> 提供了 <code>xhr.upload</code> 和 <code>xhr.onprogress</code> 来监听上传和下载进度。</p><p>而 <code>fetch</code> 这方面则欠缺一些，并没有提供原生的上传和下载监听 <code>API</code>。</p><p>我们已经知道 <code>Axios</code> 在 <code>browser</code> 端使用的就是 <code>XMLHttpRequest</code>。</p><p>可想而知，<code>Axios</code> 对于上传和下载进度的监听，内部实现依赖的是 <code>XMLHttpRequest</code>。</p><p>本章节，重点说明下 <code>Axios</code> 相应 <code>API</code> 的使用方式。</p><p>在 <code>config</code> 中，<code>Axios</code> 提供了两个属性 <code>onUploadProgress</code> 和 <code>onDownloadProgress</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onUploadProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onDownloadProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_9-2-取消请求" tabindex="-1">9-2.取消请求 <a class="header-anchor" href="#_9-2-取消请求" aria-label="Permalink to &quot;9-2.取消请求&quot;">​</a></h2><p><code>XMLHttpRequest</code> 中提供了 <a href="./../../../cs/http/xhr-fetch#_2-6-中止请求">xhr.abort()</a> 来直接中止请求。</p><p>而 <code>fetch</code> 则是使用 <a href="./../../../cs/http/xhr-fetch#_3-7-中止请求">AbortController</a> 来中止请求。</p><p>那么 <code>Axios</code> 最开始是手动封装了 <code>CancelToken</code> 方法，内部主要实现依旧是将 <code>xhr.abort()</code> 进行 <code>Promise</code> 化包装。</p><p>当出现了<strong>原生</strong>方法 <code>AbortController</code> 之后，<code>Axios</code> 为了面向未来，内部兼容了 <code>AbortController</code>，而且更加推荐使用 <code>AbortController</code>。</p><p><code>CancelToken</code> 在较高版本中的 <code>Axios</code> 已经逐渐被废弃。</p><h3 id="_9-2-1-canceltoken" tabindex="-1">9-2-1.CancelToken <a class="header-anchor" href="#_9-2-1-canceltoken" aria-label="Permalink to &quot;9-2-1.CancelToken&quot;">​</a></h3><p>笔者认为，<code>CancelToken</code> 是基于 <code>xhr.abort()</code> 方法封装的中止 <code>Promise</code> 方法的 <code>API</code>。</p><p>还有一个关于 <code>CancelToken</code> 的设计提案<a href="https://github.com/tc39/proposal-cancelable-promises" target="_blank" rel="noreferrer">cancelable promises proposal</a>。</p><p><code>Axios</code> 中的基本使用方式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CancelToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CancelToken.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  params: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;9527&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cancelToken: source.token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>打印 <code>source</code> 属性如下：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/20230218201840.png" alt="" loading="lazy"></p><h3 id="_9-2-2-abortcontroller" tabindex="-1">9-2-2.AbortController <a class="header-anchor" href="#_9-2-2-abortcontroller" aria-label="Permalink to &quot;9-2-2.AbortController&quot;">​</a></h3><p>关于 <code>AbortController</code> 的详细信息，可以参考 <a href="./../../../cs/http/xhr-fetch#_3-7-中止请求">AbortController</a>。</p><p>本节主要总结下 <code>AbortController</code> 的使用方式和注意事项。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> abortController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abortController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  params: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;9527&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  signal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abortController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><code>abortController.signal</code> 属性打印如下：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/20230218192904.png" alt="" loading="lazy"></p><h2 id="_9-3-xsrf防范" tabindex="-1">9-3.XSRF防范 <a class="header-anchor" href="#_9-3-xsrf防范" aria-label="Permalink to &quot;9-3.XSRF防范&quot;">​</a></h2><p>关于 <code>XSRF</code> 的基本机制，是利用了访问某站时，该站对应的 <code>cookie</code> 会被浏览器自动携带。</p><p>而攻击者则可以利用伪造页面，诱导用户点击，请求携带用户本机已经种好的 <code>cookie</code>，进而触发不安全交易。</p><p>关于 <code>XSRF</code> 的更多详细内容，可以参考<a href="./../../../cs/http/cookie#_5-xsrf攻击及防范">XSRF攻击及防范</a>。</p><p>而在 <code>Axios</code> 中，防范 <code>XSRF</code> 的手段，一般可以称作<strong>双重 <code>Cookie</code> 防御</strong>。</p><p>具体交互逻辑如下：</p><ol><li>服务端利用一些加密方式生成 <code>Token</code>，然后通过 <code>Set-Cookie</code> 返回给客户端，然后客户端在发起交易时，读取对应 <code>Cookie</code>，并设置到请求头 <code>headers</code> 中，假设我们将其命名为 <code>Cookie Token</code>。</li><li>发起交易时，实际请求会发送本地 <code>Cookie</code>，还会发送在请求头中设置的 <code>Cookie Token</code>。</li><li>也就是说，服务端在做交易验证时，不单单要验证请求头中的 <code>Cookie</code> 字段，还要验证 <code>Cookie Token</code> 字段。</li></ol><p>在 <code>Axios</code> 中，<code>config</code> 属性中提供了两个字段：<code>xsrfCookieName</code> 和 <code>xsrfHeaderName</code>。</p><p>下面代码是 <code>Axios</code> 对于 <code>xsrfCookieName</code> 和 <code>xsrfHeaderName</code> 的处理逻辑：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (platform.isStandardBrowserEnv) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Add xsrf header</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xsrfValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (config.withCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isURLSameOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullPath))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.xsrfCookieName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cookies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.xsrfCookieName);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xsrfValue) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    requestHeaders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.xsrfHeaderName, xsrfValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以看出，<code>Axios</code> 是将本地与 <code>xsrfCookieName</code> 对应的 <code>Cookie</code> 取出，然后按照 <code>xsrfHeaderName</code> 设置到请求头上。</p><p>该实现与我们所分析的<strong>双重 <code>Cookie</code> 防御</strong>逻辑是一致的。</p>`,42)]))}const E=i(l,[["render",p]]);export{c as __pageData,E as default};
