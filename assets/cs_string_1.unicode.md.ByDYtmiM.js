import{_ as o,c as r,o as a,b0 as d}from"./chunks/framework.CEggy_nf.js";const h=JSON.parse('{"title":"字符集","description":"","frontmatter":{"title":"字符集"},"headers":[],"relativePath":"cs/string/1.unicode.md","filePath":"cs/string/1.unicode.md","lastUpdated":1744344421000}'),c={name:"cs/string/1.unicode.md"};function t(i,e,n,p,s,l){return a(),r("div",null,e[0]||(e[0]=[d('<h2 id="_1-ascll" tabindex="-1">1.ASCLL <a class="header-anchor" href="#_1-ascll" aria-label="Permalink to &quot;1.ASCLL&quot;">​</a></h2><p><a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noreferrer">ASCLL-维基百科</a></p><p>众所周知，电脑是在美国发展起来的。而电脑内部的所有数据都是二进制。所以美国人在使用电脑输入信息的时，他们设立了一张表，这张表上有数字、大小写英文字符、各种键盘符号等等。一共是128个。</p><p>这张表被称作 <code>ASCLL</code> 即 <code>American Standard Code for Information Interchange</code>（美国信息交换标准代码）。</p><p>在美国人的日常使用，这 <code>128</code> 个字符已经能够满足需要。</p><p>但随着互联网的发展，越来越多的国家/地区步入互联网的时代。这样他们也需要计算机能够标记他们的文字和语言等等，但显然 <code>ASCLL</code> 字符集不能满足需要。</p><p>于是这些国家/地区根据自己的需求制定了自己的字符集，譬如中国大陆制定了 <code>GBK</code>，而台湾地区则制定了 <code>Big5</code>。</p><h2 id="_2-gbk与big5" tabindex="-1">2.GBK与Big5 <a class="header-anchor" href="#_2-gbk与big5" aria-label="Permalink to &quot;2.GBK与Big5&quot;">​</a></h2><p><a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noreferrer">GBK-维基百科</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E4%BA%94%E7%A2%BC" target="_blank" rel="noreferrer">Big5-维基百科</a></p><p>看起来，每个国家/地区制定自己的字符集，似乎已经满足了各自的需求。</p><p>但这种形式的一个弊端就是<strong>乱码问题</strong>。</p><p><strong>因为同一个编码在不同的字符集下对应的字符是不同的</strong>。</p><p>我们常见的乱码神兽“锟斤拷”就是字符集的解析不同所导致的。</p><p>譬如中国大陆发送一封邮件到台湾，台湾地区打开时就会出现乱码，除非台湾打开时指定字符集为 <code>GBK</code>。</p><h2 id="_3-unicode" tabindex="-1">3.Unicode <a class="header-anchor" href="#_3-unicode" aria-label="Permalink to &quot;3.Unicode&quot;">​</a></h2><p><a href="https://home.unicode.org/" target="_blank" rel="noreferrer">Unicode-官方网站</a></p><p><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noreferrer">Unicode-维基百科</a></p><p><code>Unicode</code> 将编码空间分成 <code>17</code> 个平面，以 <code>0</code> 到 <code>16</code> 编号。</p><p>第 <code>0</code> 平面（或者说基本多文种平面）中的码点，都可以用一个 <code>UTF-16</code> 单位来编码，或者以 <code>UTF-8</code> 来编码的话，会使用一、二或三个字节。而第 <code>1</code> 到 <code>16</code> 平面（或称辅助平面）中的码点，<code>UTF-16</code> 会以代理对的方式来使用，而 <code>UTF-8</code> 则会编码成 <code>4</code> 个字节。</p><p>在每个平面中，会先将相关的字符集结为区段的形式。虽然区段可以是任意大小，但会以 <code>16</code> 个码点的倍数，且通常是 <code>128</code> 个码点的倍数。而一份文稿中使用到的区段，可能会散布在多个区段中。</p>',21)]))}const g=o(c,[["render",t]]);export{h as __pageData,g as default};
