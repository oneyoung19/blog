import{_ as a,o as s,c as e,aP as n}from"./chunks/framework.D1yHhm2y.js";const k=JSON.parse('{"title":"9.Command Line","description":"","frontmatter":{"title":"9.Command Line"},"headers":[],"relativePath":"engineer/eslint/9.command-line.md","filePath":"engineer/eslint/9.command-line.md","lastUpdated":1736066633000}'),t={name:"engineer/eslint/9.command-line.md"};function l(h,i,o,p,d,r){return s(),e("div",null,i[0]||(i[0]=[n('<p>本节内容主要记录 <code>Eslint</code> 涉及到的各种命令行。</p><p>在前文中，应该已经了解到了 <code>Eslint</code> 检测文件的基础语法：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] [file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">glob]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span></code></pre></div><p>上述语法中的 <code>options</code> 即是本节重点论述内容。</p><p>参考文档：<a href="https://zh-hans.eslint.org/docs/latest/user-guide/command-line-interface" target="_blank" rel="noreferrer">Eslint命令行</a></p><h2 id="_9-1-基础配置" tabindex="-1">9-1.基础配置 <a class="header-anchor" href="#_9-1-基础配置" aria-label="Permalink to &quot;9-1.基础配置&quot;">​</a></h2><h3 id="_9-1-1-no-eslintrc" tabindex="-1">9-1-1.<code>--no-eslintrc</code> <a class="header-anchor" href="#_9-1-1-no-eslintrc" aria-label="Permalink to &quot;9-1-1.`--no-eslintrc`&quot;">​</a></h3><p>忽略 <code>.eslintrc.*</code> 和 <code>package.json</code> 文件中的配置。</p><h3 id="_9-1-2-c-config" tabindex="-1">9-1-2.<code>-c, --config</code> <a class="header-anchor" href="#_9-1-2-c-config" aria-label="Permalink to &quot;9-1-2.`-c, --config`&quot;">​</a></h3><p>指定配置文件。</p><h3 id="_9-1-3-env" tabindex="-1">9-1-3.<code>--env</code> <a class="header-anchor" href="#_9-1-3-env" aria-label="Permalink to &quot;9-1-3.`--env`&quot;">​</a></h3><p>指定语言环境。</p><h3 id="_9-1-4-ext" tabindex="-1">9-1-4.<code>--ext</code> <a class="header-anchor" href="#_9-1-4-ext" aria-label="Permalink to &quot;9-1-4.`--ext`&quot;">​</a></h3><p>指定匹配目标文件的扩展名。</p><p><code>--ext</code> 只适用于检测目标为<strong>目录</strong>的情况。若使用匹配模式或指定文件名，则忽略 <code>--ext</code>。</p><h3 id="_9-1-5-global" tabindex="-1">9-1-5.<code>--global</code> <a class="header-anchor" href="#_9-1-5-global" aria-label="Permalink to &quot;9-1-5.`--global`&quot;">​</a></h3><p>指定全局变量。</p><h3 id="_9-1-6-parser" tabindex="-1">9-1-6.<code>--parser</code> <a class="header-anchor" href="#_9-1-6-parser" aria-label="Permalink to &quot;9-1-6.`--parser`&quot;">​</a></h3><p>指定解析器，默认使用 <code>espree</code>。</p><h3 id="_9-1-7-parser-options" tabindex="-1">9-1-7.<code>--parser-options</code> <a class="header-anchor" href="#_9-1-7-parser-options" aria-label="Permalink to &quot;9-1-7.`--parser-options`&quot;">​</a></h3><p>指定解析器的配置选项。</p><h3 id="_9-1-8-resolve-plugins-relative-to" tabindex="-1">9-1-8.<code>--resolve-plugins-relative-to</code> <a class="header-anchor" href="#_9-1-8-resolve-plugins-relative-to" aria-label="Permalink to &quot;9-1-8.`--resolve-plugins-relative-to`&quot;">​</a></h3><p>指定解析插件的目录位置。</p><p>默认为当前目录，即默认从当前目录下的 <code>node_modules</code> 中加载。</p><h2 id="_9-2-指定规则与插件" tabindex="-1">9-2.指定规则与插件 <a class="header-anchor" href="#_9-2-指定规则与插件" aria-label="Permalink to &quot;9-2.指定规则与插件&quot;">​</a></h2><h3 id="_9-2-1-plugin" tabindex="-1">9-2-1.<code>--plugin</code> <a class="header-anchor" href="#_9-2-1-plugin" aria-label="Permalink to &quot;9-2-1.`--plugin`&quot;">​</a></h3><p>指定要加载的插件。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jquery</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.js</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-plugin-mocha</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.js</span></span></code></pre></div><h3 id="_9-2-2-rule" tabindex="-1">9-2-2.<code>--rule</code> <a class="header-anchor" href="#_9-2-2-rule" aria-label="Permalink to &quot;9-2-2.`--rule`&quot;">​</a></h3><p>指定规则。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;quotes: [error, double]&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;guard-for-in: error&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;brace-style: [error, 1tbs]&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jquery/dollar-sign: error&#39;</span></span></code></pre></div><h2 id="_9-3-修复问题" tabindex="-1">9-3.修复问题 <a class="header-anchor" href="#_9-3-修复问题" aria-label="Permalink to &quot;9-3.修复问题&quot;">​</a></h2><h3 id="_9-3-1-fix" tabindex="-1">9-3-1.<code>--fix</code> <a class="header-anchor" href="#_9-3-1-fix" aria-label="Permalink to &quot;9-3-1.`--fix`&quot;">​</a></h3><p><code>Eslint</code> 尽可能的修复可以修复的问题。</p><p>这些修复会对文件本身产生影响。</p><h3 id="_9-3-2-fix-dry-run" tabindex="-1">9-3-2.<code>--fix-dry-run</code> <a class="header-anchor" href="#_9-3-2-fix-dry-run" aria-label="Permalink to &quot;9-3-2.`--fix-dry-run`&quot;">​</a></h3><p>此项与 <code>--fix</code> 的效果相同，但有一点不同：修复后的代码不会保存在文件系统中。</p><p>这使得从 <code>stdin</code> 中修复代码成为可能（当与 <code>--stdin</code> 标志一起使用时）。</p><p>因为默认的格式不输出固定的代码，你必须使用另一种格式（如 <code>json</code>）来获得固定的内容。这里有该模式的示例：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:command-line</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-eslintrc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stdin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fix-dry-run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format=js</span></span></code></pre></div><p>此标志适用于需要命令行进行自动修复却不保存到文件系统的集成（例如编辑器插件）。</p><h3 id="_9-3-3-fix-type" tabindex="-1">9-3-3.<code>--fix-type</code> <a class="header-anchor" href="#_9-3-3-fix-type" aria-label="Permalink to &quot;9-3-3.`--fix-type`&quot;">​</a></h3><p>指定在使用 <code>--fix</code> 或 <code>--fix-dry-run</code> 时指定的修复类型。</p><ol><li><code>problem</code> 修复代码中的潜在错误</li><li><code>suggestion</code> 改进代码</li><li><code>layout</code> 修复不改变程序结构（AST）的问题</li><li><code>directive</code> 修复内联指令，如 // eslint-disable。</li></ol><h2 id="_9-4-忽略文件" tabindex="-1">9-4.忽略文件 <a class="header-anchor" href="#_9-4-忽略文件" aria-label="Permalink to &quot;9-4.忽略文件&quot;">​</a></h2><h3 id="_9-4-1-ignore-path" tabindex="-1">9-4-1.<code>--ignore-path</code> <a class="header-anchor" href="#_9-4-1-ignore-path" aria-label="Permalink to &quot;9-4-1.`--ignore-path`&quot;">​</a></h3><p>指定 <code>.eslintignore</code> 文件位置。</p><p><code>Eslint</code> 默认从当前工作目录下寻找 <code>.eslintignore</code> 文件。</p><p>可以通过此命令行选项进行覆盖此默认情况。</p><h3 id="_9-4-2-no-ignore" tabindex="-1">9-4-2.<code>--no-ignore</code> <a class="header-anchor" href="#_9-4-2-no-ignore" aria-label="Permalink to &quot;9-4-2.`--no-ignore`&quot;">​</a></h3><p>禁止根据 <code>.eslintignore</code>、<code>--ignore-path</code>、<code>--ignore-pattern</code>、<code>ignorePatterns</code> 属性排除文件。</p><h3 id="_9-4-3-ignore-pattern" tabindex="-1">9-4-3.<code>--ignore-pattern</code> <a class="header-anchor" href="#_9-4-3-ignore-pattern" aria-label="Permalink to &quot;9-4-3.`--ignore-pattern`&quot;">​</a></h3><p>指定目标忽略文件的匹配格式。</p><p>使用方式基本雷同 <code>.eslintignore</code> 的匹配方式。</p><p>要注意的一点是如果要指定多种匹配格式的话：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># work</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignore-pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lib/*.js&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignore-pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;util/*.js&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># not work</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignore-pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lib/*.js&#39;,&#39;util/*.js&#39;</span></span></code></pre></div><h2 id="_9-5-使用stdin" tabindex="-1">9-5.使用stdin <a class="header-anchor" href="#_9-5-使用stdin" aria-label="Permalink to &quot;9-5.使用stdin&quot;">​</a></h2><p>什么是<a href="https://segmentfault.com/a/1190000018650023" target="_blank" rel="noreferrer">stdin</a></p><h3 id="_9-5-1-stdin" tabindex="-1">9-5-1.<code>--stdin</code> <a class="header-anchor" href="#_9-5-1-stdin" aria-label="Permalink to &quot;9-5-1.`--stdin`&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 相当于 在pipe流中运行eslint 然后将结果从标准化输入中读取</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stdin</span></span></code></pre></div><p>更多的场景下，一般与 <code>--fix-dry-run</code> 联用（必须设置 <code>--format</code>，譬如可以将结果以 <code>json</code> 形式读取出来）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stdin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fix-dry-run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format=json</span></span></code></pre></div><h2 id="_9-6-处理警告" tabindex="-1">9-6.处理警告 <a class="header-anchor" href="#_9-6-处理警告" aria-label="Permalink to &quot;9-6.处理警告&quot;">​</a></h2><h3 id="_9-6-1-quiet" tabindex="-1">9-6-1.<code>--quiet</code> <a class="header-anchor" href="#_9-6-1-quiet" aria-label="Permalink to &quot;9-6-1.`--quiet`&quot;">​</a></h3><p>关闭 <code>warn</code> 警告，只会报告 <code>error</code> 错误警告。</p><h3 id="_9-6-2-max-warnings" tabindex="-1">9-6-2.<code>--max-warnings</code> <a class="header-anchor" href="#_9-6-2-max-warnings" aria-label="Permalink to &quot;9-6-2.`--max-warnings`&quot;">​</a></h3><p>指定 <code>warn</code> 警告的数量上限，当超过这个上限之后，<code>eslint</code> 在控制台会以错误状态退出，并可能伴随着以下类似提示：</p><p><code>ESLint found too many warnings (maximum: 1)</code></p><h2 id="_9-7-输出" tabindex="-1">9-7.输出 <a class="header-anchor" href="#_9-7-输出" aria-label="Permalink to &quot;9-7.输出&quot;">​</a></h2><h3 id="_9-7-1-o-output-file" tabindex="-1">9-7-1.<code>-o, --output-file</code> <a class="header-anchor" href="#_9-7-1-o-output-file" aria-label="Permalink to &quot;9-7-1.`-o, --output-file`&quot;">​</a></h3><p>将报告写入到指定文件内。</p><h3 id="_9-7-2-f-format" tabindex="-1">9-7-2.<code>-f, --format</code> <a class="header-anchor" href="#_9-7-2-f-format" aria-label="Permalink to &quot;9-7-2.`-f, --format`&quot;">​</a></h3><p>指定控制台的输出格式。</p><p><a href="https://zh-hans.eslint.org/docs/latest/user-guide/formatters/" target="_blank" rel="noreferrer">Eslint内置格式化一览</a></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:command-line</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./src/command-line/log.html</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format=html</span></span></code></pre></div><h3 id="_9-7-3-color-no-color" tabindex="-1">9-7-3.<code>--color, --no-color</code> <a class="header-anchor" href="#_9-7-3-color-no-color" aria-label="Permalink to &quot;9-7-3.`--color, --no-color`&quot;">​</a></h3><p>启用/禁用控制台上的颜色渲染。</p><h2 id="_9-8-行内配置注释" tabindex="-1">9-8.行内配置注释 <a class="header-anchor" href="#_9-8-行内配置注释" aria-label="Permalink to &quot;9-8.行内配置注释&quot;">​</a></h2><h3 id="_9-8-1-no-inline-config" tabindex="-1">9-8-1.<code>--no-inline-config</code> <a class="header-anchor" href="#_9-8-1-no-inline-config" aria-label="Permalink to &quot;9-8-1.`--no-inline-config`&quot;">​</a></h3><p>禁止内联注释配置。</p><p>设置之后，如 <code>eslint-enable</code> 、<code>eslint-disable</code> 等内联注释都会失效。</p><h3 id="_9-8-2-report-unused-disable-directives" tabindex="-1">9-8-2.<code>--report-unused-disable-directives</code> <a class="header-anchor" href="#_9-8-2-report-unused-disable-directives" aria-label="Permalink to &quot;9-8-2.`--report-unused-disable-directives`&quot;">​</a></h3><p>报告实际没有产生作用的内联注释配置。</p><p>主要的应用场景是这样：</p><p>譬如，在某次开发中，发现代码的一行需要 <code>lint</code>。</p><p>为了快速和方便，直接添加了 <code>//eslint-disable-line</code>。</p><p>但后续可能 <code>eslint</code> 版本升级修复了规则，或者其他开发成员在 <code>rules</code> 中关闭了规则。</p><p>那么这时就可以利用该命令行，进行检测代码中无用的配置，进而优化代码。</p><h2 id="_9-9-缓存" tabindex="-1">9-9.缓存 <a class="header-anchor" href="#_9-9-缓存" aria-label="Permalink to &quot;9-9.缓存&quot;">​</a></h2><h3 id="_9-9-1-cache" tabindex="-1">9-9-1.<code>--cache</code> <a class="header-anchor" href="#_9-9-1-cache" aria-label="Permalink to &quot;9-9-1.`--cache`&quot;">​</a></h3><p>使用该命令时，默认会在当前工作目录下创建一个 <code>.eslintcache</code> 文件。</p><p>该文件会提高检测和 <code>lint</code> 执行效率。</p><h3 id="_9-9-2-cache-location" tabindex="-1">9-9-2.<code>--cache-location</code> <a class="header-anchor" href="#_9-9-2-cache-location" aria-label="Permalink to &quot;9-9-2.`--cache-location`&quot;">​</a></h3><p>也可以使用该命令行选项，指定在某一目录下创建 <code>.eslintcache</code> 文件，或者指定某一文件为 <code>.eslintcache</code> 文件（内容会被写入该文件内）。</p><h3 id="_9-9-3-cache-strategy" tabindex="-1">9-9-3.<code>--cache-strategy</code> <a class="header-anchor" href="#_9-9-3-cache-strategy" aria-label="Permalink to &quot;9-9-3.`--cache-strategy`&quot;">​</a></h3><p>该项用于指定检测文件是否变更的缓存策略。</p><p>可设定值有 <code>metadata</code>、<code>content</code>。</p><p>默认为 <code>metadata</code>，即文件修改时间等数据信息。</p><p>设定为 <code>content</code> 后，会根据文件内容是否变更，来判定文件是否变更。</p><h2 id="_9-10-杂项" tabindex="-1">9-10.杂项 <a class="header-anchor" href="#_9-10-杂项" aria-label="Permalink to &quot;9-10.杂项&quot;">​</a></h2><h3 id="_9-10-1-init" tabindex="-1">9-10-1.<code>--init</code> <a class="header-anchor" href="#_9-10-1-init" aria-label="Permalink to &quot;9-10-1.`--init`&quot;">​</a></h3><p>此项将基于当前目录运行 <code>npm init @eslint/config</code> 来启动配置并初始化项目。</p><p><code>npm init</code> 有以下几种用法：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [--force</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--yes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--scope]</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@scop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (same </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/create`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;@scope&gt;/]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">same</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [&lt;@scope&gt;/]create-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>因此，<code>npm init @eslint/config</code> 实际上相当于 <code>npx @eslint/create-config</code>。</p><h3 id="_9-10-2-env-info" tabindex="-1">9-10-2.<code>--env-info</code> <a class="header-anchor" href="#_9-10-2-env-info" aria-label="Permalink to &quot;9-10-2.`--env-info`&quot;">​</a></h3><p>此项输出关于执行环境的信息，包括 <code>Node</code>、<code>npm</code> 的版本，以及 <code>ESLint</code> 的本地和全局安装。</p><p><code>ESLint</code> 团队可能会要求提供这些信息以帮助解决 <code>bug</code>。</p><p>可能有如下类似输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Environment Info:</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Node version: v14.16.0</span></span>\n<span class="line"><span>npm version: v6.14.11</span></span>\n<span class="line"><span>Local ESLint version: v8.28.0 (Currently used)</span></span>\n<span class="line"><span>Global ESLint version: Not found</span></span>\n<span class="line"><span>Operating System: darwin 19.6.0</span></span></code></pre></div><h3 id="_9-10-3-debug" tabindex="-1">9-10-3.<code>--debug</code> <a class="header-anchor" href="#_9-10-3-debug" aria-label="Permalink to &quot;9-10-3.`--debug`&quot;">​</a></h3><p>该选项将调试信息输出到控制台。</p><h3 id="_9-10-4-h-help" tabindex="-1">9-10-4.<code>-h,--help</code> <a class="header-anchor" href="#_9-10-4-h-help" aria-label="Permalink to &quot;9-10-4.`-h,--help`&quot;">​</a></h3><p>输出帮助菜单并显示所有可用选项。若此项存在，则忽略其他选项。</p><h3 id="_9-10-5-v-version" tabindex="-1">9-10-5.<code>-v, --version</code> <a class="header-anchor" href="#_9-10-5-v-version" aria-label="Permalink to &quot;9-10-5.`-v, --version`&quot;">​</a></h3><p>输出当前的 <code>ESLint</code> 版本至控制台。若此项存在，则忽略其他选项。</p><h3 id="_9-10-6-print-config" tabindex="-1">9-10-6.<code>--print-config</code> <a class="header-anchor" href="#_9-10-6-print-config" aria-label="Permalink to &quot;9-10-6.`--print-config`&quot;">​</a></h3><p>输出用于传递的文件的配置。<strong>若此项存在，则将不会进行 <code>lint</code> 提示，并且仅与该选项相关的其他命令行选项才会生效</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --print-config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.js</span></span></code></pre></div><p>额外注意的一点：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --cache选项失效 而且不会进行lint检测</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cache</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --print-config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.js</span></span></code></pre></div><h2 id="_9-11-退出码" tabindex="-1">9-11.退出码 <a class="header-anchor" href="#_9-11-退出码" aria-label="Permalink to &quot;9-11.退出码&quot;">​</a></h2><p>当对文件进行检查时，<code>Eslint</code> 将以下方任一代码退出：</p><ul><li><code>0</code>: 检查通过，没有任何错误。若 <code>--max-warnings</code> 标志为 <code>n</code>，则最多允许有 <code>n</code> 个警告。</li><li><code>1</code>: 着色成功，但至少有一个错误或有超过 <code>--max-warnings</code> 项的警告数。</li><li><code>2</code>: 由于配置问题或内部错误，检查失败。</li></ul>',124)]))}const g=a(t,[["render",l]]);export{k as __pageData,g as default};
