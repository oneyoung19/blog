import{_ as i,o as a,c as e,aP as n}from"./chunks/framework.D1yHhm2y.js";const c=JSON.parse('{"title":"2-1.使用插件","description":"","frontmatter":{"title":"2-1.使用插件"},"headers":[],"relativePath":"engineer/vite/2.PLUGINS.01.md","filePath":"engineer/vite/2.PLUGINS.01.md","lastUpdated":1735988637000}'),l={name:"engineer/vite/2.PLUGINS.01.md"};function p(t,s,h,k,d,r){return a(),e("div",null,s[0]||(s[0]=[n(`<h2 id="引入插件" tabindex="-1">引入插件 <a class="header-anchor" href="#引入插件" aria-label="Permalink to &quot;引入插件&quot;">​</a></h2><p>要想为传统浏览器提供支持，可以使用 <code>@vitejs/plugin-legacy</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vitejs/plugin-legacy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> legacy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vitejs/plugin-legacy&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    legacy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      targets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;defaults&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;not IE 11&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>Question</code>:</p><p><code>@vitejs/plugin-legacy</code> 这个插件的作用是针对什么？难道使用 <code>vue3</code> 版本，结合该插件，就能兼容 <code>IE</code>? 应该是不可行的吧。</p><p><code>Anwser</code>:</p><p><code>@vitejs/plugin-legacy</code> 针对的是 <code>ESM</code> 规范以及相关 <code>polyfill</code>。<code>vue3</code> 版本中的 <code>proxy</code> 无法使用 <code>polyfill</code> 进行兼容。</p><p>传统浏览器可以通过插件 <code>@vitejs/plugin-legacy</code> 来支持，它将自动生成传统版本的 <code>chunk</code> 及与其相对应 <code>ES</code> 语言特性方面的 <code>polyfill</code>。</p><p>兼容版的 <code>chunk</code> 只会在不支持原生 <code>ESM</code> 的浏览器中进行按需加载。</p><p>详见<a href="https://cn.vitejs.dev/guide/build.html#browser-compatibility" target="_blank" rel="noreferrer">浏览器兼容性</a></p><h2 id="强制插件排序" tabindex="-1">强制插件排序 <a class="header-anchor" href="#强制插件排序" aria-label="Permalink to &quot;强制插件排序&quot;">​</a></h2><p>为了与某些 <code>Rollup</code> 插件兼容，可能需要强制修改插件的执行顺序，或者只在构建时使用。</p><p>这应该是 <code>Vite</code> 插件的实现细节。</p><p>可以使用 <code>enforce</code> 修饰符来强制插件的位置:</p><ul><li><code>pre</code>：在 <code>Vite</code> 核心插件之前调用该插件</li><li>默认：在 <code>Vite</code> 核心插件之后调用该插件</li><li><code>post</code>：在 <code>Vite</code> 构建插件之后调用该插件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@rollup/plugin-image&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      enforce: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pre&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="区分插件环境" tabindex="-1">区分插件环境 <a class="header-anchor" href="#区分插件环境" aria-label="Permalink to &quot;区分插件环境&quot;">​</a></h2><p>默认情况下插件在开发 (<code>serve</code>) 和生产 (<code>build</code>) 模式中都会调用。</p><p>如果插件在服务或构建期间按需使用，请使用 <code>apply</code> 属性指明它们仅在 &#39;<code>build</code>&#39; 或 &#39;<code>serve</code>&#39; 模式时调用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typescript2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-typescript2&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typescript2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      apply: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;build&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="第三方插件" tabindex="-1">第三方插件 <a class="header-anchor" href="#第三方插件" aria-label="Permalink to &quot;第三方插件&quot;">​</a></h2><p>此处，列举一些第三方插件：</p><ul><li><a href="https://github.com/owlsdepartment/vite-plugin-babel" target="_blank" rel="noreferrer">vite-plugin-babel</a></li><li><a href="https://github.com/gxmari007/vite-plugin-eslint" target="_blank" rel="noreferrer">vite-plugin-eslint</a></li><li><a href="https://github.com/vite-pwa/vite-plugin-pwa" target="_blank" rel="noreferrer">vite-plugin-pwa</a></li></ul><p>某些遵循了一定规则的 <code>rollup</code> 插件也能直接在 <code>vite</code> 中使用。</p><p>更多第三方列表可查看 <a href="https://github.com/vitejs/awesome-vite#plugins" target="_blank" rel="noreferrer">awesome-vite</a>。</p>`,26)]))}const g=i(l,[["render",p]]);export{c as __pageData,g as default};
