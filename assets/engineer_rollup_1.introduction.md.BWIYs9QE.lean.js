import{_ as o,o as c,c as d,aP as l}from"./chunks/framework.D1yHhm2y.js";const b=JSON.parse('{"title":"1.Introduction","description":"","frontmatter":{"title":"1.Introduction"},"headers":[],"relativePath":"engineer/rollup/1.introduction.md","filePath":"engineer/rollup/1.introduction.md","lastUpdated":1735962761000}'),p={name:"engineer/rollup/1.introduction.md"};function r(t,e,a,n,i,u){return c(),d("div",null,e[0]||(e[0]=[l('<p><a href="https://rollupjs.org/" target="_blank" rel="noreferrer">英文网站</a></p><p><a href="https://cn.rollupjs.org/" target="_blank" rel="noreferrer">中文网站</a></p><p><a href="https://github.com/oneyoung19/big-study/tree/master/bundler/rollup" target="_blank" rel="noreferrer">示例源码</a></p><p><code>Rollup</code> 是一个快速、轻量级的模块化打包器，适用于构建 <code>JavaScript</code> 库和应用程序。</p><p>它推崇使用 <code>ES Module</code> 模块化规范。在<strong>安装插件</strong>的情况下，也能解析 <code>CommonJS</code> 规范代码。</p><p><strong><code>Rollup</code> 是专门针对 <code>EsModule</code> 模块化规范的打包工具</strong>。</p><p>这一点与 <code>webpack</code> 不同，因为 <code>webpack</code> 能够处理 <code>CommonJs</code> 及 <code>EsModule</code> 等。</p><p>以下是 <code>Rollup</code> 和 <code>Webpack</code> 的异同点：</p><p>相同点：</p><ul><li><code>Rollup</code> 和 <code>Webpack</code> 都支持插件机制，可以通过插件扩展其功能。</li><li><code>Rollup</code> 和 <code>Webpack</code> 都支持代码分割和懒加载，以提高应用程序的性能。</li><li><code>Rollup</code> 和 <code>Webpack</code> 都可以配置多个入口文件，以便于打包多个文件。</li><li><code>Rollup</code> 和 <code>Webpack</code> 都支持 <code>Tree Shaking</code>。</li></ul><p>不同点：</p><ul><li><code>Rollup</code> 专注于打包 <code>JavaScript</code> 库或组件，而 <code>Webpack</code> 更适合打包整个应用程序。</li><li><code>Rollup</code> 针对支持 <code>ES6</code> 模块规范，并将其转换为浏览器可以运行的代码，而 <code>Webpack</code> 则支持更多的模块规范，如 <code>CommonJS</code>、<code>AMD</code> 等。</li><li><code>Rollup</code> 打包后的代码可读性更高，而 <code>Webpack</code> 则会注入自己的模块方法。</li><li><code>Rollup</code> 更适合打包纯 <code>JavaScript</code> 代码，而 <code>Webpack</code> 则适用于更多类型的文件，如 <code>CSS</code>、图片等。</li></ul><p>总的来说，<code>Rollup</code> 和 <code>Webpack</code> 都是非常强大的打包工具，具有不同的优缺点和使用场景，开发者可以根据自己的需要选择合适的工具。</p>',13)]))}const k=o(p,[["render",r]]);export{b as __pageData,k as default};
