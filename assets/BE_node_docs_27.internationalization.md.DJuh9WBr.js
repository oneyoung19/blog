import{_ as i,c as a,o as n,b0 as t}from"./chunks/framework.DpiX_U7m.js";const E=JSON.parse('{"title":"27.Internationalization","description":"","frontmatter":{"title":"27.Internationalization"},"headers":[],"relativePath":"BE/node/docs/27.internationalization.md","filePath":"BE/node/docs/27.internationalization.md","lastUpdated":1748348682000}'),e={name:"BE/node/docs/27.internationalization.md"};function l(h,s,p,k,o,r){return n(),a("div",null,s[0]||(s[0]=[t(`<p><a href="https://nodejs.org/docs/latest/api/intl.html" target="_blank" rel="noreferrer">https://nodejs.org/docs/latest/api/intl.html</a></p><p>在 <code>Node.js</code> 中，国际化（<code>Internationalization</code>，简称 <code>i18n</code>）是指使应用程序能够支持多种语言和文化的功能。</p><p><code>Node.js</code> 提供了一些内置的模块和工具来帮助开发人员实现国际化功能。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noreferrer">Intl</a> 是 <code>ECMAScript</code> 的一个内置对象，提供了语言敏感的字符串比较、数字格式化、日期和时间格式化等功能。</p><p><code>Intl</code> 对象在 <code>Node.js</code> 中也可用，主要包括以下几个构造函数：</p><ul><li><code>Intl.Collator</code>：用于比较字符串。</li><li><code>Intl.NumberFormat</code>：用于格式化数字。</li><li><code>Intl.DateTimeFormat</code>：用于格式化日期和时间。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hasICU)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456.789</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NumberFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;de-DE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;123.456,789&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en-GB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;05/08/2024&quot; （在英国格式下）</span></span></code></pre></div>`,7)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
