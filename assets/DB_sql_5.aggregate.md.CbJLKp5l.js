import{_ as i,o as a,c as e,aP as l}from"./chunks/framework.D1yHhm2y.js";const r=JSON.parse('{"title":"聚合函数","description":"","frontmatter":{"title":"聚合函数"},"headers":[],"relativePath":"DB/sql/5.aggregate.md","filePath":"DB/sql/5.aggregate.md","lastUpdated":1736066633000}'),t={name:"DB/sql/5.aggregate.md"};function n(p,s,h,d,k,o){return a(),e("div",null,s[0]||(s[0]=[l(`<p>常用的聚合函数主要有以下几种：</p><ul><li><code>AVG</code> 平均值</li><li><code>COUNT</code> 总数</li><li><code>MAX</code> 最大值</li><li><code>MIN</code> 最小值</li><li><code>SUM</code> 总和</li></ul><p>聚合函数通常可以与 <code>GROUP BY</code> 语句进行联用，譬如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(salary)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job;</span></span></code></pre></div><p>上述语句，会检索出每一种 <code>job</code> 对应的平均 <code>salary</code>。</p><p>在此之下，我们还可以与 <code>HAVING</code> 子句连用，筛选出对应条件的数据：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(salary)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HAVING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;engineer&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;designer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>HAVING</code> 的使用语法类似于 <code>WHERE</code> 语句，唯一的区别是 <code>HAVING</code> 只能用在 <code>GROUP BY</code> 条件下。</p>`,8)]))}const g=i(t,[["render",n]]);export{r as __pageData,g as default};
