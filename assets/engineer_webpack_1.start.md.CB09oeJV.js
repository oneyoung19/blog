import{_ as a,c,o as s,b0 as o}from"./chunks/framework.Ctc7-3V1.js";const i="/blog/assets/webpack.CufbOJPp.jpg",b=JSON.parse('{"title":"前言","description":"","frontmatter":{"title":"前言"},"headers":[],"relativePath":"engineer/webpack/1.start.md","filePath":"engineer/webpack/1.start.md","lastUpdated":1748085908000}'),p={name:"engineer/webpack/1.start.md"};function d(n,e,t,l,k,r){return s(),c("div",null,e[0]||(e[0]=[o('<h2 id="为什么要用webpack" tabindex="-1">为什么要用webpack <a class="header-anchor" href="#为什么要用webpack" aria-label="Permalink to &quot;为什么要用webpack&quot;">​</a></h2><p><code>webpack</code>是前端工程化发展到一定阶段的必然产物。</p><p><code>webpack</code>的基础是前端的模块化。它提供了对于<code>commonJs</code>、<code>AMD</code>以及<code>ES6 import</code>语法的支持。</p><h2 id="webpack如何使用" tabindex="-1">webpack如何使用 <a class="header-anchor" href="#webpack如何使用" aria-label="Permalink to &quot;webpack如何使用&quot;">​</a></h2><img src="'+i+`" alt="webpack"><p>官网上的这幅图很形象。<code>webpack</code>会以某文件为入口，依次深层遍历该文件的依赖，将所有的依赖代码打包成一个文件。</p><p>值得一提的是，<code>webpack</code>不仅支持<strong>SPA单页面应用</strong>，它也能用在多页应用。</p><p>不考虑<strong>异步Chunk以及公共Chunk</strong>的话，单页面应用的<code>js</code>、<code>css</code>、<code>img</code>等最终都会打包成一个<code>JS</code>文件。而多页应用则会打包成多个。</p><h2 id="学习webpack" tabindex="-1">学习webpack <a class="header-anchor" href="#学习webpack" aria-label="Permalink to &quot;学习webpack&quot;">​</a></h2><p><code>webpack</code>基础可以分为六部分：</p><ul><li><code>entry</code>: 配置入口文件。</li><li><code>output</code>: 配置输出。</li><li><code>resolve</code>: 配置寻找模块的规则。</li><li><code>module</code>: 配置处理模块的规则。</li><li><code>plugins</code>: 配置扩展插件，拓展工作流功能。</li><li><code>devServer</code>: 配置开发环境，使开发环境效率更高。</li></ul><h2 id="安装webpack4-0" tabindex="-1">安装webpack4.0 <a class="header-anchor" href="#安装webpack4-0" aria-label="Permalink to &quot;安装webpack4.0&quot;">​</a></h2><p>不推荐全局安装<code>webpack</code>。防止不同项目的依赖版本不同。另外如果想要使用<code>webpack</code>命令行的话，需要安装<code>webpack-cli</code>脚手架。目前<code>webpack</code>的最新版本是<code>4.0</code>。所以下面的<code>webpack</code>相关loader和插件用法等都是基于<code>4.0</code>来说的。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack-cli</span></span></code></pre></div><h2 id="使用webpack4-0" tabindex="-1">使用webpack4.0 <a class="header-anchor" href="#使用webpack4-0" aria-label="Permalink to &quot;使用webpack4.0&quot;">​</a></h2><p>安装完<code>webpack</code>及<code>webpack-cli</code>后，使用<code>webpack</code>命令行有3种常见用法。假设配置文件是<code>webpack.config.js</code>。</p><h3 id="_1-终端webpack命令行" tabindex="-1">1.终端webpack命令行 <a class="header-anchor" href="#_1-终端webpack命令行" aria-label="Permalink to &quot;1.终端webpack命令行&quot;">​</a></h3><p>如果想要在终端直接执行<code>webpack --config webpack.config.js</code>是不行的。假设当前命令行执行目录与<code>node_modules</code>同级，可以执行<code>./node_modules/.bin/webpack --config webpack.config.js</code>。</p><p><code>--config</code>指令用来自定义<code>webpack</code>的配置文件。</p><h3 id="_2-npx" tabindex="-1">2.npx <a class="header-anchor" href="#_2-npx" aria-label="Permalink to &quot;2.npx&quot;">​</a></h3><p>可能你觉得第一种方式不够优雅。<code>npm</code>自带了一个执行工具<code>npx</code>。于是可以使用：<code>npx webpack --config webpack.config.js</code>。</p><h3 id="_3-npm-scripts" tabindex="-1">3.npm scripts <a class="header-anchor" href="#_3-npm-scripts" aria-label="Permalink to &quot;3.npm scripts&quot;">​</a></h3><p>这种也是最常见也是最推荐的用法。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack --config webpack.config.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样就可以在终端中执行<code>npm run build</code>或者<code>yarn build</code>。</p>`,25)]))}const w=a(p,[["render",d]]);export{b as __pageData,w as default};
