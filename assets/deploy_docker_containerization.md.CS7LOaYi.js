import{_ as i,c as a,o as e,b0 as n}from"./chunks/framework.CEggy_nf.js";const r=JSON.parse('{"title":"应用容器化","description":"","frontmatter":{"title":"应用容器化"},"headers":[],"relativePath":"deploy/docker/containerization.md","filePath":"deploy/docker/containerization.md","lastUpdated":1743843633000}'),l={name:"deploy/docker/containerization.md"};function p(t,s,h,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<p>应用容器化是将应用程序和其所有依赖项打包成一个容器中的过程。</p><p>这个容器可以在任何支持容器技术的操作系统上运行，而不需要重新配置或重新安装依赖项。</p><p>应用容器化技术提供了一种轻量级、可移植、可扩展和可隔离的部署方式，让开发者能够更方便地构建、测试和部署应用程序。</p><p>在 <code>Docker</code> 中，开发者可以将应用程序打包到一个镜像中，然后在容器中运行。</p><p>这个镜像包含了应用程序代码、库文件和运行时环境等所有需要的依赖项，从而避免了在不同的环境中重新安装和配置这些依赖项的复杂性。</p><h2 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h2><p><code>Dockerfile</code> 是一个文本文件，其中包含了一条条指令，用于构建一个镜像。</p><p><code>Dockerfile</code> 中的每一条指令都会创建一个新的镜像层，并对镜像进行更新。</p><p>当 <code>Docker</code> 客户端执行 <code>docker build</code> 命令时，它会读取 <code>Dockerfile</code> 中的指令，并根据指令构建一个新的镜像。</p><p><code>Dockerfile</code> 中的指令可以分为以下几类：</p><ul><li>基础指令（<code>FROM</code>、<code>MAINTAINER</code>、<code>RUN</code>、<code>CMD</code>、<code>EXPOSE</code>、<code>ENV</code>、<code>ADD</code>、<code>COPY</code>、<code>ENTRYPOINT</code>、<code>VOLUME</code>、<code>USER</code>、<code>WORKDIR</code>）</li><li>镜像维护指令（<code>LABEL</code>）</li><li>构建指令（<code>ARG</code>、<code>ONBUILD</code>、<code>STOPSIGNAL</code>、<code>HEALTHCHECK</code>、<code>SHELL</code>）</li><li>注释指令（<code>#</code>）</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于如何区分命令是否会新建镜像层，一个基本的原则是：</p><ul><li>如果指令的作用是向镜像中增添新的文件或程序，那么这条指令就会新建镜像层；</li><li>如果只是告诉 <code>Docker</code> 如何完成构建或者如何运行应用程序，那么就只会增加镜像的元数据。</li></ul></div><p>譬如一个简单的 <code>node</code> 服务的 <code>Dockerfile</code> 如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Linux x64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LABEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maintainer=&quot;nigelpoulton@hotmail.com&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install Node and NPM</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodejs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy app to /src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /src</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /src</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app.js&quot;]</span></span></code></pre></div><p>在 <code>Dockerfile</code> 中的指令主要有以下几种：</p><h3 id="from" tabindex="-1">FROM <a class="header-anchor" href="#from" aria-label="Permalink to &quot;FROM&quot;">​</a></h3><p><code>FROM</code> 指令用于<strong>指定基础镜像</strong>。</p><p>实际上，我们是基于基础镜像，实现一个定制化镜像。</p><p>因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">imag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span></span></code></pre></div><p>在 <code>Docker Hub</code> 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，譬如：</p><ul><li><code>nginx</code></li><li><code>redis</code></li><li><code>mongo</code></li><li><code>mysql</code></li><li><code>httpd</code></li><li><code>php</code></li><li><code>tomcat</code></li></ul><p>也有一些方便开发、构建、运行各种语言应用的镜像，譬如：</p><ul><li><code>node</code></li><li><code>openjdk</code></li><li><code>python</code></li><li><code>ruby</code></li><li><code>golang</code></li></ul><p>此外，官方镜像中还提供了一些更为基础的操作系统镜像，譬如：</p><ul><li><code>ubuntu</code></li><li><code>debian</code></li><li><code>centos</code></li><li><code>fedora</code></li><li><code>alpine</code></li></ul><p>除了选择现有镜像为基础镜像外，<code>Docker</code> 还存在一个特殊的镜像，名为 <code>scratch</code>。</p><p><strong>这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像</strong>。</p><p>如果以 <code>scratch</code> 为基础镜像的话，意味着将不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><h3 id="label" tabindex="-1">LABEL <a class="header-anchor" href="#label" aria-label="Permalink to &quot;LABEL&quot;">​</a></h3><p><code>LABEL</code> 指令用于给镜像以键值对的形式添加一些元数据。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LABEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>譬如，声明镜像的作者和文档地址：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LABEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maintainer=&quot;Tom&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LABEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs=&quot;https://docs.docker.com/engine/reference/builder/&quot;</span></span></code></pre></div><h3 id="run" tabindex="-1">RUN <a class="header-anchor" href="#run" aria-label="Permalink to &quot;RUN&quot;">​</a></h3><p><code>RUN</code> 指令用于<strong>执行命令行命令</strong>。</p><p>它的使用格式有两种：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># RUN 命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot; ...]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;executable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param1&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;param2&quot;]</span></span></code></pre></div><p>在书写 <code>Dockerfile</code> 时，要注意的是<strong>每一条 <code>RUN</code> 指令都会新建一层镜像</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian:stretch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libc6-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xzf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --strip-components=1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>上面的 <code>Dockerfile</code> 中，每一条 <code>RUN</code> 指令都会新建一层镜像，这样会导致镜像体积过大。</p><p>因此，我们可以将多条 <code>RUN</code> 指令合并为一条指令，这样就只会新建一层镜像。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian:stretch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libc6-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xzf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --strip-components=1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>其中，<strong><code>\\</code> 表示换行，<code>&amp;&amp;</code> 表示将各个命令串联起来。</strong></p><p>相比之下，新的 <code>Dockerfile</code> 中只会新建一层镜像，因此镜像体积也会更小。</p><h3 id="copy" tabindex="-1">COPY <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;COPY&quot;">​</a></h3><p><code>COPY</code> 指令用于<strong>从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标位置&gt;</strong>。</p><p>基本使用格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">des</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><code>COPY</code> 指令的 <code>src</code> 参数可以是多个，但是 <code>dest</code> 参数只能是一个。</p><p><code>COPY</code> 指令的 <code>src</code> 参数可以是一个文件，也可以是一个目录。</p><p><strong>如果 <code>src</code> 参数是一个目录的话，那么 <code>dest</code> 参数必须以 <code>/</code> 结尾，否则会报错</strong>。</p><p><code>dest</code> 不需要事先存在，<code>COPY</code> 指令会自动创建。</p><p>譬如，复制 <code>package.json</code> 到 <code>/usr/src/app/</code> 目录中：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/app/</span></span></code></pre></div><p>此外，还需要注意一点，使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。</p><p>这个特性对于镜像定制很有用。特别是构建相关文件都在使用 <code>Git</code> 进行管理的时候。</p><p>最后，额外说明一下，<code>COPY</code> 指令的 <code>.</code> 符号。</p><ul><li><p><strong>当 <code>src</code> 是 <code>.</code> 时，代表的是上下文目录</strong>。通常是 <code>Dockerfile</code> 所在的目录。</p></li><li><p><strong>当 <code>dest</code> 是 <code>.</code> 时，代表的是容器内部的工作目录</strong>。可以通过 <code>WORKDIR</code> 指令来设置，默认是 <code>/</code>。</p></li></ul><h3 id="workdir" tabindex="-1">WORKDIR <a class="header-anchor" href="#workdir" aria-label="Permalink to &quot;WORKDIR&quot;">​</a></h3><p><code>WORKDIR</code> 指令用于<strong>设置工作目录</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/workdir</span></span></code></pre></div><p><code>WORKDIR</code> 指令的参数可以是相对路径，也可以是绝对路径。</p><p>如果 <code>WORKDIR</code> 指令的参数不存在，那么 <code>Docker</code> 会自动创建这个目录。</p><p>如果 <code>WORKDIR</code> 指令没有参数，那么会使用默认的工作目录，即 <code>/</code>。</p><p>一些初学者会将 <code>Dockerfile</code> 当做 <code>SHELL</code> 脚本来书写，譬如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;helo world&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.txt</span></span></code></pre></div><p>如果将这个 <code>Dockerfile</code> 进行构建镜像运行后，会发现找不到 <code>/app/world.txt</code> 文件，或者其内容不是 <code>hello</code>。</p><p>因为在 <code>Shell</code> 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；</p><p>而在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器。</p><p>因此，第二个 <code>RUN</code> 命令是在 <code>/</code> 目录下执行的，而不是 <code>/app</code> 目录下。</p><p>这是对 <code>Dockerfile</code> 构建分层存储的概念不了解所导致的错误。</p><p><strong>如果需要改变以后各层的工作目录的位置</strong>，那么应该使用 <code>WORKDIR</code> 指令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world.txt</span></span></code></pre></div><h3 id="expose" tabindex="-1">EXPOSE <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;EXPOSE&quot;">​</a></h3><p><code>EXPOSE</code> 指令用于<strong>声明容器提供服务所使用的端口</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;port2&gt;...]</span></span></code></pre></div><p><code>EXPOSE</code> 指令的参数可以是一个或多个，多个端口之间用空格分隔。</p><p><code>EXPOSE</code> 指令是声明容器运行时提供服务的端口，这只是一个声明，<strong>在容器运行时并不会因为这个声明应用就会开启这个端口的服务</strong>。</p><p>在 <code>Dockerfile</code> 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；</p><p>另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p><h3 id="entrypoint" tabindex="-1">ENTRYPOINT <a class="header-anchor" href="#entrypoint" aria-label="Permalink to &quot;ENTRYPOINT&quot;">​</a></h3><p><code>ENTRYPOINT</code> 指令用于<strong>设置容器启动时执行的命令</strong>。</p><p>该指令的定义支持 <code>shell</code> 形式和 <code>exec</code> 形式。</p><p>基本格式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;executable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param1&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;param2&quot;]</span></span></code></pre></div><p>其中，<code>executable</code> 可以是一个 <code>shell</code> 命令，也可以是一个可执行文件。</p><p>当 <code>executable</code> 是一个 <code>shell</code> 命令，将会在容器中启动一个新的 <code>shell</code> 进程，并由该 <code>shell</code> 进程解释执行命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python:3.9-slim-buster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myscript.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /myscript.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/myscript.py&quot;]</span></span></code></pre></div><p>当 <code>executable</code> 是一个可执行文件时，将会直接在容器中启动该可执行文件。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python:3.9-slim-buster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myscript.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /myscript.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/local/bin/python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/myscript.py&quot;]</span></span></code></pre></div><p>总的来说，如果在 <code>ENTRYPOINT</code> 中使用了参数扩展或者希望在容器中使用管道、重定向等 <code>shell</code> 特性，那么应该使用 <code>shell</code> 形式；</p><p>如果希望执行的是一个可执行文件而不是一个 <code>shell</code> 命令，那么应该使用 <code>exec</code> 形式。</p><h3 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h3><p><code>CMD</code> 指令用于设置<strong>容器启动时默认执行</strong>的命令。</p><p><code>CMD</code> 有多种不同的使用方式：</p><ol><li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> (<code>exec</code> 形式，推荐)</li></ol><p><strong>在容器启动时运行指定的可执行文件和参数</strong>。</p><p>例如，以下命令会在容器启动时运行 <code>/bin/echo</code> 命令并输出 <code>Hello World</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/bin/echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;]</span></span></code></pre></div><ol start="2"><li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> (<code>as default parameters to ENTRYPOINT</code>)</li></ol><p><strong>在容器启动时运行 <code>ENTRYPOINT</code> 指令指定的可执行文件，并将 <code>CMD</code> 指令的参数作为参数传递给 <code>ENTRYPOINT</code> 指令指定的可执行文件</strong>。</p><p>例如，以下命令会在容器启动时运行 <code>/bin/echo</code> 命令并输出 <code>Hello World</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/bin/echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="3"><li><code>CMD command param1 param2</code> (<code>shell</code> 形式)</li></ol><p><strong>在容器启动时运行指定的命令</strong>。</p><p>例如，以下命令会在容器启动时运行 <code>/bin/echo</code> 命令并输出 <code>Hello World</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World</span></span></code></pre></div><p>如果在运行 <code>Docker</code> 容器时使用了自定义命令，则 <code>CMD</code> 中指定的默认命令会被覆盖。</p><p>例如，如果 <code>Dockerfile</code> 中定义了如下 <code>CMD</code> 指令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/bin/echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;]</span></span></code></pre></div><p>当运行容器时，使用了自定义命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myimage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><p>则容器启动时会运行 <code>/bin/bash</code> 命令，而不是 <code>CMD</code> 指令中定义的 <code>/bin/echo</code> 命令。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>每个 <code>Dockerfile</code> 只能有一个 <code>CMD</code> 指令。如果有多个，只有最后一个指令会被执行。</p><p>同理，使用 <code>docker run</code> 命令时，如果指定了多个命令，则只有最后一个命令会被执行，其他命令都会被忽略。</p></div><p>譬如，以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myimage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo Hello&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;World&quot;</span></span></code></pre></div><p>只会执行最后一个命令 <code>/bin/echo &quot;World&quot;</code>，而前面的 <code>/bin/bash -c &quot;echo Hello&quot;</code> 命令会被忽略。</p><h3 id="arg" tabindex="-1">ARG <a class="header-anchor" href="#arg" aria-label="Permalink to &quot;ARG&quot;">​</a></h3><p><code>ARG</code> 指令用于<strong>设置构建镜像时传递给 <code>Dockerfile</code> 的参数</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ARG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span></span></code></pre></div><p><code>ARG</code> 指令的参数是一个变量名，可以在 <code>Dockerfile</code> 中使用 <code>$&lt;name&gt;</code> 的形式来引用这个变量。</p><p><code>ARG</code> 指令的参数还可以指定一个默认值，如果在构建镜像时没有指定该参数的值，则会使用默认值。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ARG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VERSION=latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VERSION</span></span></code></pre></div><h2 id="开发环境构建" tabindex="-1">开发环境构建 <a class="header-anchor" href="#开发环境构建" aria-label="Permalink to &quot;开发环境构建&quot;">​</a></h2><p>以一个 <code>Vue</code> 单页面应用在开发环境下的构建为例。</p><p>首先安装 <code>vue-cli</code>，然后执行 <code>vue create</code> 命令创建一个 <code>Vue</code> 单页面应用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vue/cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-demo</span></span></code></pre></div><p>在项目根目录下，创建一个对应为开发环境的 <code>Dockerfile</code> 文件，譬如名为 <code>Dockerfile.dev</code>：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基础镜像选择node 如果选择alpine等操作系统的话 需要手动RUN指令安装node</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FROM node:16</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指令容器上的工作目录 docker会自动创建</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORKDIR /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝本地所有代码 这样的话 即使不使用volume挂载启动，也能正常启动项目</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COPY . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用Yarn替代NPM node:16镜像上好像已经全局安装了yarn 如果没有的话 需要执行RUN npm install -g yarn安装yarn</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RUN yarn install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vue-cli项目默认的端口是8080 此处就暴露该端口</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EXPOSE 8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 容器启动后默认执行的命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CMD [&quot;yarn&quot;, &quot;start&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建镜像</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker image build -f Dockerfile.env -t vue-dev .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 普通启动</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker run -p 8084:8080 -d --name vue-server vue-dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 挂载启动 因为涉及到挂载 启动相对会耗时一些</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker run -p 8085:8080 -d --name vue-hot-server -v $PWD:/app vue-dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 该形式会实现vue项目在开发环境下的热重载，注意是热重载，而不是热更新。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 热重载：修改代码后，浏览器会自动刷新，但是会丢失当前页面的状态。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 热更新：修改代码后，浏览器不会刷新，但是会保留当前页面的状态。</span></span></code></pre></div><h3 id="构建镜像" tabindex="-1">构建镜像 <a class="header-anchor" href="#构建镜像" aria-label="Permalink to &quot;构建镜像&quot;">​</a></h3><p>使用 <code>Dockerfile.dev</code> 文件构建一个名为 <code>vue-dev</code> 的镜像：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile.dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="启动容器" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器" aria-label="Permalink to &quot;启动容器&quot;">​</a></h3><p>利用 <code>vue-dev</code> 镜像启动一个名为 <code>vue-server</code> 且后台运行的容器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8084:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-dev</span></span></code></pre></div><p>然后就可以在 <code>http://localhost:8084</code> 访问到 <code>Vue</code> 单页面应用了。</p><p>如果想要更改本地代码，即时反应到容器中的话，可以使用 <code>volume</code> 即 <code>-v</code> 挂载的方式启动容器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8085:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-hot-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PWD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-dev</span></span></code></pre></div><p>然后就可以在 <code>http://localhost:8085</code> 访问到 <code>Vue</code> 单页面应用了。</p><p>我们将本地的 <code>vue-demo</code> 目录挂载到容器的 <code>/app</code> 目录下，当更改 <code>vue-demo</code> 下的代码，容器内的 <code>/app</code> 目录下的代码也会同步修改。</p><p>这样就可以实现 <code>vue</code> 项目在开发环境下的热重载，<strong>注意是热重载，而不是热更新</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>后者 <code>volume</code> 挂载启动，由于涉及到数据卷的创建，启动相对会耗时一些。</p><p>实际测试时，更改本地代码后，容器内的代码也同步修改了。</p><p>但需要手动刷新浏览器，页面内容才发生变化。因此，这种开发环境实现的容器，笔者认为意义并不是很大。</p></div><h2 id="生产环境构建" tabindex="-1">生产环境构建 <a class="header-anchor" href="#生产环境构建" aria-label="Permalink to &quot;生产环境构建&quot;">​</a></h2><p>在上文中，我们实现了开发环境下的容器化，接下来我们来实现生产环境下的容器化。</p><p>开发环境下的镜像，不单单有 <code>node</code> 镜像，甚至将 <code>node_modules</code> 也打包进了镜像中，这样的镜像体积会很大。</p><table tabindex="0"><thead><tr><th>REPOSITORY</th><th>TAG</th><th>IMAGE ID</th><th>CREATED</th><th>SIZE</th></tr></thead><tbody><tr><td>vue-dev</td><td>latest</td><td>f7102f91333d</td><td>24 hours ago</td><td>1.29GB</td></tr></tbody></table><p>而在生产环境下，我们其实只需要 <code>dist</code> 包，并将其进行 <code>nginx</code> 托管即可。</p><p>因此，我们首先需要使用 <code>node</code> 镜像将项目打包成 <code>dist</code>，然后再使用 <code>nginx</code> 镜像将 <code>dist</code> 进行托管。</p><p>这就涉及到了一个概念：<strong>多阶段构建</strong>。</p><h3 id="多阶段构建" tabindex="-1">多阶段构建 <a class="header-anchor" href="#多阶段构建" aria-label="Permalink to &quot;多阶段构建&quot;">​</a></h3><p>多阶段的含义，就是在一个 <code>Dockerfile</code> 文件中，可以定义多个 <code>FROM</code> 指令，每个 <code>FROM</code> 指令都会产生一个阶段，而每个阶段都可以使用不同的基础镜像。</p><p>同样，以上一节中的 <code>vue-demo</code> 项目为例，我们在项目根目录下创建一个名为 <code>Dockerfile.prod</code> 的文件：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以node为基础镜像 并定义该阶段的别名为web</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FROM node:16 as web</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义容器上的工作目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORKDIR /app</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝本地所有代码至容器的工作目录/app</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COPY . .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖，并执行打包命令，结束后会在容器的/app目录下生成dist目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RUN yarn install &amp;&amp; yarn build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取nginx镜像</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FROM nginx:1.21.1-alpine</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将web阶段打包生成的/app/dist目录拷贝至nginx容器下的/usr/share/nginx/html目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COPY --from=web /app/dist /usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将自定义的nginx配置文件拷贝至nginx容器下的/etc/nginx/conf.d目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COPY --from=web /app/nginx/ /etc/nginx/conf.d/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露80默认端口 以及自定义的9527端口（需要设置对应端口的nginx配置文件）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EXPOSE 80 9527</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 容器启动时，默认启动nginx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span></span></code></pre></div><p>额外说明一下，<code>/app/nginx</code> 配置文件，其实是放置在 <code>vue-demo</code> 根目录下的 <code>nginx</code> 目录。</p><p>因为我们在 <code>web</code> 阶段使用 <code>COPY . .</code> 将 <code>vue-demo</code> 下的所有文件都拷贝到了容器的 <code>/app</code> 目录下。</p><p>此处，对应端口 <code>9527</code>，可以在 <code>vue-demo</code> 下的 <code>nginx</code> 目录新建一个 <code>vue-port-9527.conf</code>：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      9527</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [::]:9527;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #access_log  /var/log/nginx/host.access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  /usr/share/nginx/html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 处理单页面应用的history路由</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #error_page  404              /404.html;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # redirect server error pages to the static page /50x.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    error_page </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  500</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 502</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 503</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 504</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  /50x.html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /50x.html </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  /usr/share/nginx/html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="构建镜像-1" tabindex="-1">构建镜像 <a class="header-anchor" href="#构建镜像-1" aria-label="Permalink to &quot;构建镜像&quot;">​</a></h3><p>使用 <code>Dockerfile.prod</code> 构建名为 <code>vue-prod</code> 的镜像：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile.prod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-prod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>然后我们对比一下，<code>vue-dev</code> 镜像和 <code>vue-prod</code> 镜像的体积：</p><table tabindex="0"><thead><tr><th>REPOSITORY</th><th>TAG</th><th>IMAGE ID</th><th>CREATED</th><th>SIZE</th></tr></thead><tbody><tr><td>vue-dev</td><td>latest</td><td>f7102f91333d</td><td>24 hours ago</td><td>1.29GB</td></tr><tr><td>vue-prod</td><td>latest</td><td>7ccd7d0e5200</td><td>21 hours ago</td><td>23.6MB</td></tr></tbody></table><h3 id="启动容器-1" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-1" aria-label="Permalink to &quot;启动容器&quot;">​</a></h3><p>利用 <code>vue-prod</code> 镜像创建一个名为 <code>vue-prod</code> 的容器，并将容器的 <code>9527</code> 端口映射到本地的 <code>9527</code> 端口：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9527:9527</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-prod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-prod</span></span></code></pre></div>`,166)]))}const F=i(l,[["render",p]]);export{r as __pageData,F as default};
