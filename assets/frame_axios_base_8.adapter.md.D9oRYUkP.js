import{_ as i,o as a,c as n,aP as e}from"./chunks/framework.DeCM12M7.js";const c=JSON.parse('{"title":"8.adapter","description":"","frontmatter":{"title":"8.adapter"},"headers":[],"relativePath":"frame/axios/base/8.adapter.md","filePath":"frame/axios/base/8.adapter.md","lastUpdated":1736513424000}'),t={name:"frame/axios/base/8.adapter.md"};function p(l,s,h,k,r,d){return a(),n("div",null,s[0]||(s[0]=[e(`<p><code>adapater</code> 即为<strong>适配器</strong>。</p><p>该部分实际上是<code>axios</code> 中实现 <code>http</code>通信的核心模块。</p><h2 id="_8-1-内置适配器" tabindex="-1">8-1.内置适配器 <a class="header-anchor" href="#_8-1-内置适配器" aria-label="Permalink to &quot;8-1.内置适配器&quot;">​</a></h2><p><code>axios</code> 自带适配器，只有两种：</p><ol><li><code>xhr</code> 浏览器端。</li><li><code>http</code> 服务端。</li></ol><p><strong><code>axios</code> 会根据实际环境，自动调用内置的对应适配器。</strong></p><p>当然，也可以手动设置（<strong>意义不大</strong>）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ①浏览器端设置xhr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  adapter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xhr&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ②服务端设置http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  adapter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ③也可以以数组形式传递，让axios判断环境进而加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  adapter: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xhr&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config)</span></span></code></pre></div><h2 id="_8-2-自定义适配器" tabindex="-1">8-2.自定义适配器 <a class="header-anchor" href="#_8-2-自定义适配器" aria-label="Permalink to &quot;8-2.自定义适配器&quot;">​</a></h2><p><code>axios</code> 的内置适配器中：</p><ul><li><code>xhr</code> 适配器实现了 <code>XMLHttpRequest</code> 基础通信。</li><li><code>http</code> 适配器实现了 <code>Http</code> 模块通信。</li></ul><p>当实际开发中，我们想要将某一通信方式 <code>taro.request</code>、<code>wx.request</code>、<code>JSONP</code>等等封装成 <code>promise</code> 化的形式，想要用 <code>axios</code> 的方式来使用这些通信手段，此时我们就需要封装自定义适配器。</p><p>封装自定义 <code>adapter</code> 有以下条件：</p><ol><li>必须是一个函数。</li><li>函数形参是 <code>config</code>。（<code>axios</code> 在调用 <code>adapter</code> 时，会将实际 <code>request config</code> 传入。）</li><li>函数返回值是 <code>Promise</code> 实例。</li></ol><p><a href="https://github.com/axios/axios/blob/v1.x/lib/adapters/README.md" target="_blank" rel="noreferrer">基本格式</a>如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// settle函数是对于resolve和reject做出处理的具体函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./core/settle&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> adapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // At this point:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  - config has been merged with defaults</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  - request interceptors have already run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  - request transformers have already run</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Send a request, do something...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data: responseData,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      status: request.status,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      statusText: request.statusText,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      headers: responseHeaders,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      config: config,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      request: request</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    settle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve, reject, response)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // From here:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  - response transformers will run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  - response interceptors will run</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,16)]))}const E=i(t,[["render",p]]);export{c as __pageData,E as default};
