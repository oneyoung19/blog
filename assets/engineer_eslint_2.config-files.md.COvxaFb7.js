import{_ as e,o as n,c as a,aP as i}from"./chunks/framework.D1yHhm2y.js";const g=JSON.parse('{"title":"2.Config Files","description":"","frontmatter":{"title":"2.Config Files"},"headers":[],"relativePath":"engineer/eslint/2.config-files.md","filePath":"engineer/eslint/2.config-files.md","lastUpdated":1735987451000}'),c={name:"engineer/eslint/2.config-files.md"};function o(l,s,t,p,d,r){return n(),a("div",null,s[0]||(s[0]=[i(`<p><code>Eslint</code> 可以通过<strong>配置文件</strong>、<strong>代码注释</strong> <code>/* eslint */</code>以及 <code>package.json</code> 中的 <code>eslintConfig</code> 来设置。</p><h2 id="_2-1-类别" tabindex="-1">2-1.类别 <a class="header-anchor" href="#_2-1-类别" aria-label="Permalink to &quot;2-1.类别&quot;">​</a></h2><p>配置文件的命名通常是 <code>.eslintrc</code>，根据文件类别，可以分为以下几种(<strong>同一目录下，优先级从高到低</strong>)：</p><ul><li><code>JavaScript</code> - <code>.eslintrc.js</code> 笔者推荐项，易于扩展。</li><li><code>JavaScript (ESM) </code></li><li><code>YAML</code> - <code>.eslintrc.yaml</code> 或者 <code>.eslintrc.yml</code></li><li><code>JSON</code> - <code>.eslintrc.json</code></li><li><code>package.json</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>譬如：如果在同一目录下，同时存在 <code>.eslintrc.*</code> 和 <code>package.json</code> 文件，</p><p>则 <code>.eslintrc.*</code> 的优先级更高，<code>package.json</code> 文件中的 <code>eslintConfig</code> 配置不会被采用。</p></div><h2 id="_2-2-执行逻辑" tabindex="-1">2-2.执行逻辑 <a class="header-anchor" href="#_2-2-执行逻辑" aria-label="Permalink to &quot;2-2.执行逻辑&quot;">​</a></h2><p>从 <code>lint</code> 的目标文件所在目录开始，依次向上每个目录寻找 <code>.eslintrc.*</code> 文件，直到某 <code>.eslintrc.*</code> 文件声明了 <code>root: true</code> 属性、或项目根目录 <code>/</code> 为止。</p><p>如果上述两项都没有找到对应配置文件，则会在用户根目录 <code>~/</code> 判定是否有全局配置。</p><p>=&gt; <a href="https://eslint.org/docs/latest/user-guide/configuring/configuration-files#cascading-and-hierarchy" target="_blank" rel="noreferrer">Cascading and Hierarchy</a></p><p>当使用 <code>.eslintrc.*</code> 或者 <code>package.json</code> 配置时，不同目录下的配置文件有级联优先级。</p><p>假设有如下的结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>your-project</span></span>
<span class="line"><span>├── .eslintrc.json</span></span>
<span class="line"><span>├── lib</span></span>
<span class="line"><span>│ └── source.js</span></span>
<span class="line"><span>└─┬ tests</span></span>
<span class="line"><span>  ├── .eslintrc.json</span></span>
<span class="line"><span>  └── test.js</span></span></code></pre></div><p>首先，以被 <code>lint</code> 的目标文件所在目录为起始，<strong>该层目录下的 <code>.eslintrc.*</code> 文件的优先级最高</strong>。</p><p>然后 <code>Eslint</code> 会随着目录层级依次向上递归搜索配置文件，并<strong>合并配置选项</strong>，直到某一目录下的 <code>.eslintrc</code> 文件设置了 <code>root: true</code>、或者项目根目录 <code>/</code>、或者用户根目录 <code>~/</code>。</p><p>类似的，如果项目根目录下有一个配置了 <code>eslintConfig</code> 属性的 <code>package.json</code> 文件，则该根目录配置会对所有子目录都生效。</p><p>如果根目录配置与在 <code>tests/</code> 下的 <code>.eslintrc.*</code> 文件配置出现了冲突，则后者的配置属性优先级更高，会覆盖前者的配置属性。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>your-project</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── lib</span></span>
<span class="line"><span>│ └── source.js</span></span>
<span class="line"><span>└─┬ tests</span></span>
<span class="line"><span>  ├── .eslintrc.json</span></span>
<span class="line"><span>  └── test.js</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>正如上文所说，<code>Eslint</code> 默认会搜索所有层级目录中的配置文件，这其实是为了方便每一个目录能够定制化的设置一些 <code>lint</code> 配置。</p><p>但在某些情况（项目系统比较庞大）下，这种特点会越来越不可控。</p><p>因此，<code>Eslint</code> 提供了 <code>root: true</code> 这个配置，来方便用户更加精细的控制配置级联层级和权重。</p></div><p>例如，在 <code>lib/</code> 下的 <code>.eslintrc.js</code> 配置了 <code>root: true</code>，那么当将 <code>lib/main.js</code> 文件作为 <code>lint</code> 的目标时，<code>projectA/.eslintrc.js</code> 并不会生效。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>home</span></span>
<span class="line"><span>└── user</span></span>
<span class="line"><span>    └── projectA</span></span>
<span class="line"><span>        ├── .eslintrc.js  &lt;- Not used</span></span>
<span class="line"><span>        └── lib</span></span>
<span class="line"><span>            ├── .eslintrc.js  &lt;- { root: true }</span></span>
<span class="line"><span>            └── main.js</span></span></code></pre></div><p>总结：</p><p><code>Eslint</code> 的级联配置，从高到底的优先级，如下：</p><ol><li>代码注释</li><li><code>/*eslint-disable*/ /*eslint-enable*/</code></li><li><code>/*global*/</code></li><li><code>/*eslint*/</code></li><li><code>/*eslint-env*/</code></li><li>命令行选项</li><li><code>--global</code></li><li><code>--rule</code></li><li><code>--env</code></li><li><code>-c, --config</code></li><li>项目级配置</li><li>与 <code>lint</code> 目标文件同一级目录下的 <code>.eslintrc.*</code> 或 <code>package.json</code> 文件。</li><li>由 <code>lint</code> 目标文件所在目录为起始，向上递增查找 <code>.eslintrc.*</code> 或 <code>package.json</code> 文件，直到文件根目录 <code>/</code>、 或查找到文件带有 <code>root: true</code> 配置。</li><li>如果不满足 <code>1</code> 和 <code>3</code> 这两种情况，则会到 <code>~/.eslintrc</code> 中寻找自定义配置。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>另外，要注意的是，用户级目录 <code>~/</code> 已经不被推荐了。</p><p>=&gt; <a href="https://eslint.org/docs/latest/user-guide/configuring/configuration-files#personal-configuration-files-deprecated" target="_blank" rel="noreferrer">Personal Configuration Files (deprecated)</a></p></div><h2 id="_2-3-使用方式" tabindex="-1">2-3.使用方式 <a class="header-anchor" href="#_2-3-使用方式" aria-label="Permalink to &quot;2-3.使用方式&quot;">​</a></h2><ol><li>当文件被 <code>lint</code> 时，<code>Eslint</code> 会根据上述的规则和优先级，自动找寻并使用相关配置文件。</li><li>使用 <code>-c</code> 指令，手动指定配置文件。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在使用 <code>-c</code> 指令时，依然会受到上级目录中的 <code>.eslintrc.*</code> 文件的影响。如果想要避免这种影响，可以使用 <code>--no-eslintrc</code>。</p><p>譬如 <code>eslint -c libs/.eslintrc.json main.js --no-eslintrc</code>。</p></div><h2 id="_2-4-可定义属性" tabindex="-1">2-4.可定义属性 <a class="header-anchor" href="#_2-4-可定义属性" aria-label="Permalink to &quot;2-4.可定义属性&quot;">​</a></h2><p>配置文件中除了上面的 <code>root: true</code> 外还有许多可定义属性，以 <code>.eslintrc.js</code> 为例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  root: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  globals: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  parserOptions: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  configs: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  overrides: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,30)]))}const k=e(c,[["render",o]]);export{g as __pageData,k as default};
