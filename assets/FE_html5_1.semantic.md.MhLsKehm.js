import{_ as e}from"./chunks/cat.CU6wQPt4.js";import{_ as s,o as a,c as t,aP as l}from"./chunks/framework.DeCM12M7.js";const E=JSON.parse('{"title":"1.语义化","description":"","frontmatter":{"title":"1.语义化"},"headers":[],"relativePath":"FE/html5/1.semantic.md","filePath":"FE/html5/1.semantic.md","lastUpdated":1736513205000}'),p={name:"FE/html5/1.semantic.md"};function n(d,i,o,h,r,c){return a(),t("div",null,i[0]||(i[0]=[l(`<h2 id="html5中的区块和段落元素" tabindex="-1">HTML5中的区块和段落元素 <a class="header-anchor" href="#html5中的区块和段落元素" aria-label="Permalink to &quot;HTML5中的区块和段落元素&quot;">​</a></h2><ul><li><p><code>&lt;section&gt;</code>元素表示包含在HTML文档中的独立部分。一般来说会包含一个标题。</p></li><li><p><code>&lt;article&gt;</code>元素表示文档。可能包含一个或多个<code>&lt;section&gt;</code></p></li><li><p><code>&lt;nav&gt;</code>元素可用来表示导航栏。</p></li><li><p><code>&lt;header&gt;</code>元素即表示头部。</p></li><li><p><code>&lt;footer&gt;</code>元素表示底部。</p></li><li><p><code>&lt;aside&gt;</code>元素表示侧边栏。</p></li><li><p><code>&lt;hgroup&gt;</code>元素表示标题组。它通常可将多个h1至h6的子元素组装到一起。</p></li></ul><h2 id="使用html5的音频和视频" tabindex="-1">使用HTML5的音频和视频 <a class="header-anchor" href="#使用html5的音频和视频" aria-label="Permalink to &quot;使用HTML5的音频和视频&quot;">​</a></h2><p><code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素嵌入和允许操作新的多媒体内容。关于<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>的介绍可见<strong>多媒体</strong>。</p><h2 id="表单的改进" tabindex="-1">表单的改进 <a class="header-anchor" href="#表单的改进" aria-label="Permalink to &quot;表单的改进&quot;">​</a></h2><h3 id="_1-input-元素拥有了更多的type值" tabindex="-1">1.<code>&lt;input&gt;</code>元素拥有了更多的<code>type</code>值 <a class="header-anchor" href="#_1-input-元素拥有了更多的type值" aria-label="Permalink to &quot;1.\`&lt;input&gt;\`元素拥有了更多的\`type\`值&quot;">​</a></h3><ul><li><p><code>search</code>搜索框。换行符会自动从输入中移除。</p></li><li><p><code>tel</code>电话号码输入框。换行符会自动从输入中移除。</p></li><li><p><code>url</code>地址输入框。换行符与首尾的空格将会被自动去除。</p></li><li><p><code>email</code>邮件输入框。换行符会被自动去除。</p></li><li><p><code>datetime</code></p><input type="datetime"></li><li><p><code>date</code></p><input type="date"></li><li><p><code>month</code></p><input type="month"></li><li><p><code>week</code></p><input type="week"></li><li><p><code>time</code></p><input type="time"></li><li><p><code>number</code></p><input type="number"></li><li><p><code>range</code></p><input type="range"></li><li><p><code>color</code></p><input type="color"></li></ul><h3 id="_2-元素新增特性" tabindex="-1">2.元素新增特性 <a class="header-anchor" href="#_2-元素新增特性" aria-label="Permalink to &quot;2.元素新增特性&quot;">​</a></h3><ul><li><code>placeholder</code> 提示用户此域内能够输入什么内容。</li><li><code>autofocus</code> 自动获取焦点，一个文档内只有一个表单能够拥有 <code>autofocus</code> 特性。</li><li><code>required</code> 必须提供该元素的值。</li><li><code>min</code> 最小值。</li><li><code>max</code> 最大值。</li><li><code>maxlength</code> 输入字符的最大长度。</li></ul><h3 id="_3-新增了formdata对象" tabindex="-1">3.新增了<code>FormData</code>对象 <a class="header-anchor" href="#_3-新增了formdata对象" aria-label="Permalink to &quot;3.新增了\`FormData\`对象&quot;">​</a></h3><p><code>form</code> 表单的 <code>post</code> 方式默认的 <code>enctype</code> 是以 <code>application/x-www-urlencoded</code> 这种方式提交。当上传 <code>file</code> 文件时，则需要将 <code>enctype</code> 改为 <code>multipart/form-data</code>。</p><p>随着业务的发展，<code>HTMLFormElement</code> 元素的本身上传行为，不再能满足需要。我们希望原生的 <code>javascript</code> 也能通过 <code>ajax</code> 发送 <code>file</code> 对象。于是便有了 <code>FormData</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 成功通信</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xhr.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 成功响应</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xhr.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xhr.response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的fileData是表单里的&lt;input type=&quot;file&quot;&gt;获取到的file对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fileData)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formData)</span></span></code></pre></div><p>更加具体的例子可见<a href="https://jsfiddle.net/jsgoshu/b8741mno/11/" target="_blank" rel="noreferrer">jsfiddle</a>。虽然该例的<code>ajax</code>会有跨域的限制，但核心代码已经完备。</p><h2 id="新的语义元素" tabindex="-1">新的语义元素 <a class="header-anchor" href="#新的语义元素" aria-label="Permalink to &quot;新的语义元素&quot;">​</a></h2><ul><li><p><code>&lt;mark&gt;</code> 会有黄色标记。</p><p><mark>这是一个mark标签</mark></p></li><li><p><code>&lt;figure&gt;</code>与<code>&lt;figcaption&gt;</code> 表示更加细节的解释。即使删除，不影响读者对文章的整体理解。</p><figure><img style="width:200px;height:150px;" src="`+e+'"><figcaption>这是我的测试图片</figcaption></figure><p>二者通常结合使用。看下这篇文章来<a href="https://juejin.im/post/5cc5ad456fb9a032233532df" target="_blank" rel="noreferrer">深入了解</a>。</p></li><li><p><code>&lt;data&gt;</code> 将一个指定内容和机器可读的翻译联系在一起。但是，如果内容是与时间或者日期相关的，则一定要使用 <code>&lt;time&gt;</code>。</p><ul><li><data value="apple">apple</data></li><li><data value="123">chrome</data></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>按理说，鼠标移动到上面的文字上方，应该有标记。但是这里竟然不显示。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/data" target="_blank" rel="noreferrer">MDN</a></p></div></li><li><p><code>&lt;time&gt;</code> 以机器可读的格式用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。标准不成熟，不推荐使用，<code>&lt;span&gt;</code>它不香么？</p><p>I am borned at <time datetime="1994-10-19 13:00">1994-10-19</time></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/output" target="_blank" rel="noreferrer"><code>&lt;output&gt;</code></a></p></li><li><p><code>&lt;progress&gt;</code></p><p><progress value="70" max="100">70 %</progress></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meter" target="_blank" rel="noreferrer"><code>&lt;meter&gt;</code></a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main" target="_blank" rel="noreferrer"><code>&lt;main&gt;</code></a></p></li></ul><h2 id="iframe-的改进" tabindex="-1"><code>&lt;iframe&gt;</code>的改进 <a class="header-anchor" href="#iframe-的改进" aria-label="Permalink to &quot;`&lt;iframe&gt;`的改进&quot;">​</a></h2><p>关于<code>iframe</code>的改进，无非是更加细节的控制<code>iframe</code>，这里先不赘述。这里想简单介绍下<code>iframe</code>。</p><p><code>iframe</code>元素可以在页面中嵌套另一个网址的页面。如嵌套一个豆瓣的页面：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;375&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;667&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://m.douban.com/home_guide&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><iframe id="iframe" width="375" height="667" src="https://m.douban.com/home_guide"></iframe><p>如果想要操作<code>iframe</code>的内嵌页面的<code>DOM</code>的话，可以使用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#iframe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).contentWindow.document</span></span></code></pre></div><p><code>HTMLIframeElement</code>的<code>contentWindow</code>会指向内嵌页面的全局<code>window</code>属性。但是要注意的是利用该方法访问内嵌页面会受到跨域限制。会产生这样错误：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/007S8ZIlly1ggevb7y6erj31d4026t9l.jpg" alt="错误" loading="lazy"></p><p>我之前使用<code>iframe</code>的一个场景是：后端将<code>pdf</code>以流的形式传输给我，我接收到后，将其转化为<code>blobUrl</code>。然后使用<code>iframe</code>内嵌这个<code>blobUrl</code>，从而实现在当前页面直接预览<code>pdf</code>。</p>',26)]))}const m=s(p,[["render",n]]);export{E as __pageData,m as default};
