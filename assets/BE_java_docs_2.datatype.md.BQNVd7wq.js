import{_ as i,c as a,o as t,b0 as n}from"./chunks/framework.CEggy_nf.js";const E=JSON.parse('{"title":"2.数据类型","description":"","frontmatter":{"title":"2.数据类型"},"headers":[],"relativePath":"BE/java/docs/2.datatype.md","filePath":"BE/java/docs/2.datatype.md","lastUpdated":1744257956000}'),l={name:"BE/java/docs/2.datatype.md"};function h(e,s,d,k,p,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="一、数据类型概述" tabindex="-1">一、数据类型概述 <a class="header-anchor" href="#一、数据类型概述" aria-label="Permalink to &quot;一、数据类型概述&quot;">​</a></h2><p>在 <code>Java</code> 中，数据类型分为两大类：</p><ol><li><strong>基本数据类型（Primitive Types）</strong></li><li><strong>引用数据类型（Reference Types）</strong></li></ol><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Java数据类型] --&gt; B[基本数据类型]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; C[引用数据类型]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; D[数值型]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; E[字符型]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; F[布尔型]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; G[整数类型]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; H[浮点类型]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G --&gt; I[byte,short,int,long]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    H --&gt; J[float,double]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; K[类]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; L[接口]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; M[数组]</span></span></code></pre></div><h2 id="二、基本数据类型" tabindex="-1">二、基本数据类型 <a class="header-anchor" href="#二、基本数据类型" aria-label="Permalink to &quot;二、基本数据类型&quot;">​</a></h2><h3 id="_1-整数类型" tabindex="-1">1. 整数类型 <a class="header-anchor" href="#_1-整数类型" aria-label="Permalink to &quot;1. 整数类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8位</td><td>-128 ~ 127</td><td>0</td><td><code>byte b = 100;</code></td></tr><tr><td><code>short</code></td><td>16位</td><td>-32768 ~ 32767</td><td>0</td><td><code>short s = 1000;</code></td></tr><tr><td><code>int</code></td><td>32位</td><td>-2^31 ~ 2^31-1</td><td>0</td><td><code>int i = 100000;</code></td></tr><tr><td><code>long</code></td><td>64位</td><td>-2^63 ~ 2^63-1</td><td>0L</td><td><code>long l = 10000000000L;</code></td></tr></tbody></table><h3 id="_2-浮点类型" tabindex="-1">2. 浮点类型 <a class="header-anchor" href="#_2-浮点类型" aria-label="Permalink to &quot;2. 浮点类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>float</code></td><td>32位</td><td>约 ±3.4E+38</td><td>0.0f</td><td><code>float f = 3.14f;</code></td></tr><tr><td><code>double</code></td><td>64位</td><td>约 ±1.7E+308</td><td>0.0d</td><td><code>double d = 3.1415926;</code></td></tr></tbody></table><h3 id="_3-字符类型" tabindex="-1">3. 字符类型 <a class="header-anchor" href="#_3-字符类型" aria-label="Permalink to &quot;3. 字符类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>char</code></td><td>16位</td><td>0 ~ 65535</td><td>&#39;\\u0000&#39;</td><td><code>char c = &#39;A&#39;;</code></td></tr></tbody></table><h3 id="_4-布尔类型" tabindex="-1">4. 布尔类型 <a class="header-anchor" href="#_4-布尔类型" aria-label="Permalink to &quot;4. 布尔类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>boolean</code></td><td>1位</td><td>true/false</td><td>false</td><td><code>boolean flag = true;</code></td></tr></tbody></table><h2 id="三、引用数据类型" tabindex="-1">三、引用数据类型 <a class="header-anchor" href="#三、引用数据类型" aria-label="Permalink to &quot;三、引用数据类型&quot;">​</a></h2><h3 id="_1-类-class" tabindex="-1">1. 类（Class） <a class="header-anchor" href="#_1-类-class" aria-label="Permalink to &quot;1. 类（Class）&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：自定义类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getter和setter方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-字符串-string" tabindex="-1">2. 字符串（String） <a class="header-anchor" href="#_2-字符串-string" aria-label="Permalink to &quot;2. 字符串（String）&quot;">​</a></h3><p><code>String</code> 是 Java 中最常用的引用类型之一，用于表示文本字符串。虽然它看起来像基本类型，但实际上是一个类。</p><h4 id="_2-1-string-的特点" tabindex="-1">2.1 String 的特点 <a class="header-anchor" href="#_2-1-string-的特点" aria-label="Permalink to &quot;2.1 String 的特点&quot;">​</a></h4><ol><li><p><strong>不可变性</strong></p><ul><li><code>String</code> 对象一旦创建就不能被修改</li><li>所有看似修改字符串的操作都会创建新的 <code>String</code> 对象</li></ul></li><li><p><strong>字符串池（String Pool）</strong></p><ul><li>Java 使用字符串池来优化字符串存储</li><li>相同的字符串字面量会共享同一个对象</li></ul></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：String 创建方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用字符串字面量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用构造函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字符串拼接</span></span></code></pre></div><h4 id="_2-2-string-常用方法" tabindex="-1">2.2 String 常用方法 <a class="header-anchor" href="#_2-2-string-常用方法" aria-label="Permalink to &quot;2.2 String 常用方法&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：String 常用方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取子字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String sub </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找字符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;o&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字符串比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> equals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ignoreCase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equalsIgnoreCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字符串转换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String upper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;HELLO WORLD&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String lower </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;hello world&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 去除空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String trim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;  Hello  &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello&quot;</span></span></code></pre></div><h4 id="_2-3-stringbuilder-和-stringbuffer" tabindex="-1">2.3 StringBuilder 和 StringBuffer <a class="header-anchor" href="#_2-3-stringbuilder-和-stringbuffer" aria-label="Permalink to &quot;2.3 StringBuilder 和 StringBuffer&quot;">​</a></h4><p>由于 <code>String</code> 的不可变性，频繁的字符串操作会产生大量临时对象。这时可以使用 <code>StringBuilder</code> 或 <code>StringBuffer</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：StringBuilder 使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StringBuilder sb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello World&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// StringBuffer 使用方式相同，但线程安全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StringBuffer sbf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sbf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sbf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sbf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String result2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sbf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello World&quot;</span></span></code></pre></div><h4 id="_2-4-string-与-char-的转换" tabindex="-1">2.4 String 与 char[] 的转换 <a class="header-anchor" href="#_2-4-string-与-char-的转换" aria-label="Permalink to &quot;2.4 String 与 char[] 的转换&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// String 转 char[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] chars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// char[] 转 String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] chars2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;H&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;l&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;l&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;o&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chars2);</span></span></code></pre></div><h3 id="_3-接口-interface" tabindex="-1">3. 接口（Interface） <a class="header-anchor" href="#_3-接口-interface" aria-label="Permalink to &quot;3. 接口（Interface）&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：接口定义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-数组-array" tabindex="-1">4. 数组（Array） <a class="header-anchor" href="#_4-数组-array" aria-label="Permalink to &quot;4. 数组（Array）&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：数组声明和初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明长度为5的整型数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明并初始化字符串数组</span></span></code></pre></div><h2 id="四、类型转换" tabindex="-1">四、类型转换 <a class="header-anchor" href="#四、类型转换" aria-label="Permalink to &quot;四、类型转换&quot;">​</a></h2><h3 id="_1-自动类型转换-隐式转换" tabindex="-1">1. 自动类型转换（隐式转换） <a class="header-anchor" href="#_1-自动类型转换-隐式转换" aria-label="Permalink to &quot;1. 自动类型转换（隐式转换）&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：自动类型转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动将int转换为long</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动将long转换为float</span></span></code></pre></div><h3 id="_2-强制类型转换-显式转换" tabindex="-1">2. 强制类型转换（显式转换） <a class="header-anchor" href="#_2-强制类型转换-显式转换" aria-label="Permalink to &quot;2. 强制类型转换（显式转换）&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：强制类型转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)d;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 强制将double转换为int，结果为3</span></span></code></pre></div><h3 id="_3-类型转换规则" tabindex="-1">3. 类型转换规则 <a class="header-anchor" href="#_3-类型转换规则" aria-label="Permalink to &quot;3. 类型转换规则&quot;">​</a></h3><ol><li><p>小类型转大类型：自动转换</p><ul><li><code>byte</code> → <code>short</code> → <code>int</code> → <code>long</code> → <code>float</code> → <code>double</code></li><li><code>char</code> → <code>int</code> → <code>long</code> → <code>float</code> → <code>double</code></li></ul></li><li><p>大类型转小类型：需要强制转换</p><ul><li>可能造成精度损失</li><li>可能造成数据溢出</li></ul></li></ol><h2 id="五、包装类-wrapper-classes" tabindex="-1">五、包装类（Wrapper Classes） <a class="header-anchor" href="#五、包装类-wrapper-classes" aria-label="Permalink to &quot;五、包装类（Wrapper Classes）&quot;">​</a></h2><table tabindex="0"><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td><code>byte</code></td><td><code>Byte</code></td></tr><tr><td><code>short</code></td><td><code>Short</code></td></tr><tr><td><code>int</code></td><td><code>Integer</code></td></tr><tr><td><code>long</code></td><td><code>Long</code></td></tr><tr><td><code>float</code></td><td><code>Float</code></td></tr><tr><td><code>double</code></td><td><code>Double</code></td></tr><tr><td><code>char</code></td><td><code>Character</code></td></tr><tr><td><code>boolean</code></td><td><code>Boolean</code></td></tr></tbody></table><h3 id="自动装箱和拆箱" tabindex="-1">自动装箱和拆箱 <a class="header-anchor" href="#自动装箱和拆箱" aria-label="Permalink to &quot;自动装箱和拆箱&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动装箱: Java自动将基本数据类型 int 的值 100 转换为对应的包装类 Integer 对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动拆箱: Java自动将 Integer 对象 i 转换为基本数据类型 int。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p><strong>自动装箱</strong>：像把一件商品（基本类型）自动放进盒子（包装类对象）里。</p></li><li><p><strong>自动拆箱</strong>：自动拆箱：像从盒子里直接取出商品，丢掉盒子。</p></li></ul></div><h2 id="六、特殊值" tabindex="-1">六、特殊值 <a class="header-anchor" href="#六、特殊值" aria-label="Permalink to &quot;六、特殊值&quot;">​</a></h2><h3 id="_1-空值-null" tabindex="-1">1. 空值（null） <a class="header-anchor" href="#_1-空值-null" aria-label="Permalink to &quot;1. 空值（null）&quot;">​</a></h3><ul><li>只能赋值给引用类型</li><li>不能赋值给基本类型</li></ul><h3 id="_2-默认值" tabindex="-1">2. 默认值 <a class="header-anchor" href="#_2-默认值" aria-label="Permalink to &quot;2. 默认值&quot;">​</a></h3><ul><li>基本类型：0或false</li><li>引用类型：null</li></ul><h2 id="七、关键字" tabindex="-1">七、关键字 <a class="header-anchor" href="#七、关键字" aria-label="Permalink to &quot;七、关键字&quot;">​</a></h2><p><code>Java</code> 关键字是 <code>Java</code> 语言中具有特殊含义的保留字，不能用作标识符（如变量名、类名等）。</p><p><code>Java</code> 关键字可以分为以下几类：</p><h3 id="_1-访问控制关键字" tabindex="-1">1. 访问控制关键字 <a class="header-anchor" href="#_1-访问控制关键字" aria-label="Permalink to &quot;1. 访问控制关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>public</code></td><td>公共访问权限，所有类都可以访问</td></tr><tr><td><code>protected</code></td><td>受保护的访问权限，同一包内或子类可以访问</td></tr><tr><td><code>private</code></td><td>私有访问权限，只有本类可以访问</td></tr><tr><td><code>default</code></td><td>默认访问权限，同一包内可以访问</td></tr></tbody></table><h3 id="_2-类、方法和变量修饰符" tabindex="-1">2. 类、方法和变量修饰符 <a class="header-anchor" href="#_2-类、方法和变量修饰符" aria-label="Permalink to &quot;2. 类、方法和变量修饰符&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>class</code></td><td>声明类</td></tr><tr><td><code>interface</code></td><td>声明接口</td></tr><tr><td><code>enum</code></td><td>声明枚举类型</td></tr><tr><td><code>abstract</code></td><td>声明抽象类或方法</td></tr><tr><td><code>final</code></td><td>声明不可继承的类、不可重写的方法或常量</td></tr><tr><td><code>static</code></td><td>声明静态成员</td></tr><tr><td><code>synchronized</code></td><td>声明同步方法或代码块</td></tr><tr><td><code>volatile</code></td><td>声明易变变量</td></tr><tr><td><code>transient</code></td><td>声明不需要序列化的字段</td></tr><tr><td><code>native</code></td><td>声明本地方法</td></tr></tbody></table><h3 id="_3-程序控制关键字" tabindex="-1">3. 程序控制关键字 <a class="header-anchor" href="#_3-程序控制关键字" aria-label="Permalink to &quot;3. 程序控制关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>if</code></td><td>条件语句</td></tr><tr><td><code>else</code></td><td>条件语句的否定分支</td></tr><tr><td><code>switch</code></td><td>多分支选择语句</td></tr><tr><td><code>case</code></td><td>switch语句的分支</td></tr><tr><td><code>default</code></td><td>switch语句的默认分支</td></tr><tr><td><code>while</code></td><td>循环语句</td></tr><tr><td><code>do</code></td><td>循环语句</td></tr><tr><td><code>for</code></td><td>循环语句</td></tr><tr><td><code>break</code></td><td>跳出循环或switch</td></tr><tr><td><code>continue</code></td><td>继续下一次循环</td></tr><tr><td><code>return</code></td><td>从方法返回</td></tr></tbody></table><h3 id="_4-异常处理关键字" tabindex="-1">4. 异常处理关键字 <a class="header-anchor" href="#_4-异常处理关键字" aria-label="Permalink to &quot;4. 异常处理关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>try</code></td><td>捕获异常</td></tr><tr><td><code>catch</code></td><td>处理异常</td></tr><tr><td><code>finally</code></td><td>无论是否发生异常都会执行的代码块</td></tr><tr><td><code>throw</code></td><td>抛出异常</td></tr><tr><td><code>throws</code></td><td>声明方法可能抛出的异常</td></tr></tbody></table><h3 id="_5-包相关关键字" tabindex="-1">5. 包相关关键字 <a class="header-anchor" href="#_5-包相关关键字" aria-label="Permalink to &quot;5. 包相关关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>package</code></td><td>声明包</td></tr><tr><td><code>import</code></td><td>导入包</td></tr></tbody></table><h3 id="_6-基本类型关键字" tabindex="-1">6. 基本类型关键字 <a class="header-anchor" href="#_6-基本类型关键字" aria-label="Permalink to &quot;6. 基本类型关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean</code></td><td>布尔类型</td></tr><tr><td><code>byte</code></td><td>字节类型</td></tr><tr><td><code>char</code></td><td>字符类型</td></tr><tr><td><code>double</code></td><td>双精度浮点类型</td></tr><tr><td><code>float</code></td><td>单精度浮点类型</td></tr><tr><td><code>int</code></td><td>整型</td></tr><tr><td><code>long</code></td><td>长整型</td></tr><tr><td><code>short</code></td><td>短整型</td></tr></tbody></table><h3 id="_7-变量引用关键字" tabindex="-1">7. 变量引用关键字 <a class="header-anchor" href="#_7-变量引用关键字" aria-label="Permalink to &quot;7. 变量引用关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>super</code></td><td>引用父类</td></tr><tr><td><code>this</code></td><td>引用当前对象</td></tr><tr><td><code>void</code></td><td>表示方法不返回值</td></tr><tr><td><code>null</code></td><td>空引用</td></tr></tbody></table><h3 id="_8-保留关键字" tabindex="-1">8. 保留关键字 <a class="header-anchor" href="#_8-保留关键字" aria-label="Permalink to &quot;8. 保留关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>const</code></td><td>保留关键字，未使用</td></tr><tr><td><code>goto</code></td><td>保留关键字，未使用</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">关键字使用注意事项</p><ol><li>关键字不能用作标识符（如变量名、类名等）</li><li>关键字都是小写的</li><li>关键字不能修改其含义</li><li>某些关键字（如 <code>const</code> 和 <code>goto</code>）虽然保留但未使用</li></ol></div><h2 id="八、注意事项" tabindex="-1">八、注意事项 <a class="header-anchor" href="#八、注意事项" aria-label="Permalink to &quot;八、注意事项&quot;">​</a></h2><ol><li><p>选择合适的数据类型</p><ul><li>考虑数据范围</li><li>考虑内存占用</li><li>考虑性能影响</li></ul></li><li><p>类型转换注意事项</p><ul><li>避免不必要的类型转换</li><li>注意精度损失</li><li>注意数据溢出</li></ul></li><li><p>包装类使用建议</p><ul><li>优先使用基本类型</li><li>需要对象特性时使用包装类</li><li>注意自动装箱拆箱的性能影响</li></ul></li></ol>`,71)]))}const c=i(l,[["render",h]]);export{E as __pageData,c as default};
