import{_ as o}from"./chunks/cat.CU6wQPt4.js";import{_ as n,c as r,o as l,b0 as s,j as e}from"./chunks/framework.CEggy_nf.js";const h={name:"home",data(){return{startOffsetX:0,startOffsetY:0}},mounted(){const a=document.querySelector("#sourceImg"),t=document.querySelector("#target");a.ondragstart=this.ondragstart,t.ondragenter=this.ondragenter,t.ondragover=this.ondragover,t.ondrop=this.ondrop},methods:{ondragstart(a){a.dataTransfer.setData("Text",a.target.id),this.startOffsetX=a.offsetX,this.startOffsetY=a.offsetY},ondragenter(a){console.log("ondragenter")},ondragover(a){a.preventDefault()},ondrop(a){const t=a.dataTransfer.getData("Text");if(!t)return;const d=document.getElementById("target"),c=document.getElementById(t).cloneNode(!0);c.style.position="absolute",c.style.left=a.offsetX-this.startOffsetX+"px",c.style.top=a.offsetY-this.startOffsetY+"px",d.appendChild(c)}}},F=JSON.parse('{"title":"2.连通性","description":"","frontmatter":{"title":"2.连通性"},"headers":[],"relativePath":"FE/html5/2.connectivity.md","filePath":"FE/html5/2.connectivity.md","lastUpdated":1746186030000}'),v={class:"home"},p={class:"source"},k={class:"source-item"},g={class:"img"},_={id:"sourceImg",src:o,alt:"",ref:"sourceImg"},E={id:"sourceText",draggable:"false",ref:"sourceText"},f={id:"target",class:"target",ref:"target"};function u(a,t,d,i,c,m){return l(),r("div",null,[t[0]||(t[0]=s(`<p data-v-c2786c43><code data-v-c2786c43>HTML5</code> 的连通性功能主要涉及与服务器或其他客户端之间的通信和交互，以及在网页上实现实时的、动态的操作。</p><p data-v-c2786c43><code data-v-c2786c43>HTML5</code> 提供了 <code data-v-c2786c43>Web Sockets</code>、<code data-v-c2786c43>Server-Sent Events</code>、<code data-v-c2786c43>Fetch API</code> 等技术，使得与服务器之间的通信更加高效和实时，支持双向通信和服务器推送。</p><h2 id="_2-1-drag" tabindex="-1" data-v-c2786c43>2-1.Drag <a class="header-anchor" href="#_2-1-drag" aria-label="Permalink to &quot;2-1.Drag&quot;" data-v-c2786c43>​</a></h2><p data-v-c2786c43>拖拽事件（<code data-v-c2786c43>Drag</code>）允许用户通过点击并拖动页面上的元素来实现交互操作。</p><h3 id="_2-1-1-拖拽元素" tabindex="-1" data-v-c2786c43>2-1-1.拖拽元素 <a class="header-anchor" href="#_2-1-1-拖拽元素" aria-label="Permalink to &quot;2-1-1.拖拽元素&quot;" data-v-c2786c43>​</a></h3><p data-v-c2786c43>拖拽元素分为两部分：拖拽源 <code data-v-c2786c43>origin</code> 和拖拽目标 <code data-v-c2786c43>target</code>。</p><p data-v-c2786c43>拖拽相关事件涉及到：</p><ul data-v-c2786c43><li data-v-c2786c43>拖拽源：<code data-v-c2786c43>dragstart</code>、<code data-v-c2786c43>drag</code>、<code data-v-c2786c43>dragend</code></li><li data-v-c2786c43>拖拽目标：<code data-v-c2786c43>dragenter</code>、<code data-v-c2786c43>dragover</code>、<code data-v-c2786c43>dragleave</code>、<code data-v-c2786c43>drop</code></li></ul><h3 id="_2-1-2-拖拽注意点" tabindex="-1" data-v-c2786c43>2-1-2.拖拽注意点 <a class="header-anchor" href="#_2-1-2-拖拽注意点" aria-label="Permalink to &quot;2-1-2.拖拽注意点&quot;" data-v-c2786c43>​</a></h3><ol data-v-c2786c43><li data-v-c2786c43><p data-v-c2786c43><code data-v-c2786c43>img</code> 图片元素默认是能够拖拽的，其他元素需要设置 <code data-v-c2786c43>DOM</code> 标签上的 <code data-v-c2786c43>draggable</code> 属性为 <code data-v-c2786c43>true</code>。</p></li><li data-v-c2786c43><p data-v-c2786c43>另外为了保证 <code data-v-c2786c43>drop</code> 事件的触发，需要在 <code data-v-c2786c43>dragover</code> 事件中调用 <code data-v-c2786c43>event.preventDefault()</code> 方法，已阻止默认事件。</p></li></ol><h3 id="_2-1-3-数据通信" tabindex="-1" data-v-c2786c43>2-1-3.数据通信 <a class="header-anchor" href="#_2-1-3-数据通信" aria-label="Permalink to &quot;2-1-3.数据通信&quot;" data-v-c2786c43>​</a></h3><p data-v-c2786c43>事件对象 <code data-v-c2786c43>event</code> 中的 <code data-v-c2786c43>dataTransfer</code> 属性用于在拖拽源和拖拽目标之间传递数据。</p><p data-v-c2786c43><code data-v-c2786c43>dataTransfer</code> 属性中的 <code data-v-c2786c43>setData</code> 方法用于设置数据，<code data-v-c2786c43>getData</code> 方法用于获取数据。</p><p data-v-c2786c43>另外，要注意的是，<code data-v-c2786c43>setData</code> 方法只能设置字符串类型的数据，如果需要传递对象，需要使用 <code data-v-c2786c43>JSON.stringify</code> 方法将对象转换为字符串。</p><p data-v-c2786c43>譬如：</p><div class="language-js vp-adaptive-theme" data-v-c2786c43><button title="Copy Code" class="copy" data-v-c2786c43></button><span class="lang" data-v-c2786c43>js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-c2786c43><code data-v-c2786c43><span class="line" data-v-c2786c43><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-c2786c43>// 拖拽源</span></span>
<span class="line" data-v-c2786c43><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>event.dataTransfer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-c2786c43>setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-c2786c43>&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-c2786c43>JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-c2786c43>stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-c2786c43>&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43> }))</span></span>
<span class="line" data-v-c2786c43></span>
<span class="line" data-v-c2786c43><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-c2786c43>// 拖拽目标</span></span>
<span class="line" data-v-c2786c43><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-c2786c43>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-c2786c43> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-c2786c43> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-c2786c43> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-c2786c43>parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>(event.dataTransfer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-c2786c43>getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-c2786c43>&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-c2786c43>))</span></span></code></pre></div><h3 id="_2-1-3-demo" tabindex="-1" data-v-c2786c43>2-1-3.Demo <a class="header-anchor" href="#_2-1-3-demo" aria-label="Permalink to &quot;2-1-3.Demo&quot;" data-v-c2786c43>​</a></h3>`,17)),e("template",null,[e("div",v,[e("div",p,[e("div",k,[e("div",g,[e("img",_,null,512),e("div",E,"我是一只猫，拖我到👉🏻",512)])])]),e("div",f,null,512)])]),t[1]||(t[1]=s('<h2 id="_2-2-websocket" tabindex="-1" data-v-c2786c43>2-2.WebSocket <a class="header-anchor" href="#_2-2-websocket" aria-label="Permalink to &quot;2-2.WebSocket&quot;" data-v-c2786c43>​</a></h2><h2 id="_2-3-server-sent-events" tabindex="-1" data-v-c2786c43>2-3.Server-Sent Events <a class="header-anchor" href="#_2-3-server-sent-events" aria-label="Permalink to &quot;2-3.Server-Sent Events&quot;" data-v-c2786c43>​</a></h2><h2 id="_2-4-eventstream" tabindex="-1" data-v-c2786c43>2-4.EventStream <a class="header-anchor" href="#_2-4-eventstream" aria-label="Permalink to &quot;2-4.EventStream&quot;" data-v-c2786c43>​</a></h2><p data-v-c2786c43><code data-v-c2786c43>ChatGPT</code></p>',4))])}const T=n(h,[["render",u],["__scopeId","data-v-c2786c43"]]);export{F as __pageData,T as default};
