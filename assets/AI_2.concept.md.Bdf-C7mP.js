import{_ as t,c as i,o as a,b0 as n}from"./chunks/framework.DpiX_U7m.js";const c=JSON.parse('{"title":"2.概念","description":"","frontmatter":{"title":"2.概念"},"headers":[],"relativePath":"AI/2.concept.md","filePath":"AI/2.concept.md","lastUpdated":1748348682000}'),e={name:"AI/2.concept.md"};function l(o,s,p,d,h,r){return a(),i("div",null,s[0]||(s[0]=[n(`<h1 id="_2-概念" tabindex="-1">2.概念 <a class="header-anchor" href="#_2-概念" aria-label="Permalink to &quot;2.概念&quot;">​</a></h1><h2 id="_1-llm" tabindex="-1">1. LLM <a class="header-anchor" href="#_1-llm" aria-label="Permalink to &quot;1. LLM&quot;">​</a></h2><p><code>LLM</code> 是 <code>Large Language Model</code>（<strong>大语言模型</strong>）的缩写。</p><p>它是指一种基于深度学习、训练于海量文本数据的人工智能模型，能够理解和生成自然语言，比如英文、中文等。譬如 <code>ChatGPT</code> 就是一个典型的 <code>LLM</code>。</p><ul><li><strong>大数据</strong>：训练用的数据量非常庞大（数千亿个单词）</li><li><strong>大参数量</strong>：模型中用于“记忆”的参数可能有<em>几十亿甚至上千亿</em>个</li><li><strong>大计算力</strong>：训练需要超大规模的计算资源（GPU集群）</li></ul><p><strong><code>LLM</code> 的关键能力如下</strong>：</p><table tabindex="0"><thead><tr><th>能力</th><th>示例</th></tr></thead><tbody><tr><td><strong>语言理解</strong></td><td>能读懂文章、代码、对话等内容</td></tr><tr><td><strong>语言生成</strong></td><td>能写作、回答问题、续写文本</td></tr><tr><td><strong>翻译</strong></td><td>能把一种语言翻译成另一种</td></tr><tr><td><strong>总结归纳</strong></td><td>能提炼长文本的要点</td></tr><tr><td><strong>逻辑推理</strong></td><td>能基于文本信息做出有逻辑的判断</td></tr><tr><td><strong>多轮对话</strong></td><td>能持续理解上下文进行交流</td></tr></tbody></table><p><strong>常见的 <code>LLM</code> 框架或产品</strong>：</p><table tabindex="0"><thead><tr><th>名称</th><th>开发者</th><th>备注</th></tr></thead><tbody><tr><td><strong>GPT 系列</strong></td><td><code>OpenAI</code></td><td><code>ChatGPT</code> 就是基于 <code>GPT-4</code></td></tr><tr><td><strong>Claude</strong></td><td><code>Anthropic</code></td><td>强调安全性和可控性</td></tr><tr><td><strong>Gemini（原 Bard）</strong></td><td><code>Google DeepMind</code></td><td>与 <code>Google</code> 搜索深度整合</td></tr><tr><td><strong>LLaMA</strong></td><td><code>Meta</code></td><td>开源的大语言模型</td></tr><tr><td><strong>文心一言</strong></td><td>百度</td><td>面向中文场景的国产 <code>LLM</code></td></tr><tr><td><strong>通义千问</strong></td><td>阿里</td><td>支持多种编程和中文场景</td></tr></tbody></table><h2 id="_2-function-calling" tabindex="-1">2. Function Calling <a class="header-anchor" href="#_2-function-calling" aria-label="Permalink to &quot;2. Function Calling&quot;">​</a></h2><p><a href="https://platform.openai.com/docs/guides/function-calling" target="_blank" rel="noreferrer">Function Calling</a> 是一种 <code>LLM</code> 的功能调用机制，允许 <code>LLM</code> 在对话过程中调用外部函数，以获取更详细的信息。</p><p>譬如这样的一个场景：</p><p><strong>用户输入</strong>：</p><blockquote><p>今天天气怎么样？</p></blockquote><p><strong>传统 <code>LLM</code>（如 <code>GPT-3</code>）可能会回答</strong>：</p><blockquote><p>对不起，我无法提供实时天气。</p></blockquote><p><strong>支持 <code>Function Calling</code> 的 <code>LLM</code> 会这样做</strong>：</p><ol><li><p>理解意图是“获取当前天气”</p></li><li><p>自动调用开发者提供的 <code>getWeather(location)</code> 函数</p></li><li><p>函数返回数据：<code>{ &quot;location&quot;: &quot;Beijing&quot;, &quot;temp&quot;: &quot;26°C&quot;, &quot;condition&quot;: &quot;Sunny&quot; }</code></p></li><li><p>然后再生成回答：</p></li></ol><blockquote><p>北京今天是晴天，气温大约 26°C</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> functions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getWeather&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;获取城市天气信息&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parameters: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      properties: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        location: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;城市名称，例如：Beijing&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;location&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="_3-mcp" tabindex="-1">3. MCP <a class="header-anchor" href="#_3-mcp" aria-label="Permalink to &quot;3. MCP&quot;">​</a></h2><p><a href="https://platform.openai.com/docs/guides/tools-remote-mcp" target="_blank" rel="noreferrer">MCP</a>（<code>Model Context Protocol</code>） 是 <code>OpenAI</code> 提出的一种新协议，旨在为语言模型（<code>LLM</code>）提供<strong>结构化、持久和可扩展的上下文输入机制</strong>。</p><p>传统的 <code>LLM</code> 输入上下文是「一段字符串」，<strong>是一次性输入输出</strong>，譬如：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>用户：帮我总结这段文章。</span></span>
<span class="line"><span>模型：好的，文章的重点是...</span></span></code></pre></div><p>而 <code>MCP</code> 提供的是更结构化的上下文，譬如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project_notes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;# 项目笔记</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">这是一个 Node.js 应用，使用了 Express、MongoDB...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_goal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请帮我写一篇轻松风格的博客，介绍这个项目的技术栈和亮点。&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>我们可以<strong>同时使用</strong> <code>Function Calling</code> 和 <code>MCP</code>：模型先用 <code>MCP</code> 理解所有上下文，然后决定要不要通过 <code>Function Calling</code> 去调用某个函数来处理任务。</p><h2 id="_4-ai-agent" tabindex="-1">4. AI Agent <a class="header-anchor" href="#_4-ai-agent" aria-label="Permalink to &quot;4. AI Agent&quot;">​</a></h2><p><code>AI agent</code>（人工智能代理）是指一种具备<strong>感知、思考、决策和行动能力</strong>的人工智能系统，它可以在一定的环境中<strong>自主地完成任务或达成目标</strong>。</p><p>有以下核心特点：</p><table tabindex="0"><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>感知</strong></td><td>能够通过传感器或 <code>API</code> 接收环境信息（例如：读取网页、文件、数据等）</td></tr><tr><td><strong>推理</strong></td><td>可以分析信息，规划任务，制定行动策略</td></tr><tr><td><strong>执行</strong></td><td>能通过调用工具、<code>API</code>、脚本或与外界交互来完成任务</td></tr><tr><td><strong>自主性</strong></td><td>可以在少量人类干预下自动运行，部分具备“自我纠错”能力</td></tr></tbody></table><p>它不仅能像 <code>ChatGPT</code> 一样对话，还能：</p><ul><li>自动查找资料</li><li>读写文件或数据库</li><li>控制浏览器点击按钮</li><li>写代码、调试、测试</li><li>自动执行多步任务（如写一篇博客并自动发布）</li></ul>`,33)]))}const g=t(e,[["render",l]]);export{c as __pageData,g as default};
