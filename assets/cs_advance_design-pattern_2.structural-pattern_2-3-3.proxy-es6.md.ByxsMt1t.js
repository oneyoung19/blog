import{_ as o,o as r,c as t,aP as c}from"./chunks/framework.DeCM12M7.js";const x=JSON.parse('{"title":"2-3-3.代理模式之Proxy","description":"","frontmatter":{"title":"2-3-3.代理模式之Proxy"},"headers":[],"relativePath":"cs/advance/design-pattern/2.structural-pattern/2-3-3.proxy-es6.md","filePath":"cs/advance/design-pattern/2.structural-pattern/2-3-3.proxy-es6.md","lastUpdated":1736930820000}'),p={name:"cs/advance/design-pattern/2.structural-pattern/2-3-3.proxy-es6.md"};function d(a,e,s,l,i,y){return r(),t("div",null,e[0]||(e[0]=[c('<p><strong>代理模式之Proxy</strong></p><ul><li><a href="https://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noreferrer">Proxy</a></li><li><a href="https://es6.ruanyifeng.com/#docs/reflect" target="_blank" rel="noreferrer">Reflect</a></li></ul><p><code>const proxy = new Proxy(target, handler)</code></p><p><code>target</code> 可以是任意的对象（包括数组、函数等）。</p><p><code>handler</code> 是一个可包含以下属性的对象：</p><ol><li><p><code>get(target, propKey, receiver)</code>：拦截对象属性的读取，比如 <code>proxy.foo</code> 和 <code>proxy[&#39;foo&#39;]</code>。<code>receiver</code> 参数就是 <code>Proxy</code> 实例</p></li><li><p><code>set(target, propKey, value, receiver)</code>：拦截对象属性的设置，比如 <code>proxy.foo = v</code> 或 <code>proxy[&#39;foo&#39;] = v</code>，返回一个布尔值。</p></li><li><p><code>has(target, propKey)</code>：拦截 <code>propKey in proxy</code> 的操作，返回一个布尔值。</p></li><li><p><code>deleteProperty(target, propKey)</code>：拦截 <code>delete proxy[propKey]</code> 的操作，返回一个布尔值。</p></li><li><p><code>ownKeys(target)</code>：拦截 <code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code> 循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 <code>Object.keys()</code> 的返回结果仅包括目标对象自身的可遍历属性。</p></li><li><p><code>getOwnPropertyDescriptor(target, propKey)</code>：拦截 <code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</p></li><li><p><code>defineProperty(target, propKey, propDesc)</code>：拦截 <code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</p></li><li><p><code>preventExtensions(target)</code>：拦截 <code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</p></li><li><p><code>getPrototypeOf(target)</code>：拦截 <code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</p></li><li><p><code>isExtensible(target)</code>：拦截 <code>Object.isExtensible(proxy)</code>，返回一个布尔值。</p></li><li><p><code>setPrototypeOf(target, proto)</code>：拦截 <code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</p></li><li><p><code>apply(target, object, args)</code>：拦截 <code>Proxy</code> 实例作为函数调用的操作，比如 <code>proxy(...args)</code>、<code>proxy.call(object, ...args)、proxy.apply(...)</code>。</p></li><li><p><code>construct(target, args)</code>：拦截 <code>Proxy</code> 实例作为构造函数调用的操作，比如 <code>new proxy(...args)</code>。</p></li></ol>',6)]))}const g=o(p,[["render",d]]);export{x as __pageData,g as default};
