import{_ as i,c as e,o as a,b0 as l}from"./chunks/framework.D8aj9ziZ.js";const r=JSON.parse('{"title":"3.shell进阶","description":"","frontmatter":{"title":"3.shell进阶"},"headers":[],"relativePath":"deploy/shell/3.advance.md","filePath":"deploy/shell/3.advance.md","lastUpdated":1750146487000}'),n={name:"deploy/shell/3.advance.md"};function t(p,s,h,d,c,k){return a(),e("div",null,s[0]||(s[0]=[l(`<h2 id="_3-1-比较运算" tabindex="-1">3-1.比较运算 <a class="header-anchor" href="#_3-1-比较运算" aria-label="Permalink to &quot;3-1.比较运算&quot;">​</a></h2><ul><li><p>算数运算符</p><ul><li><code>+</code> 加法</li><li><code>-</code> 减法</li><li><code>*</code> 乘法</li><li><code>/</code> 除法</li><li><code>%</code> 取余</li><li><code>=</code> 赋值</li><li><code>==</code> 相等。用于比较两个数字，相等则返回 <code>true</code>。</li><li><code>!=</code> 不相等。用于比较两个数字，不相同则返回 <code>true</code>。</li><li>注意：条件表达式要放在方括号之间，并且要有空格，例如: <code>[$a==$b]</code> 是错误的，必须写成 <code>[ $a == $b ]</code>。</li></ul></li><li><p>关系运算符</p><ul><li><code>-eq</code> 等于</li><li><code>-gt</code> 大于</li><li><code>-lt</code> 小于</li><li><code>-ge</code> 大于或等于</li><li><code>-le</code> 小于或等于</li><li><code>-ne</code> 不等于</li></ul></li><li><p>布尔运算符</p><ul><li><code>-o</code> 或运算。有一个表达式为 <code>true</code> 则返回 <code>true</code>。<code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 <code>true</code>。</li><li><code>-a</code> 且运算。两个表达式都为 <code>true</code> 才返回 <code>true</code>。<code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 <code>false</code>。</li><li><code>!</code> 非运算。表达式为 <code>true</code> 则返回 <code>false</code>，否则返回 <code>true</code>。<code>[ ! false ]</code> 返回 <code>true</code>。</li></ul></li><li><p>逻辑运算符</p><ul><li><code>&amp;&amp;</code> 逻辑的 <code>AND</code>。<code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code> 返回 <code>false</code>。</li><li><code>||</code> 逻辑的 <code>OR</code>。<code>[[ $a -lt 100 || $b -gt 100 ]]</code> 返回 <code>true</code>。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>逻辑运算符与布尔运算符，看上去一样。但是它俩有两点区别：</p><ul><li>使用逻辑运算符需要加上 <code>[[双大括号]]</code>，布尔运算符只需要 <code>[单大括号]</code>。</li><li>逻辑运算符具有特殊的<strong>短路</strong>功能，可以利用短路特性来实现使用 <code>cmd1</code> 的执行结果控制 <code>cmd2</code> 是否执行的效果。</li></ul></div></li><li><p>字符串运算符</p><ul><li><code>=</code> 检测两个字符串是否相等，相等返回 <code>true</code>。</li><li><code>!=</code> 检测两个字符串是否不相等，不相等返回 <code>true</code>。</li><li><code>-z</code> 检测字符串长度是否为 <code>0</code>，为 <code>0</code> 返回 <code>true</code>。</li><li><code>-n</code> 检测字符串长度是否不为 <code>0</code>，不为 <code>0</code> 返回 <code>true</code>。</li><li><code>$</code> 检测字符串是否为空，不为空返回 <code>true</code>。</li></ul></li><li><p>文件测试运算符</p><ul><li><code>-b file</code> 检测文件是否是块设备文件，如果是，则返回 <code>true</code>。</li><li><code>-c file</code> 检测文件是否是字符设备文件，如果是，则返回 <code>true</code>。</li><li><code>-d file</code> 检测文件是否是目录，如果是，则返回 <code>true</code>。</li><li><code>-f file</code> 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 <code>true</code>。</li><li><code>-r file</code> 检测文件是否可读，如果是，则返回 <code>true</code>。</li><li><code>-w file</code> 检测文件是否可写，如果是，则返回 <code>true</code>。</li><li><code>-x file</code> 检测文件是否可执行，如果是，则返回 <code>true</code>。</li><li><code>-s file</code> 检测文件是否为空（文件大小是否大于 <code>0</code> ），不为空返回 <code>true</code>。</li><li><code>-e file</code> 检测文件（包括目录）是否存在，如果是，则返回 <code>true</code>。</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>在 <code>shell</code> 中，每个语句执行完后，都会返回一个状态码，取值在 <code>[0 - 255]</code> 区间内。如果是 <code>0</code> 的话，表示语句执行结果是 <code>true</code>, 否则是 <code>false</code>。通常可用 <code>$?</code> 来访问该状态码。</li><li><code>test</code> 命令是 <code>shell</code> 环境中用于测试条件表达式的工具。结合上一条，我们就可以判断测试语句的结果：<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#因为2不小于2 所以结果是false。将会打印除0以外的数字：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $?</span></span></code></pre></div></li></ul></div><h2 id="_3-2-判断语句" tabindex="-1">3-2.判断语句 <a class="header-anchor" href="#_3-2-判断语句" aria-label="Permalink to &quot;3-2.判断语句&quot;">​</a></h2><p>下述判断语句中的中括号 <code>[]</code> 也可以使用 <code>test</code> 命令来代替。看个人习惯。</p><ul><li><p>if ... fi</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ expression ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #Statements to be executed if expression is true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><p>也可以写成：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ expression ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #Statements to be executed if expression is true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>expression</code> 与中括号 <code>[]</code> 之间需要有空格。</li><li><code>if</code> 与 <code>then</code> 写在同一行的话，需要用分号 <code>;</code> 来分隔。</li></ul></div></li><li><p>if ... else ... fi</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ expression ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #Statements to be executed if expression is true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #Statements to be executed if expression is not true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div></li><li><p>if ... elif ... fi</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ expression1 ] </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #Statements to be executed if expression1 is true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ expression2 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #Statements to be executed if expression2 is true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ expression3 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #Statements to be executed if expression3 is true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div></li></ul><h2 id="_3-3-循环语句" tabindex="-1">3-3.循环语句 <a class="header-anchor" href="#_3-3-循环语句" aria-label="Permalink to &quot;3-3.循环语句&quot;">​</a></h2><p>循环语句分为3种。分别为 <code>for</code>、<code>while</code> 及 <code>until</code>。</p><ul><li><p><code>for</code> 循环。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v1&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;v2&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;v3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#这里应该使用\${arr[*]} 读取到数组中的所有值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${arr[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${variable}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div></li><li><p><code>while</code> 循环</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#(()) 可用于数学计算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((\${num} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${num}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;num++&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>也可以写作：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#利用判断表达式 中括号或者test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ \${num} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-le</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${num}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;num++&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>对 <code>let</code> 命令有异议的话，可见<a href="https://www.runoob.com/linux/linux-comm-let.html" target="_blank" rel="noreferrer">链接</a>。</p></li><li><p><code>until</code> 循环</p><p><code>until</code> 循环执行一系列命令直至条件为 <code>true</code> 时停止。</p><p><code>until</code> 循环与 <code>while</code> 循环在处理方式上刚好相反。</p><p>一般 <code>while</code> 循环优于 <code>until</code> 循环，但在某些时候—也只是极少数情况下，<code>until</code> 循环更加有用。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#打印数字 知道该数字大于等于5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">until</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ \${num} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${num}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> num++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div></li></ul><h2 id="_3-4-函数" tabindex="-1">3-4.函数 <a class="header-anchor" href="#_3-4-函数" aria-label="Permalink to &quot;3-4.函数&quot;">​</a></h2><p><code>Shell</code> 中也有函数的概念。基本形式如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#function前缀可省略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;this is a shell function&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #获取函数传参</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> $1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #获取10位及10位以后的传参</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> \${10}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #返回值如果设定的话 只能在0-255之间 即使超过也会默认以0-255循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 125</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#注意调用的时候不用带小括号()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fun</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#利用$?可获取函数返回值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#如果要传参的话 如下：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span></code></pre></div><p>总结下：</p><ul><li>可以带 <code>function fun()</code> 定义，也可以直接 <code>fun()</code> 定义，不带任何参数。</li><li>参数返回，可以显示加 <code>return</code> 返回，如果不加，将以最后一条命令运行结果，作为返回值。 <code>return</code> 后跟数值 <code>n(0-255)</code>。</li><li>函数参数相关如下： <ul><li><code>\${n}</code> 用来获取第 <code>n</code> 位的参数。</li><li><code>$#</code> 用来获取参数的总个数。</li><li><code>$*</code> 用来获取所有的参数。</li><li><code>$?</code> 显示最后命令的退出状态。<code>0</code> 表示没有错误，其他任何值表明有错误。</li></ul></li></ul>`,14)]))}const g=i(n,[["render",t]]);export{r as __pageData,g as default};
