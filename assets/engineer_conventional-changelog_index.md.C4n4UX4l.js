import{_ as o,c as a,o as c,b0 as n}from"./chunks/framework.CEggy_nf.js";const h=JSON.parse('{"title":"Conventional Changelog","description":"","frontmatter":{"title":"Conventional Changelog"},"headers":[],"relativePath":"engineer/conventional-changelog/index.md","filePath":"engineer/conventional-changelog/index.md","lastUpdated":1744257956000}'),i={name:"engineer/conventional-changelog/index.md"};function s(t,e,l,d,p,r){return c(),a("div",null,e[0]||(e[0]=[n(`<p><code>conventional-changelog</code> 是一个根据 <code>Git</code> 记录自动生成 <code>changelog</code> 的工具。</p><p>笔者初次是在尤大写的<a href="https://www.npmjs.com/package/register-service-worker" target="_blank" rel="noreferrer">register-service-worker</a>库中接触到该工具。</p><p>本文以 <a href="https://www.npmjs.com/package/conventional-changelog-cli" target="_blank" rel="noreferrer">conventional-changelog-cli@^4.1.0</a> 版本为例。</p><h2 id="_1-使用步骤" tabindex="-1">1.使用步骤 <a class="header-anchor" href="#_1-使用步骤" aria-label="Permalink to &quot;1.使用步骤&quot;">​</a></h2><ol><li><p>安装 <code>conventional-changelog-cli@^4.1.0</code></p></li><li><p>定义 <code>scripts</code></p></li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;prepublishOnly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;conventional-changelog -p angular -i CHANGELOG.md -s&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>执行 <code>npm run prepublishOnly</code> 就会写入 <code>changelog</code> 日志</li></ol><h2 id="_2-参数详解" tabindex="-1">2.参数详解 <a class="header-anchor" href="#_2-参数详解" aria-label="Permalink to &quot;2.参数详解&quot;">​</a></h2><p><code>conventional-changelog -p angular -i CHANGELOG.md -s</code> 命令会读取 <code>package.json</code> 中的版本，<strong>根据 <code>angular</code> 规范</strong>，将截止到上一次 <code>tag</code> 的所有 <code>commit</code> 输入到指定文件中。</p><p>其中：</p><ul><li><p><code>-p</code> 代表 <code>preset</code>，即使用 <code>angular commit</code> 规范。</p></li><li><p><code>-i</code> 代表 <code>infile</code>，即从 <code>CHANGELOG.md</code> 文件中读取日志。</p></li><li><p><code>-s</code> 代表 <code>same-file</code>，即输出文件也是 <code>CHANGELOG.md</code>。</p></li></ul><p>假设项目的 <code>git</code> 操作树为 <code>tag1 =&gt; tag2 =&gt; tag3 =&gt; commits</code>，</p><p>执行 <code>prepublishOnly</code> 后，会读取 <code>package.json</code> 版本，根据 <code>angular</code> 规范将 <code>commits</code> 输出到指定文件中。</p><p>此外，还可以设置一个参数：</p><ul><li><code>-r</code> 代表 <code>release-count</code>，默认是 <code>1</code>，因此读取上例中的 <code>commits</code>；如果设置为 <code>2</code>，则会读取 <code>tag3</code> 和 <code>commits</code>；以此类推。</li></ul><p>如果 <code>-r</code> 设置为 <code>0</code>，则会读取所有日志，即本例中的 <code>tag1 tag2 tag3 commits</code>。</p>`,16)]))}const k=o(i,[["render",s]]);export{h as __pageData,k as default};
