import{_ as i,o as a,c as e,aP as n}from"./chunks/framework.D1yHhm2y.js";const k=JSON.parse('{"title":"容器","description":"","frontmatter":{"title":"容器"},"headers":[],"relativePath":"deploy/docker/container.md","filePath":"deploy/docker/container.md","lastUpdated":1736065137000}'),t={name:"deploy/docker/container.md"};function o(l,s,c,d,p,h){return a(),e("div",null,s[0]||(s[0]=[n(`<h2 id="容器指令" tabindex="-1">容器指令 <a class="header-anchor" href="#容器指令" aria-label="Permalink to &quot;容器指令&quot;">​</a></h2><h3 id="docker-container-run" tabindex="-1">docker container run <a class="header-anchor" href="#docker-container-run" aria-label="Permalink to &quot;docker container run&quot;">​</a></h3><p><code>docker container run</code> 是启动容器的命令，可以启动一个新的容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] IMAGE [COMMAND] [ARG...]</span></span></code></pre></div><p>其中，<code>OPTIONS</code> 有以下几种：</p><ul><li><code>--name</code>：指定容器名称；</li><li><code>-d</code>：后台运行容器，并返回容器 <code>ID</code>；</li><li><code>--ip</code>：指定容器的 <code>IP</code> 地址。</li><li><code>--ip6</code>：指定容器的 <code>IPv6</code> 地址。</li><li><code>-p</code>：指定端口映射，格式为：<code>主机(宿主)端口:容器端口</code>；</li><li><code>--add-host</code>：添加一个自定义的 <code>host</code> 到容器中。</li><li><code>-it</code>：以交互模式运行容器，通常与 <code>/bin/bash</code> 同时使用；</li><li><code>--rm</code>：容器退出后自动删除容器文件；</li><li><code>-e</code>：指定环境变量；</li><li><code>--link</code>：指定容器间的连接；</li><li><code>-v</code>：指定目录挂载，格式为：<code>主机(宿主)目录:容器目录</code>；</li><li><code>--privileged</code>：赋予容器最高权限。</li><li><code>--net</code>：指定容器的网络连接类型，支持的类型有：<code>bridge</code>、<code>host</code>、<code>none</code>、<code>container</code>、<code>network</code>。</li><li><code>--network-alias</code>：给容器指定网络别名。</li><li><code>--dns</code>：指定容器的 <code>DNS</code> 服务器。</li><li><code>--dns-search</code>：指定容器的 <code>DNS</code> 搜索域。</li><li><code>--dns-opt</code>：指定容器的 <code>DNS</code> 选项。</li><li><code>--mac-address</code>：指定容器的 <code>MAC</code> 地址。</li><li><code>--restart</code>：指定容器的重启策略，支持的策略有：<code>no</code>、<code>on-failure</code>、<code>always</code>、<code>unless-stopped</code>。</li><li><code>--security-opt</code>：指定容器的安全选项。</li><li><code>--ulimit</code>：指定容器的 <code>ulimit</code> 限制。</li></ul><p>以 <code>-it</code> 为例，启动一个名为 <code>container_name</code> 的容器，使用 <code>ubuntu</code> 镜像，以及使用 <code>bash</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><p>上述命令执行后，会进入容器的 <code>bash</code> 环境。</p><p>此时，<strong>如果通过 <code>EXIT</code> 命令退出容器，容器会停止运行</strong>。</p><p>如果想要退出容器，但不停止容器，可以使用 <code>CTRL + P + Q</code> 组合键。</p><h3 id="docker-container-create" tabindex="-1">docker container create <a class="header-anchor" href="#docker-container-create" aria-label="Permalink to &quot;docker container create&quot;">​</a></h3><p><code>docker container create</code> 可以创建一个新的容器，但不会启动该容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] IMAGE [COMMAND] [ARG...]</span></span></code></pre></div><p>譬如，创建一个名为 <code>container_name</code> 的容器，使用 <code>ubuntu</code> 镜像：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span></span></code></pre></div><p>如果要指定启动容器时要运行的命令，可以在 <code>docker container create</code> 命令中指定。</p><p>譬如，创建一个名为 <code>container_name</code> 的容器，使用 <code>ubuntu</code> 镜像，启动容器时运行 <code>ls</code> 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>1、<code>docker container create</code> 只是创建一个新的容器，但不会启动它，而 <code>docker container run</code> 会创建并启动一个新的容器。</p><p>2、<code>docker container create</code> 命令允许你在容器启动时指定要运行的命令，但不会立即运行，而 <code>docker container run</code> 命令则是在创建容器后立即运行指定的命令。</p><p>3、<code>docker container create</code> 命令创建容器后返回容器 <code>ID</code>，而 <code>docker container run</code> 命令则返回容器的输出结果。</p><p>因此，<code>docker container create</code> 适用于创建一个容器但不需要立即启动它的情况，而 <code>docker container run</code> 适用于需要立即创建并启动一个容器的情况。</p></div><h3 id="docker-container-attach" tabindex="-1">docker container attach <a class="header-anchor" href="#docker-container-attach" aria-label="Permalink to &quot;docker container attach&quot;">​</a></h3><p><code>docker container attach</code> 可以连接到<strong>正在运行</strong>的 <code>Docker</code> 容器，从而可以与容器进行交互。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attach</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span></code></pre></div><p>如果容器已经在运行并在前台运行进程，则使用 <code>docker attach</code> <strong>会将当前的终端与容器的进程绑定在一起</strong>。</p><p><strong>如果使用 <code>exit</code> 退出该进程，容器也将停止</strong>。</p><p>如果容器中运行的进程已经停止，则使用 <code>docker attach</code> 将无法连接到容器。</p><p>推荐使用 <code>docker exec</code> 命令在运行的容器中启动新的进程，而无需连接到容器。这是一个更安全的方法，因为它不会将您的终端与容器的进程绑定在一起。</p><h3 id="docker-container-exec" tabindex="-1">docker container exec <a class="header-anchor" href="#docker-container-exec" aria-label="Permalink to &quot;docker container exec&quot;">​</a></h3><p><code>docker container exec</code> 可以用来在<strong>正在运行</strong>的容器中执行命令。</p><p><strong>该容器必须处在启动中，即 <code>running</code>。</strong></p><p>通用命令为以下形式：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER COMMAND [ARG...]</span></span></code></pre></div><p>譬如，执行 <code>ls</code> 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p>进入容器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><p>退出容器的话，可以使用 <code>exit</code> 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>docker container run</code> 是启动容器。</p><p><code>docker container exec</code> 是执行容器命令。</p><p>这两种形式的执行会属于不同的进程，所以，如果使用 <code>docker container run</code> 启动容器，然后使用 <code>docker container exec</code> 执行命令，那么，这两个命令是不同的进程，所以，如果执行 <code>exit</code> 命令，那么，只会退出 <code>docker container exec</code> 这个进程，而不会退出 <code>docker container run</code> 这个进程。</p></div><h3 id="docker-container-start" tabindex="-1">docker container start <a class="header-anchor" href="#docker-container-start" aria-label="Permalink to &quot;docker container start&quot;">​</a></h3><p><code>docker container start</code> 是启动容器的命令，可以启动一个或多个容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动一个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动多个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name3</span></span></code></pre></div><h3 id="docker-container-stop" tabindex="-1">docker container stop <a class="header-anchor" href="#docker-container-stop" aria-label="Permalink to &quot;docker container stop&quot;">​</a></h3><p><code>docker container stop</code> 是停止容器的命令，可以停止一个或多个容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止一个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止多个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name3</span></span></code></pre></div><h3 id="docker-container-restart" tabindex="-1">docker container restart <a class="header-anchor" href="#docker-container-restart" aria-label="Permalink to &quot;docker container restart&quot;">​</a></h3><p><code>docker container restart</code> 是重启容器的命令，可以重启一个或多个容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启一个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启多个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name3</span></span></code></pre></div><h3 id="docker-container-pause" tabindex="-1">docker container pause <a class="header-anchor" href="#docker-container-pause" aria-label="Permalink to &quot;docker container pause&quot;">​</a></h3><p><code>docker container pause</code> 是暂停容器的命令。</p><p><strong>容器的所有进程将会被挂起，容器将会停止响应新的请求，但容器的状态、文件系统等都会被保留</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pause</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_name_or_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>要恢复一个被暂停的容器，可以使用 <code>docker container unpause</code> 命令。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>docker container pause</code> 命令会暂停容器中所有的进程，但不会停止容器本身。</p><p>这意味着容器的状态、文件系统等都会被保留，只是容器中的进程被暂停了。</p><p><strong>暂停容器通常用于减少容器对系统资源的占用，或者暂停容器以进行维护或调试</strong>。</p><p>而 <code>docker container stop</code> 命令会停止容器中的所有进程，并停止容器本身。</p><p>这将导致容器中的所有未保存的数据都将丢失，并且容器将不再占用系统资源。</p><p><strong>停止容器通常用于关闭已经完成工作的容器，或者在更新容器配置或镜像时重新启动容器</strong>。</p></div><h3 id="docker-container-unpause" tabindex="-1">docker container unpause <a class="header-anchor" href="#docker-container-unpause" aria-label="Permalink to &quot;docker container unpause&quot;">​</a></h3><p><code>docker container unpause</code> 是恢复暂停的容器的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unpause</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_name_or_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>该命令对应 <code>docker container pause</code>。</p><h3 id="docker-container-kill" tabindex="-1">docker container kill <a class="header-anchor" href="#docker-container-kill" aria-label="Permalink to &quot;docker container kill&quot;">​</a></h3><p><code>docker container kill</code> 是杀死容器的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre></div><p>其中，<code>OPTIONS</code> 可以包括以下选项：</p><ul><li><code>--signal</code>, <code>-s</code>: 指定要发送的信号。默认为 <code>SIGKILL</code>。</li></ul><p>使用 <code>docker container kill</code> 命令强制停止容器可能会导致数据丢失或损坏。</p><p>如果你需要正常停止容器并保存其中的数据，可以使用 <code>docker container stop</code> 命令来优雅地停止容器。</p><p><strong><code>docker container stop</code> 会向容器发送 <code>SIGTERM</code> 信号，允许容器在停止之前完成一些清理工作</strong>。</p><p>如果容器在一定时间内没有正常停止，<code>docker container stop</code> 命令会自动转而发送 <code>SIGKILL</code> 信号强制停止容器。</p><h3 id="docker-container-rm" tabindex="-1">docker container rm <a class="header-anchor" href="#docker-container-rm" aria-label="Permalink to &quot;docker container rm&quot;">​</a></h3><p><code>docker container rm</code> 是删除容器的命令，可以删除一个或多个容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除一个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除多个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name3</span></span></code></pre></div><h3 id="docker-container-prune" tabindex="-1">docker container prune <a class="header-anchor" href="#docker-container-prune" aria-label="Permalink to &quot;docker container prune&quot;">​</a></h3><p><code>docker container prune</code> 是<strong>删除所有停止的容器</strong>的命令。</p><p><code>prune</code> 英文翻译为 <code>修剪</code>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span></code></pre></div><p>默认情况下，在 <code>docker container prune</code> 之前，会有一个提示，提示是否删除所有停止的容器。</p><p>如果不想要提示，可以使用 <code>-f</code> 参数。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span></code></pre></div><h3 id="docker-container-ls" tabindex="-1">docker container ls <a class="header-anchor" href="#docker-container-ls" aria-label="Permalink to &quot;docker container ls&quot;">​</a></h3><p><code>docker container ls</code> 是列出容器的命令，默认列出运行中的容器，可以使用 <code>-a</code> 列出所有容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出运行中的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出所有容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><h3 id="docker-container-logs" tabindex="-1">docker container logs <a class="header-anchor" href="#docker-container-logs" aria-label="Permalink to &quot;docker container logs&quot;">​</a></h3><p><code>docker container logs</code> 是查看容器日志的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] container</span></span></code></pre></div><p>譬如，查看容器从 <code>1</code> 分钟前开始的日志：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --since</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span></code></pre></div><h3 id="docker-container-top" tabindex="-1">docker container top <a class="header-anchor" href="#docker-container-top" aria-label="Permalink to &quot;docker container top&quot;">​</a></h3><p><code>docker container top</code> 是查看容器中运行的进程的命令。</p><p><strong>该命令可以帮助了解容器内部的活动，以及哪些进程正在消耗容器的资源</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> top</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CONTAINER</span></span></code></pre></div><h3 id="docker-container-stats" tabindex="-1">docker container stats <a class="header-anchor" href="#docker-container-stats" aria-label="Permalink to &quot;docker container stats&quot;">​</a></h3><p><code>docker container stats</code> 是查看容器的统计信息的命令。</p><p><strong>该命令可以帮助了解容器使用的 <code>CPU</code>、内存、网络和磁盘资源等信息，以及容器的整体健康状态。</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] [CONTAINER...]</span></span></code></pre></div><h3 id="docker-container-inspect" tabindex="-1">docker container inspect <a class="header-anchor" href="#docker-container-inspect" aria-label="Permalink to &quot;docker container inspect&quot;">​</a></h3><p><code>docker container inspect</code> 是查看容器的详细信息的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ID...]</span></span></code></pre></div><h3 id="docker-container-port" tabindex="-1">docker container port <a class="header-anchor" href="#docker-container-port" aria-label="Permalink to &quot;docker container port&quot;">​</a></h3><p><code>docker container port</code> 是查看容器的端口映射的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]</span></span></code></pre></div><h3 id="docker-container-diff" tabindex="-1">docker container diff <a class="header-anchor" href="#docker-container-diff" aria-label="Permalink to &quot;docker container diff&quot;">​</a></h3><p><code>docker container diff</code> 命令用于比较容器文件系统中的更改。</p><p>它可以列出容器中添加、删除或修改的文件或目录。</p><p>具体来说，<code>docker container diff</code> 命令将列出在容器的根目录中添加、修改或删除的所有文件。</p><p>它将以以下格式输出文件或目录的变化：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/added/file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/modified/file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/deleted/file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/renamed/file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/new/file</span></span></code></pre></div><p>其中，<code>A</code> 表示添加、<code>M</code> 表示修改、<code>D</code> 表示删除、<code>C</code> 表示重命名。</p><p>例如，要查看名为 <code>mycontainer</code> 的容器与其基本映像之间的文件差异，可以使用以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><p>此命令将列出 <code>mycontainer</code> 容器中与基本映像不同的文件和目录。可以使用这些输出来了解容器的状态，并查找任何不期望的更改。</p><h3 id="docker-container-commit" tabindex="-1">docker container commit <a class="header-anchor" href="#docker-container-commit" aria-label="Permalink to &quot;docker container commit&quot;">​</a></h3><p><code>docker container commit</code> 用于将一个容器的当前状态保存为一个新的映像。</p><p>使用此命令可以在容器的基础上创建一个新的映像，并将容器的更改保存为该映像的一部分。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span></span></code></pre></div><p>其中，<code>OPTIONS</code> 指定可选的参数，<code>CONTAINER</code> 指定要提交的容器的 <code>ID</code> 或名称，<code>REPOSITORY</code> 指定新映像的名称，<code>TAG</code> 指定新映像的标签。</p><p>例如，要将名为 <code>mycontainer</code> 的容器保存为名为 <code>myimage</code> 的映像，可以使用以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myimage</span></span></code></pre></div><p>此命令将容器的当前状态保存为一个新的映像，并将其命名为 <code>myimage</code>。</p><p>可以使用 <code>docker image ls</code> 命令查看新的映像列表，以确认新的映像已经创建。</p><p><code>docker container commit</code> 命令可用于在容器中进行更改并将更改保存为新的映像。</p><p>但是，<strong>最好的做法是使用 <code>Dockerfile</code> 和 <code>docker build</code> 命令来构建映像，以便在代码库中记录映像的完整构建过程</strong>。</p><h3 id="docker-container-cp" tabindex="-1">docker container cp <a class="header-anchor" href="#docker-container-cp" aria-label="Permalink to &quot;docker container cp&quot;">​</a></h3><p><code>docker container cp</code> 是 <code>Docker</code> 命令行工具中的一个命令，用于将文件或目录从主机系统复制到运行中的 <code>Docker</code> 容器中，或者将文件或目录从运行中的 <code>Docker</code> 容器复制到主机系统中。</p><p>具体来说，<code>docker container cp</code> 命令的语法如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将文件从主机系统复制到容器中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] SRC_PATH CONTAINER:DEST_PATH</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将文件从容器中复制到主机系统中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER:SRC_PATH DEST_PATH</span></span></code></pre></div><p>譬如，我们需要将主机系统上的 <code>/home/user/config</code> 目录中的配置文件导入到 <code>mycontainer</code> 容器中的 <code>/app/config</code> 目录中，可以使用以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer:/app/config</span></span></code></pre></div><p>如果我们需要将容器中 <code>/app/data</code> 目录中的数据导出到主机系统上的 <code>/home/user/data</code> 目录中，可以使用以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer:/app/data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/data</span></span></code></pre></div><h3 id="docker-container-export" tabindex="-1">docker container export <a class="header-anchor" href="#docker-container-export" aria-label="Permalink to &quot;docker container export&quot;">​</a></h3><p><code>docker container export</code> 是将容器的文件系统导出为一个 <code>tar</code> 归档文件的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER_NAME </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CONTAINER_NAME.tar</span></span></code></pre></div><h3 id="docker-container-rename" tabindex="-1">docker container rename <a class="header-anchor" href="#docker-container-rename" aria-label="Permalink to &quot;docker container rename&quot;">​</a></h3><p><code>docker container rename</code> 是重命名容器的命令。</p><p><strong>该命令需要容器处于运行中。</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">old_container_name_or_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">new_container_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>该命令只能重命名正在运行的容器，而无法重命名已经停止的容器。</p><p>此外，重命名容器不会影响容器的 <code>ID</code> 和标签，只会影响容器的名称。</p><h3 id="docker-container-update" tabindex="-1">docker container update <a class="header-anchor" href="#docker-container-update" aria-label="Permalink to &quot;docker container update&quot;">​</a></h3><p><code>docker container update</code> 是更新容器的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre></div><p>其中，<code>OPTIONS</code> 有以下几种常用选项：</p><ul><li><code>--cpu-shares</code>: 设置容器的 <code>CPU</code> 权重，范围为 <code>2</code> 到 <code>262144</code>。</li><li><code>--memory</code>: 设置容器的内存限制。</li><li><code>--restart</code>: 设置容器的重启策略。</li></ul><h3 id="docker-container-wait" tabindex="-1">docker container wait <a class="header-anchor" href="#docker-container-wait" aria-label="Permalink to &quot;docker container wait&quot;">​</a></h3><p><code>docker container wait</code> 是等待容器停止的命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wait</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CONTAINER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [CONTAINER...]</span></span></code></pre></div><p>该命令会一直阻塞，直到容器停止运行。</p><p><strong>当容器停止时，该命令将返回容器退出的状态码</strong>。</p>`,147)]))}const F=i(t,[["render",o]]);export{k as __pageData,F as default};
