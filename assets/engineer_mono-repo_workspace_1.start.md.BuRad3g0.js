import{_ as o,c as s,o as c,b0 as n}from"./chunks/framework.CEggy_nf.js";const m=JSON.parse('{"title":"1.前言","description":"","frontmatter":{"title":"1.前言"},"headers":[],"relativePath":"engineer/mono-repo/workspace/1.start.md","filePath":"engineer/mono-repo/workspace/1.start.md","lastUpdated":1745141008000}'),d={name:"engineer/mono-repo/workspace/1.start.md"};function a(p,e,t,i,r,l){return c(),s("div",null,e[0]||(e[0]=[n(`<p><code>workspace</code> 是包管理工具对于 <code>monorepo</code> 的支持设计。</p><p>基础使用是在 <code>package.json</code> 中声明 <code>workspaces</code>（<code>pnpm</code> 是个例外，具体方式见后面章节）：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;packages/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>package.json</code> 中定义了 <code>workspaces</code> 后，利用包管理工具（<code>npm</code>、<code>yarn</code>、<code>pnpm</code>）初始化项目，会<strong>自动安装 <code>workspaces</code> 相关依赖</strong>。</p><p>上述 <code>workspaces</code> 安装机制，会在 <code>node_modules</code> 下生成 <code>workspaces</code> 对应包的软连接 <code>symlink</code>（即<strong>符号链接</strong>，在修改源码时会直接影响到依赖包）。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>用 <code>yarn link</code> 同样也能生成软连接。</p><p>假设有 <code>project-A</code> 和 <code>link-module</code>，那么首先在 <code>link-module</code> 下执行 <code>yarn link</code>。<strong>执行之后，会将 <code>link-module</code> 首先链接到全局 <code>node_modules</code> 下</strong>。</p><p>然后在 <code>project-A</code> 下执行 <code>yarn link link-module</code>，<strong>会在当前工程的 <code>node_modules</code> 下生成依赖包符号链接</strong>。</p><p>上述步骤完成后，就可以在 <code>project-A</code> 下引入 <code>link-module</code>。</p><p>需要取消软连接的话，可以使用 <code>yarn unlink</code>。</p></div>`,6)]))}const g=o(d,[["render",a]]);export{m as __pageData,g as default};
