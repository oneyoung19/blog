import{_ as a,c as n,o as i,b0 as e}from"./chunks/framework.DpiX_U7m.js";const k=JSON.parse('{"title":"Nest.js","description":"","frontmatter":{"title":"Nest.js"},"headers":[],"relativePath":"BE/node/nestjs/index.md","filePath":"BE/node/nestjs/index.md","lastUpdated":1748348682000}'),l={name:"BE/node/nestjs/index.md"};function p(t,s,h,r,o,d){return i(),n("div",null,s[0]||(s[0]=[e(`<p><a href="https://github.com/oneyoung19/learn-nestjs" target="_blank" rel="noreferrer">learn-nestjs</a></p><h2 id="_1-概述" tabindex="-1">1.概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1.概述&quot;">​</a></h2><p><code>Nest.js</code> 是一个强大、可扩展且渐进式的 <code>Node.js</code> 框架，用于构建高效且可扩展的服务器端应用程序。受 <code>Angular</code> 启发，<code>Nest.js</code> 利用 <code>TypeScript</code> 并结合了面向对象编程（<code>OOP</code>）、函数式编程（<code>FP</code>）和函数式响应式编程（<code>FRP</code>）的元素。</p><h2 id="_2-主要特性" tabindex="-1">2.主要特性 <a class="header-anchor" href="#_2-主要特性" aria-label="Permalink to &quot;2.主要特性&quot;">​</a></h2><ul><li>🚀 <strong>模块化架构</strong>：采用模块化设计，促进代码可重用性和可维护性</li><li>💻 <strong>TypeScript 支持</strong>：一流的 <code>TypeScript</code> 集成，具有强类型</li><li>🔧 <strong>依赖注入</strong>：强大的内置依赖注入容器</li><li>🧩 <strong>装饰器</strong>：广泛使用装饰器，实现清晰和声明式的代码</li><li>🔌 <strong>微服务</strong>：原生支持微服务架构</li><li>🧪 <strong>测试</strong>：全面的测试工具和支持</li></ul><h2 id="_3-核心概念" tabindex="-1">3.核心概念 <a class="header-anchor" href="#_3-核心概念" aria-label="Permalink to &quot;3.核心概念&quot;">​</a></h2><h3 id="_3-1-模块" tabindex="-1">3-1.模块 <a class="header-anchor" href="#_3-1-模块" aria-label="Permalink to &quot;3-1.模块&quot;">​</a></h3><p><code>Nest.js</code> 使用模块来组织应用程序组件。每个模块封装相关功能。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  controllers: [AppController],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [AppService],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><h3 id="_3-2-控制器" tabindex="-1">3-2.控制器 <a class="header-anchor" href="#_3-2-控制器" aria-label="Permalink to &quot;3-2.控制器&quot;">​</a></h3><p>处理传入的 <code>HTTP</code> 请求并定义 <code>API</code> 端点。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UsersController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;用户列表&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-3-提供者" tabindex="-1">3-3.提供者 <a class="header-anchor" href="#_3-3-提供者" aria-label="Permalink to &quot;3-3.提供者&quot;">​</a></h3><p>服务、仓库、工厂和其他可以作为依赖项注入的类。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UsersService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-生命周期" tabindex="-1">4.生命周期 <a class="header-anchor" href="#_4-生命周期" aria-label="Permalink to &quot;4.生命周期&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Incoming Request</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>[Middleware (Express)]</span></span>
<span class="line"><span>  （基于 Express 层，适合处理日志、请求体解析等通用逻辑）</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>[Nest Lifecycle]</span></span>
<span class="line"><span>  ├─&gt; Global Guards          ← 权限/认证控制（可依赖注入）</span></span>
<span class="line"><span>  ├─&gt; Route Guards</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>  ├─&gt; Global Pipes           ← 参数验证、转换</span></span>
<span class="line"><span>  ├─&gt; Route Pipes</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>  ├─&gt; Global Interceptors    ← 方法前：日志、缓存、格式包装等</span></span>
<span class="line"><span>  ├─&gt; Route Interceptors</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>  ├─&gt; Controller Handler     ← 执行业务处理逻辑（Service 等）</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>  ├─&gt; Route Interceptors     ← 方法后：结果包装、异常处理</span></span>
<span class="line"><span>  ├─&gt; Global Interceptors</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>[If any error occurs at any step above]</span></span>
<span class="line"><span>      ↓</span></span>
<span class="line"><span>Exception Filters (Route → Global) ← 捕获异常，统一格式响应</span></span></code></pre></div><h2 id="_5-生态系统" tabindex="-1">5.生态系统 <a class="header-anchor" href="#_5-生态系统" aria-label="Permalink to &quot;5.生态系统&quot;">​</a></h2><ul><li><code>ORM</code> 集成（<code>TypeORM</code>, <code>Mongoose</code>）</li><li><code>GraphQL</code> 支持</li><li><code>WebSockets</code></li><li>微服务模式</li><li>身份验证与授权</li><li>验证</li><li>缓存</li><li>任务调度</li></ul><h2 id="_6-了解更多" tabindex="-1">6.了解更多 <a class="header-anchor" href="#_6-了解更多" aria-label="Permalink to &quot;6.了解更多&quot;">​</a></h2><ul><li><a href="https://docs.nestjs.com" target="_blank" rel="noreferrer">官方文档</a></li><li><a href="https://github.com/nestjs/nest" target="_blank" rel="noreferrer">GitHub 仓库</a></li><li><a href="https://nestjs.com" target="_blank" rel="noreferrer">Nest.js 教程</a></li></ul>`,21)]))}const E=a(l,[["render",p]]);export{k as __pageData,E as default};
