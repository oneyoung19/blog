import{_ as i,c as a,o as n,b0 as p}from"./chunks/framework.CEggy_nf.js";const y=JSON.parse('{"title":"4.PBKDF2","description":"","frontmatter":{"title":"4.PBKDF2"},"headers":[],"relativePath":"frame/crypto-js/base/4.PBKDF2.md","filePath":"frame/crypto-js/base/4.PBKDF2.md","lastUpdated":1745141008000}'),h={name:"frame/crypto-js/base/4.PBKDF2.md"};function l(t,s,k,e,r,E){return n(),a("div",null,s[0]||(s[0]=[p(`<p><code>PBKDF2</code> （<code>Password-Based Key Derivation Function 2</code>）即<strong>基于密码的密钥派生函数</strong>。</p><p>该算法主要是基于指定的<strong>哈希函数</strong>，针对<strong>密码</strong>、结合给定<strong>盐值</strong>进行多次<strong>迭代</strong>，然后生成<strong>指定长度</strong>的哈希。</p><p><code>PBKDF2</code> 的主要目的是增加密码的强度和安全性。</p><p>通过增加盐值和迭代次数，它可以防止彩虹表攻击（一种攻击方式，攻击者事先计算并存储了常见密码的哈希值，以便快速破解密码）。</p><p><code>PBKDF2</code> 的迭代次数越多，计算成本越高，攻击者破解密码的难度也越大。</p><p><code>PBKDF2</code> 的步骤如下：</p><ol><li>接收密码和盐值作为输入。</li><li>将盐值与密码组合在一起。</li><li>使用所选的哈希算法（通常是 <code>SHA-1</code>、<code>SHA-256</code> 等）对组合后的数据进行第一次哈希计算。</li><li>将第一次哈希的结果与盐值和密码再次组合在一起。</li><li>再次使用哈希算法对新组合的数据进行哈希计算。</li><li>重复上述过程，进行多次迭代（由迭代次数参数控制），每次都将上一次的哈希结果与盐值和密码组合在一起进行哈希计算。</li><li>最终的哈希结果就是存储在数据库中的密码哈希值或生成的密钥。</li></ol><p><code>PBKDF2</code> 相关的变量有如下几种：</p><ol><li><code>password</code> 目标密码</li><li><code>hasher</code> 指定哈希</li><li><code>salt</code> 给定盐值</li><li><code>iterations</code> 迭代次数</li><li><code>keySize</code> 长度</li></ol><p>在 <code>crypto-js</code> 中的，默认的配置为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PBKDF2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password, salt, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keySize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hasher: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHA1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  iterations: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CryptoJS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;crypto-js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> salt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.lib.WordArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key128Bits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PBKDF2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret Passphrase&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, salt, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keySize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key256Bits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PBKDF2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret Passphrase&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, salt, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keySize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key512Bits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PBKDF2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret Passphrase&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, salt, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keySize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key512Bits1000Iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PBKDF2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret Passphrase&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, salt, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keySize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  iterations: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key512Bits1000IterationsAndSha256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PBKDF2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret Passphrase&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, salt, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hasher: CryptoJS.algo.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHA256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  keySize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  iterations: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>PBKDF2</code> 广泛用于存储用户密码的安全性，以及生成用于加密和认证的密钥，特别是在需要高度安全性的应用中，如身份验证和数据加密。</p><p>然而，需要注意的是，随着计算能力的增加，<code>PBKDF2</code> 可能不再足够安全，因此一些密码学应用现在更倾向于使用更强大的密码学方案，如 <code>bcrypt</code> 和 <code>Argon2</code>。</p></div>`,13)]))}const g=i(h,[["render",l]]);export{y as __pageData,g as default};
