import{_ as i,c as a,o as e,b0 as n}from"./chunks/framework.Ctc7-3V1.js";const r=JSON.parse('{"title":"CORS","description":"","frontmatter":{"title":"CORS"},"headers":[],"relativePath":"cs/http/cors.md","filePath":"cs/http/cors.md","lastUpdated":1748085908000}'),t={name:"cs/http/cors.md"};function l(p,s,h,o,d,k){return e(),a("div",null,s[0]||(s[0]=[n(`<p>该篇文章，之前本人发布在<a href="https://juejin.cn/post/6844904152011636749" target="_blank" rel="noreferrer">掘金</a>。</p><p>该文章首次于 <code>2020-05-09</code> 更新。</p><p>本站于 <code>2022-10-02</code> 对上述文章重新校正。</p><h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>我们都知道，由于浏览器的同源策略，所以在前后端分离的开发过程中，难免出现跨域的问题。</p><p>最常用的解决方法有：</p><ul><li><code>CORS</code></li><li><code>JSONP</code></li><li><code>webpack-dev-server</code></li><li><code>nginx</code></li><li><code>...等</code></li></ul><p>本文重点讨论下 <code>CORS</code>。</p><p>后端服务暂以原生 <code>node</code> 为例，另外编辑器使用 <code>vscode</code>，浏览器为 <code>chrome81</code>。</p><h2 id="_2-启动项目服务" tabindex="-1">2.启动项目服务 <a class="header-anchor" href="#_2-启动项目服务" aria-label="Permalink to &quot;2.启动项目服务&quot;">​</a></h2><p>先使用 <code>yarn init -y</code> 创建一个初始项目。然后安装 <code>axios</code> 以及 <code>node</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add axios</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add node</span></span></code></pre></div><h3 id="_2-1-前端" tabindex="-1">2-1.前端 <a class="header-anchor" href="#_2-1-前端" aria-label="Permalink to &quot;2-1.前端&quot;">​</a></h3><ul><li>创建一个 <code>http.js</code> 文件。这个文件会书写 <code>XMLHttpRequest</code> 以及 <code>axios</code> 来请求后端的接口。</li><li>创建 <code>index.html</code>。引入 <code>node_modules</code> 中的 <code>dist</code> 目录下的 <code>axios</code>。以及之前的 <code>http.js</code>。注意 <code>script</code> 标签的先后顺序。</li><li>利用 <code>vscode</code> 的 <code>live server</code> 启动前端 <code>html</code> 服务。<code>live server</code> 可以配置前端项目启动的 <code>ip</code> 以及端口。这里我设置成 <code>http://localhost:8082</code>。</li></ul><h3 id="_2-2-后端" tabindex="-1">2-2.后端 <a class="header-anchor" href="#_2-2-后端" aria-label="Permalink to &quot;2-2.后端&quot;">​</a></h3><p>下面是node的代码：</p><p>这里我们先直接设置 <code>Access-Control-Allow-Origin</code> 为 <code>*</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Server running at http://127.0.0.1:8081/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>可利用 <code>vscode</code> 的 <code>code run</code> 直接运行上面代码。这样，<code>node</code> 服务就会启动在 <code>http://127.0.0.1:8081</code>。</p><h2 id="_3-前端发起请求" tabindex="-1">3.前端发起请求 <a class="header-anchor" href="#_3-前端发起请求" aria-label="Permalink to &quot;3.前端发起请求&quot;">​</a></h2><p>这里我们把请求分成两类：</p><ol><li>一类是原生 <code>XMLHttpRequest</code> 以及 <code>$.ajax</code></li><li>另一类就是我们实际项目经常用的 <code>axios</code>。</li></ol><p>因为 <code>$.ajax</code> 实际上就是封装的 <code>XMLHttpRequest</code>，所以归为一种。另外之所以这样分，是为了下面更好的区别一些东西。具体原因请继续看。</p><p>以 <code>post</code> 请求为例，这里对请求地址加了标识，但是由于路由的原因，如果成功的话，都会返回 <code>hello world</code>。</p><h3 id="_3-1-xmlhttprequest" tabindex="-1">3-1.XMLHttpRequest <a class="header-anchor" href="#_3-1-xmlhttprequest" aria-label="Permalink to &quot;3-1.XMLHttpRequest&quot;">​</a></h3><p>由于请求路径是 <code>http://127.0.0.1:8081/api/xmlhttp</code>。本文以下的 <code>xmlhttp</code> 请求均代指此次请求。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onreadystatechange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 请求完成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //响应成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> httpResponseText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.responseText</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({httpResponseText})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 响应失败 打印下状态码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 请求未完成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.readyState)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://127.0.0.1:8081/api/xmlhttp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/x-www-urlencoded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="_3-2-axios" tabindex="-1">3-2.axios <a class="header-anchor" href="#_3-2-axios" aria-label="Permalink to &quot;3-2.axios&quot;">​</a></h3><p>同上，<code>axios1</code> 代表下面第一种请求，<code>axios2</code> 代表下面第二种请求。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://127.0.0.1:8081/api/axios1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({res})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://127.0.0.1:8081/api/axios2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;axios2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({res})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_4-发起请求" tabindex="-1">4.发起请求 <a class="header-anchor" href="#_4-发起请求" aria-label="Permalink to &quot;4.发起请求&quot;">​</a></h2><p>至此，我们一共发起了3种请求。而且我们的 <code>node</code> 服务器已经配置了 <code>Access-Control-Allow-Origin</code>。</p><p>这3种请求是不是都能成功？你是不是觉得都能成功？我们看下实际发送请求后的控制台。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/171f8287cf4cbe74~tplv-t2oaga2asx-image.image" alt="" loading="lazy"></p><p>可以看到。<code>axios2</code> 这个请求(就是用 <code>axios.post</code> 那个)失败了。失败原因的话，如下：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/171f82a2543c5e62~tplv-t2oaga2asx-image.image" alt="" loading="lazy"></p><p>我来翻译下🤣。<strong>本次请求已经CORS策略被阻止了。原因是因为请求头字段&#39;content-type&#39;没有被预检响应的&#39;Access-Control-Allow-Headers&#39;所允许。</strong></p><p>是不是觉得翻译拗口，我真的尽力了。😂</p><p>别担心，等下就知道出现的原因以及解决方式了。而且到现在才刚刚到本文想要尽力讲清楚的地方。</p><p>在接触 <code>CORS</code> 的具体策略之前，要明白的一件事是 <code>axios2</code> 请求与 <code>axios1</code>、<code>xmlhttp</code> 请求的不同之处。</p><ul><li><code>axios2</code> 的 <code>post</code> 请求，默认的 <code>content-type</code> 是 <code>application/json</code>。这是因为 <code>json</code> 在前后端分离的实际开发中，已经逐渐被大众接受。于是 <code>axios</code> 封装的 <code>post</code> 请求默认已经按照这种MIME类型。</li><li><code>axios</code> 的 <code>post</code> 请求，在有<strong>post请求参数</strong>的时候，才会将 <code>content-type</code> 设置为 <code>application/json</code>。如果没有参数，请求头默认是没有 <code>content-type</code>。这也是为什么 <code>axios1</code> 没有出错、请求成功的原因。</li><li><code>XMLHttpRequest</code> 请求，我们手动设置了请求头中的 <code>content-type</code> 为 <code>application/x-www-form-urlencoded</code>。</li></ul><h2 id="_5-揭开cors的面纱" tabindex="-1">5.揭开CORS的面纱 <a class="header-anchor" href="#_5-揭开cors的面纱" aria-label="Permalink to &quot;5.揭开CORS的面纱&quot;">​</a></h2><p>在日常实际跨域的时候，分两种请求：<strong>简单请求</strong>和<strong>预检请求</strong>。</p><h3 id="_5-1-简单请求" tabindex="-1">5-1.简单请求 <a class="header-anchor" href="#_5-1-简单请求" aria-label="Permalink to &quot;5-1.简单请求&quot;">​</a></h3><p>若请求满足下述<strong>所有</strong>条件，则该请求可视为<strong>简单请求</strong>。</p><ol><li>使用下列方法之一 <ul><li><code>GET</code></li><li><code>POST</code></li><li><code>HEAD</code></li></ul></li><li>能人为的在请求头中添加的字段只包含以下： <ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> (该字段有额外的限制，请看下面第3项)</li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width</code></li></ul></li><li><code>Content-Type</code>的值仅限于下列三者之一： <ul><li><code>text/plain</code></li><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li></ul></li><li>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器。<code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</li><li>请求中没有使用 <code>ReadableStream</code> 对象。</li></ol><p>浏览器会在<strong>简单请求</strong>中的请求头中自动设定<code>origin</code>属性。而且由于其他条件都已经满足，如 <code>content-type</code> 等，所以后端服务只设置<code>Access-Control-Allow-Origin: &#39;*&#39;</code> 即可。</p><p>正如我之前在 <code>node</code> 服务器中设置的，因而 <code>xmlhttp</code> 以及 <code>axios1</code> 直接成功了。</p><h3 id="_5-2-预检请求" tabindex="-1">5-2.预检请求 <a class="header-anchor" href="#_5-2-预检请求" aria-label="Permalink to &quot;5-2.预检请求&quot;">​</a></h3><p>当某个跨域请求不满足上述<strong>简单请求</strong>的条件，这时的<strong>浏览器</strong>会自动发送一条<code>options</code>方法的请求。</p><p>这条请求，我们称之为<strong>预检请求</strong>。</p><p>假如使用的是谷歌 <code>chrome</code> 浏览器 <code>v76</code> 版本及以上。这条 <code>options</code> 请求在控制台是默认隐藏的。</p><p>而 <code>firefox</code> 目前是可以看见 <code>options</code> 预检请求。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/171f86778eb81f01~tplv-t2oaga2asx-image.image" alt="" loading="lazy"></p><p><code>Chrome</code> 之所以这样做，是为了隐藏 <code>CORS</code> 的一些请求。</p><p>但是这种方式对于开发者来说，确实不够友好。</p><p>具体缘由请参见该链接以及该链接中的其他链接。<a href="https://support.google.com/chrome/thread/11089651?hl=en" target="_blank" rel="noreferrer">click me~</a></p><p>打开方式是在 <code>chrome</code> 地址栏直接访问 <code>chrome://flags/#out-of-blink-cors</code>。</p><p>将页面上的 <code>Out of blink CORS</code> 选项，改为 <code>Disabled</code>。然后 <code>relaunch</code> 浏览器，设置即可生效。</p><p>下面是重启之后的 <code>chrome</code> 控制台。跟之前对比的话，可以看到失败的 <code>post</code> 请求已经变为 <code>options</code> 请求。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/171f872f7d994833~tplv-t2oaga2asx-image.image" alt="" loading="lazy"></p><h2 id="_6-解决预检请求的跨域问题" tabindex="-1">6.解决预检请求的跨域问题 <a class="header-anchor" href="#_6-解决预检请求的跨域问题" aria-label="Permalink to &quot;6.解决预检请求的跨域问题&quot;">​</a></h2><p><code>CORS</code> 的整体流程如下：</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/171f8a78db4e78e5~tplv-t2oaga2asx-image.image" alt="" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>简单请求，只需要配置 <code>Access-Control-Allow-Origin</code></p><p>非简单请求，会额外发送 <code>OPTIONS</code> 请求。</p><p>此时，<code>OPTIONS</code> 会自动携带额外的<strong>请求头</strong>：</p><ul><li><code>Access-Control-Request-Method</code></li><li><code>Access-Control-Request-Headers</code></li><li><code>...等</code></li></ul><p>服务端根据不同的场景需要配置对应的<strong>响应头</strong>：</p><ul><li><code>Access-Control-Allow-Methods</code></li><li><code>Access-Control-Allow-Headers</code></li><li><code>...等</code></li></ul><p>此外，服务端还可以设置 <code>Access-Control-Max-Age</code> （指 <code>CORS</code> 策略生效保持的最大时间）。</p></div><p>对应本文上述<code>axios2</code>的问题，由此可知：</p><p><strong>只要在node服务设置 <code>Access-Control-Allow-Headers: content-type;</code> 即可。</strong></p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/171f8ba68f36aa20~tplv-t2oaga2asx-image.image" alt="" loading="lazy"></p><p>重新启动服务器后，再看下chrome控制台，就会发现 <code>axios2</code> 的 <code>options</code> 请求后的<code> post</code> 请求也已经成功了。</p><p><img src="https://raw.githubusercontent.com/oneyoung19/vuepress-blog-img/main/img/171f8bbf6314be03~tplv-t2oaga2asx-image.image" alt="" loading="lazy"></p><h2 id="_7-总结" tabindex="-1">7.总结 <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7.总结&quot;">​</a></h2><p>之前在使用第三方的设置过 <code>CORS</code> 的后端接口时，我使用 <code>axios</code> 的 <code>post</code> 方式总是请求失败。</p><p>测试 <code>Jquery</code> 的 <code>$.ajax</code> 反而成功了。</p><p>当时还是蛮懵的，排查不出具体原因。</p><p>于是记录了下问题，前俩天遇见了 <code>CORS</code> 的<strong>简单请求</strong>以及<strong>预检请求</strong>这俩概念，于是一切恍然大悟。</p>`,75)]))}const E=i(t,[["render",l]]);export{r as __pageData,E as default};
